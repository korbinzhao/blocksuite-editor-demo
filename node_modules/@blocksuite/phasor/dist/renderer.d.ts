import { type IPoint, Point } from '@blocksuite/blocks/std';
import { RoughCanvas } from 'roughjs/bin/canvas.js';
import { type IBound } from './consts.js';
import type { SurfaceElement } from './elements/surface-element.js';
import { GridManager } from './grid.js';
export interface SurfaceViewport {
    readonly left: number;
    readonly top: number;
    readonly width: number;
    readonly height: number;
    readonly center: Point;
    readonly centerX: number;
    readonly centerY: number;
    readonly zoom: number;
    readonly viewportX: number;
    readonly viewportY: number;
    readonly viewportMinXY: IPoint;
    readonly viewportMaxXY: IPoint;
    readonly viewportBounds: IBound;
    toModelCoord(viewX: number, viewY: number): [number, number];
    toViewCoord(logicalX: number, logicalY: number): [number, number];
    setCenter(centerX: number, centerY: number): void;
    setZoom(zoom: number, focusPoint?: Point): void;
    applyDeltaCenter(deltaX: number, deltaY: number): void;
}
export declare class Renderer implements SurfaceViewport {
    canvas: HTMLCanvasElement;
    ctx: CanvasRenderingContext2D;
    rc: RoughCanvas;
    gridManager: GridManager;
    private _container;
    private _left;
    private _top;
    private _width;
    private _height;
    private _zoom;
    private _center;
    private _shouldUpdate;
    constructor();
    get left(): number;
    get top(): number;
    get width(): number;
    get height(): number;
    get zoom(): number;
    get centerX(): number;
    get centerY(): number;
    get center(): Point;
    get viewportX(): number;
    get viewportY(): number;
    get viewportMinXY(): {
        x: number;
        y: number;
    };
    get viewportMaxXY(): {
        x: number;
        y: number;
    };
    get viewportBounds(): {
        w: number;
        h: number;
        x: number;
        y: number;
    };
    toModelCoord(viewX: number, viewY: number): [number, number];
    toViewCoord(logicalX: number, logicalY: number): [number, number];
    setCenter(centerX: number, centerY: number): void;
    /**
     *
     * @param zoom zoom
     * @param focusPoint canvas coordinate
     */
    setZoom(zoom: number, focusPoint?: Point): void;
    applyDeltaCenter: (deltaX: number, deltaY: number) => void;
    addElement(element: SurfaceElement): void;
    removeElement(element: SurfaceElement): void;
    load(elements: SurfaceElement[]): void;
    refresh(): void;
    attach(container: HTMLElement): void;
    onResize(): void;
    private _resetSize;
    private _loop;
    private _render;
}
//# sourceMappingURL=renderer.d.ts.map