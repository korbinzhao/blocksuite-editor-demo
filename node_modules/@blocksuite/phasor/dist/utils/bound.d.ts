import { Point } from '@blocksuite/blocks';
import type { IBound } from '../consts.js';
import { type SerializedXYWH } from './xywh.js';
export declare class Bound implements IBound {
    x: number;
    y: number;
    w: number;
    h: number;
    constructor(x: number, y: number, w: number, h: number);
    static from(arg1: IBound): Bound;
    get center(): Point;
    get minX(): number;
    get minY(): number;
    get maxX(): number;
    get maxY(): number;
    get tl(): Point;
    get tr(): Point;
    get bl(): Point;
    get br(): Point;
    intersectLine(sp: Point, ep: Point, infinite?: boolean): Point[] | null;
    isIntersectWithBound(bound: Bound, epsilon?: number): boolean;
    serialize(): SerializedXYWH;
    static deserialize(s: string): Bound;
}
export declare function getCommonBound(bounds: IBound[]): Bound | null;
/**
 * Get whether A contains B
 */
export declare function contains(a: IBound, b: IBound): boolean;
export declare function getBoundFromPoints(points: number[][]): Bound;
export declare function inflateBound(bound: IBound, delta: number): Bound;
export declare function transformPointsToNewBound<T extends {
    x: number;
    y: number;
}>(points: T[], oldBound: IBound, oldMargin: number, newBound: IBound, newMargin: number): {
    points: T[];
    bound: Bound;
};
//# sourceMappingURL=bound.d.ts.map