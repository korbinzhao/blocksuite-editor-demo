import * as Y from 'yjs';
import type { IBound } from './consts.js';
import { type IElementCreateProps, type IPhasorElementType, type PhasorElement, type SurfaceElement } from './elements/index.js';
import type { ComputedValue, HitTestOptions } from './elements/surface-element.js';
import type { SurfaceViewport } from './renderer.js';
export declare class SurfaceManager {
    private _renderer;
    private _yContainer;
    private _elements;
    private _bindings;
    private _computedValue;
    indexes: {
        min: string;
        max: string;
    };
    constructor(yContainer: Y.Map<unknown>, computedValue?: ComputedValue);
    get viewport(): SurfaceViewport;
    private _addBinding;
    private _updateBindings;
    private _syncFromExistingContainer;
    private _onYContainer;
    private _transact;
    refresh(): void;
    updateIndexes(keys: string[], elements: PhasorElement[], callback: (keys: string[]) => void): void;
    attach(container: HTMLElement): void;
    onResize(): void;
    getElementsBound(): IBound | null;
    addElement<T extends keyof IPhasorElementType>(type: T, properties: IElementCreateProps<T>): PhasorElement['id'];
    updateElement<T extends keyof IPhasorElementType>(id: string, properties: IElementCreateProps<T>): void;
    setElementBound(id: string, bound: IBound): void;
    removeElement(id: string): void;
    hasElement(id: string): boolean;
    toModelCoord(viewX: number, viewY: number): [number, number];
    toViewCoord(modelX: number, modelY: number): [number, number];
    pickById(id: string): SurfaceElement<import("./elements/surface-element.js").ISurfaceElement> | undefined;
    pickByPoint(x: number, y: number, options?: HitTestOptions): SurfaceElement[];
    pickTop(x: number, y: number): SurfaceElement | null;
    pickByBound(bound: IBound): SurfaceElement[];
    getSortedElementsWithViewportBounds(): SurfaceElement<import("./elements/surface-element.js").ISurfaceElement>[];
    getBindingElements(id: string): SurfaceElement<import("./elements/surface-element.js").ISurfaceElement>[];
    dispose(): void;
    /** @internal Only for testing */
    initDefaultGestureHandler(): void;
    getElements(): SurfaceElement<import("./elements/surface-element.js").ISurfaceElement>[];
}
//# sourceMappingURL=surface.d.ts.map