import type { SurfaceElement } from '../index.js';
import { BrushElement } from './brush/brush-element.js';
import type { IBrush } from './brush/types.js';
import { ConnectorElement } from './connector/connector-element.js';
import type { IConnector } from './connector/types.js';
import { DebugElement, type IDebug } from './debug/debug-element.js';
import { ShapeElement } from './shape/shape-element.js';
import type { IShape } from './shape/types.js';
import { TextElement } from './text/text-element.js';
import type { IText } from './text/types.js';
export { BrushElement } from './brush/brush-element.js';
export { ConnectorElement } from './connector/connector-element.js';
export { DebugElement } from './debug/debug-element.js';
export { ShapeElement } from './shape/shape-element.js';
export type { ShapeType } from './shape/types.js';
export type { SurfaceElement } from './surface-element.js';
export { TextElement } from './text/text-element.js';
export type PhasorElement = ShapeElement | DebugElement | BrushElement | ConnectorElement | SurfaceElement;
export type PhasorElementType = {
    shape: ShapeElement;
    debug: DebugElement;
    brush: BrushElement;
    connector: ConnectorElement;
    text: TextElement;
};
export type IPhasorElementType = {
    shape: IShape;
    debug: IDebug;
    brush: IBrush;
    connector: IConnector;
    text: IText;
};
export declare const ElementCtors: {
    readonly debug: typeof DebugElement;
    readonly brush: typeof BrushElement;
    readonly shape: typeof ShapeElement;
    readonly connector: typeof ConnectorElement;
    readonly text: typeof TextElement;
};
export declare const ElementDefaultProps: Record<keyof IPhasorElementType, IElementDefaultProps<keyof IPhasorElementType>>;
export type IElementCreateProps<T extends keyof IPhasorElementType> = Partial<Omit<IPhasorElementType[T], 'id' | 'index' | 'seed'>>;
export type IElementDefaultProps<T extends keyof IPhasorElementType> = Omit<IPhasorElementType[T], 'id' | 'index' | 'seed'>;
export type { IBrush, IConnector, IDebug, IShape, IText };
//# sourceMappingURL=index.d.ts.map