import { isPointIn } from '../utils/hit-utils.js';
import { deserializeXYWH } from '../utils/xywh.js';
export class SurfaceElement {
    get display() {
        return this._display;
    }
    setDisplay(display) {
        this._display = display;
        this.renderer?.removeElement(this);
        this.renderer?.addElement(this);
    }
    constructor(yMap, surface, data) {
        this.renderer = null;
        this.surface = null;
        this.computedValue = v => v;
        this._display = true;
        this._onMap = () => {
            this.renderer?.removeElement(this);
            this.renderer?.addElement(this);
        };
        if (!yMap.doc) {
            throw new Error('yMap must be bound to a Y.Doc');
        }
        this.yMap = yMap;
        if (data) {
            for (const key in data) {
                this.yMap.set(key, data[key]);
            }
        }
        this.surface = surface;
    }
    get id() {
        const id = this.yMap.get('id');
        return id;
    }
    get index() {
        const index = this.yMap.get('index');
        return index;
    }
    get type() {
        const type = this.yMap.get('type');
        return type;
    }
    get xywh() {
        const xywh = this.yMap.get('xywh');
        return xywh;
    }
    get x() {
        const [x] = deserializeXYWH(this.xywh);
        return x;
    }
    get y() {
        const [, y] = deserializeXYWH(this.xywh);
        return y;
    }
    get w() {
        const [, , w] = deserializeXYWH(this.xywh);
        return w;
    }
    get h() {
        const [, , , h] = deserializeXYWH(this.xywh);
        return h;
    }
    get seed() {
        const seed = this.yMap.get('seed');
        return seed;
    }
    get minWidth() {
        return this.w;
    }
    get minHeight() {
        return this.h;
    }
    applyUpdate(updates) {
        for (const key in updates) {
            this.yMap.set(key, updates[key]);
        }
    }
    serialize() {
        return this.yMap.toJSON();
    }
    hitTest(x, y, options) {
        return isPointIn(this, x, y);
    }
    mount(renderer) {
        this.renderer = renderer;
        this.renderer.addElement(this);
        this.yMap.observeDeep(this._onMap);
    }
    unmount() {
        this.yMap.unobserveDeep(this._onMap);
        this.renderer?.removeElement(this);
        this.renderer = null;
    }
    render(ctx, rc) {
        return;
    }
}
//# sourceMappingURL=surface-element.js.map