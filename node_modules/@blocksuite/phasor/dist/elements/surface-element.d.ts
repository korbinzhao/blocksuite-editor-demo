import type { RoughCanvas } from 'roughjs/bin/canvas.js';
import type * as Y from 'yjs';
import type { Renderer } from '../renderer.js';
import type { SurfaceManager } from '../surface.js';
import { type SerializedXYWH } from '../utils/xywh.js';
export interface ISurfaceElement {
    id: string;
    type: string;
    xywh: SerializedXYWH;
    index: string;
    seed: number;
}
export interface HitTestOptions {
    expandStroke: boolean;
    fillHollow: boolean;
}
export type ComputedValue = (value: string) => string;
export declare class SurfaceElement<T extends ISurfaceElement = ISurfaceElement> {
    yMap: Y.Map<unknown>;
    protected renderer: Renderer | null;
    protected surface: SurfaceManager | null;
    computedValue: ComputedValue;
    private _display;
    get display(): boolean;
    setDisplay(display: boolean): void;
    constructor(yMap: Y.Map<unknown>, surface: SurfaceManager, data?: T);
    get id(): T["id"];
    get index(): T["index"];
    get type(): T["type"];
    get xywh(): T["xywh"];
    get x(): number;
    get y(): number;
    get w(): number;
    get h(): number;
    get seed(): T["seed"];
    get minWidth(): number;
    get minHeight(): number;
    applyUpdate(updates: Partial<T>): void;
    serialize(): T;
    hitTest(x: number, y: number, options?: HitTestOptions): boolean;
    private _onMap;
    mount(renderer: Renderer): void;
    unmount(): void;
    render(ctx: CanvasRenderingContext2D, rc: RoughCanvas): void;
}
//# sourceMappingURL=surface-element.d.ts.map