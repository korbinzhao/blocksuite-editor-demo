/// <reference types="@blocksuite/global" />
import { Slot } from '@blocksuite/global/utils';
import type { Awareness as YAwareness } from 'y-protocols/awareness.js';
import type { Space } from './space.js';
import type { Store } from './store.js';
export interface UserRange {
    startOffset: number;
    endOffset: number;
    blockIds: string[];
}
export interface UserInfo {
    id: number;
    name: string;
    color: string;
}
type Request<Flags extends Record<string, unknown> = BlockSuiteFlags, Key extends keyof Flags = keyof Flags> = {
    id: string;
    clientId: number;
    field: Key;
    value: Flags[Key];
};
type Response = {
    id: string;
};
export type RawAwarenessState<Flags extends Record<string, unknown> = BlockSuiteFlags> = {
    rangeMap?: Record<Space['prefixedId'], UserRange>;
    user?: UserInfo;
    flags: Flags;
    request?: Request<Flags>[];
    response?: Response[];
};
interface AwarenessEvent<Flags extends Record<string, unknown> = BlockSuiteFlags> {
    id: number;
    type: 'add' | 'update' | 'remove';
    state?: RawAwarenessState<Flags>;
}
export declare class AwarenessStore<Flags extends Record<string, unknown> = BlockSuiteFlags> {
    readonly awareness: YAwareness<RawAwarenessState<Flags>>;
    readonly store: Store;
    readonly slots: {
        update: Slot<AwarenessEvent<Flags>>;
    };
    constructor(store: Store, awareness: YAwareness<RawAwarenessState<Flags>>, defaultFlags: Flags);
    setFlag<Key extends keyof Flags>(field: Key, value: Flags[Key]): void;
    getFlag<Key extends keyof Flags>(field: Key): Flags[Key] | undefined;
    setReadonly(space: Space, value: boolean): void;
    isReadonly(space: Space): boolean;
    setRemoteFlag<Key extends keyof Flags>(clientId: number, field: Key, value: Flags[Key]): void;
    setLocalRange(space: Space, range: UserRange | null): void;
    getLocalRange(space: Space): UserRange | undefined;
    getStates(): Map<number, RawAwarenessState<Flags>>;
    private _onAwarenessChange;
    private _onAwarenessMessage;
    private _handleRemoteFlags;
    destroy(): void;
}
export {};
//# sourceMappingURL=awareness.d.ts.map