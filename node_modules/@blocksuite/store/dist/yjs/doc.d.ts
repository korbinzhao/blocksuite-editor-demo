import type { Transaction } from 'yjs';
import * as Y from 'yjs';
import type { ProxyConfig } from './config.js';
export type BlockSuiteDocAllowedValue = Record<string, unknown> | unknown[] | Y.Text;
export type BlockSuiteDocData = Record<string, BlockSuiteDocAllowedValue>;
export declare class BlockSuiteDoc<Data extends BlockSuiteDocData = BlockSuiteDocData> extends Y.Doc {
    getMapProxy<Key extends keyof Data & string, Value extends Record<string, unknown> = Data[Key] extends Record<string, unknown> ? Data[Key] : never>(key: Key, config?: ProxyConfig): Value;
    getArrayProxy<Key extends keyof Data & string, Value extends unknown[] = Data[Key] extends unknown[] ? Data[Key] : never>(key: Key, config?: ProxyConfig): Value;
    transact<T>(f: (arg0: Transaction) => T, origin?: number): T;
}
//# sourceMappingURL=doc.d.ts.map