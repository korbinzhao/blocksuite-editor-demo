import { Array as YArray, Map as YMap, Text as YText } from 'yjs';
export function isPureObject(value) {
    return (typeof value === 'object' &&
        value !== null &&
        !Array.isArray(value) &&
        !(value instanceof YMap) &&
        !(value instanceof YArray) &&
        !(value instanceof YText));
}
export function native2Y(value, deep) {
    if (Array.isArray(value)) {
        const yArray = new YArray();
        const result = value.map(item => {
            return deep ? native2Y(item, deep) : item;
        });
        yArray.insert(0, result);
        return yArray;
    }
    if (isPureObject(value)) {
        const yMap = new YMap();
        Object.entries(value).forEach(([key, value]) => {
            yMap.set(key, deep ? native2Y(value, deep) : value);
        });
        return yMap;
    }
    return value;
}
export function toPlainValue(v) {
    if (v instanceof YMap) {
        const obj = {};
        v.forEach((value, key) => {
            obj[key] = toPlainValue(value);
        });
        return obj;
    }
    if (v instanceof YArray) {
        return v.toArray().map(x => toPlainValue(x));
    }
    return v;
}
//# sourceMappingURL=utils.js.map