import { Slot } from '@blocksuite/global/utils';
import { z } from 'zod';
import { Text } from './text-adapter.js';
const FlavourSchema = z.string();
const ElementTagSchema = z.object({
    _$litStatic$: z.string(),
    r: z.symbol(),
});
const ParentSchema = z.array(z.string()).optional();
const ContentSchema = z.array(z.string()).optional();
const role = ['root', 'hub', 'content'];
const RoleSchema = z.enum(role);
export const internalPrimitives = Object.freeze({
    Text: (input = '') => new Text(input),
});
export const BlockSchema = z.object({
    version: z.number(),
    model: z.object({
        role: RoleSchema,
        flavour: FlavourSchema,
        tag: ElementTagSchema,
        parent: ParentSchema,
        children: ContentSchema,
        props: z
            .function()
            .args(z.custom())
            .returns(z.record(z.any()))
            .optional(),
        toModel: z.function().args().returns(z.custom()).optional(),
    }),
});
export function defineBlockSchema({ flavour, props, metadata, toModel, }) {
    const schema = {
        version: metadata.version,
        model: {
            tag: metadata.tag,
            role: metadata.role,
            parent: metadata.parent,
            children: metadata.children,
            flavour,
            props,
            toModel,
        },
    };
    BlockSchema.parse(schema);
    return schema;
}
function MagicProps() {
    // @ts-ignore
    return class {
    };
}
// @ts-ignore
export class BaseBlockModel extends MagicProps() {
    constructor() {
        super(...arguments);
        this.propsUpdated = new Slot();
        this.childrenUpdated = new Slot();
        this.childMap = new Map();
        this.children = [];
    }
    isEmpty() {
        return this.children.length === 0;
    }
    firstChild() {
        return this.children[0] || null;
    }
    lastChild() {
        if (!this.children.length) {
            return this;
        }
        return this.children[this.children.length - 1].lastChild();
    }
    lastItem() {
        if (!this.children.length) {
            return this;
        }
        return this.children[this.children.length - 1];
    }
    dispose() {
        this.propsUpdated.dispose();
        this.childrenUpdated.dispose();
    }
    onCreated() {
        // Empty by default
    }
}
//# sourceMappingURL=base.js.map