import type { BlockModels } from '@blocksuite/global/types';
import type { z } from 'zod';
import type { BaseBlockModel, BlockSchema } from '../base.js';
import type { Workspace } from '../workspace/index.js';
import type { BlockProps, YBlock, YBlocks } from '../workspace/page.js';
import type { Page } from '../workspace/page.js';
export declare function assertValidChildren(yBlocks: YBlocks, props: Partial<BlockProps>): void;
export declare function initInternalProps(yBlock: YBlock, props: Partial<BlockProps>): void;
export declare function syncBlockProps(schema: z.infer<typeof BlockSchema>, yBlock: YBlock, props: Partial<BlockProps>, ignoredKeys: Set<string>): void;
export declare function toBlockProps(yBlock: YBlock): Partial<BlockProps>;
export declare function encodeWorkspaceAsYjsUpdateV2(workspace: Workspace): string;
export declare function applyYjsUpdateV2(workspace: Workspace, update: string): void;
export declare function isInsideBlockByFlavour(page: Page, block: BaseBlockModel | string, flavour: keyof BlockModels): boolean;
//# sourceMappingURL=utils.d.ts.map