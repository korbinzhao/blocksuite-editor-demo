import { Slot } from '@blocksuite/global/utils';
import type * as Y from 'yjs';
import { z } from 'zod';
import { Text } from './text-adapter.js';
import type { Page } from './workspace/index.js';
import type { YBlock } from './workspace/page.js';
declare const role: readonly ["root", "hub", "content"];
export type RoleType = (typeof role)[number];
export interface InternalPrimitives {
    Text: (input?: Y.Text | string) => Text;
}
export declare const internalPrimitives: InternalPrimitives;
export declare const BlockSchema: z.ZodObject<{
    version: z.ZodNumber;
    model: z.ZodObject<{
        role: z.ZodEnum<["root", "hub", "content"]>;
        flavour: z.ZodString;
        tag: z.ZodObject<{
            _$litStatic$: z.ZodString;
            r: z.ZodSymbol;
        }, "strip", z.ZodTypeAny, {
            _$litStatic$: string;
            r: symbol;
        }, {
            _$litStatic$: string;
            r: symbol;
        }>;
        parent: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        children: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        props: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodType<InternalPrimitives, z.ZodTypeDef, InternalPrimitives>], z.ZodUnknown>, z.ZodRecord<z.ZodString, z.ZodAny>>>;
        toModel: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodType<BaseBlockModel<object>, z.ZodTypeDef, BaseBlockModel<object>>>>;
    }, "strip", z.ZodTypeAny, {
        role: "content" | "root" | "hub";
        tag: {
            _$litStatic$: string;
            r: symbol;
        };
        flavour: string;
        parent?: string[] | undefined;
        children?: string[] | undefined;
        props?: ((args_0: InternalPrimitives, ...args_1: unknown[]) => Record<string, any>) | undefined;
        toModel?: ((...args: unknown[]) => BaseBlockModel<object>) | undefined;
    }, {
        role: "content" | "root" | "hub";
        tag: {
            _$litStatic$: string;
            r: symbol;
        };
        flavour: string;
        parent?: string[] | undefined;
        children?: string[] | undefined;
        props?: ((args_0: InternalPrimitives, ...args_1: unknown[]) => Record<string, any>) | undefined;
        toModel?: ((...args: unknown[]) => BaseBlockModel<object>) | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    model: {
        role: "content" | "root" | "hub";
        tag: {
            _$litStatic$: string;
            r: symbol;
        };
        flavour: string;
        parent?: string[] | undefined;
        children?: string[] | undefined;
        props?: ((args_0: InternalPrimitives, ...args_1: unknown[]) => Record<string, any>) | undefined;
        toModel?: ((...args: unknown[]) => BaseBlockModel<object>) | undefined;
    };
    version: number;
}, {
    model: {
        role: "content" | "root" | "hub";
        tag: {
            _$litStatic$: string;
            r: symbol;
        };
        flavour: string;
        parent?: string[] | undefined;
        children?: string[] | undefined;
        props?: ((args_0: InternalPrimitives, ...args_1: unknown[]) => Record<string, any>) | undefined;
        toModel?: ((...args: unknown[]) => BaseBlockModel<object>) | undefined;
    };
    version: number;
}>;
export type BlockSchemaType = z.infer<typeof BlockSchema>;
export type PropsSetter<Props> = (props: Props) => Partial<Props>;
export type PropsGetter<Props> = (internalPrimitives: InternalPrimitives) => Props;
interface StaticValue {
    _$litStatic$: string;
    r: symbol;
}
export type SchemaToModel<Schema extends {
    model: {
        props: PropsGetter<object>;
        flavour: string;
    };
}> = BaseBlockModel & ReturnType<Schema['model']['props']> & {
    flavour: Schema['model']['flavour'];
};
export declare function defineBlockSchema<Flavour extends string, Role extends RoleType, Props extends object, Ext extends Record<string, unknown>, Metadata extends Readonly<{
    version: number;
    role: Role;
    tag: StaticValue;
    parent?: string[];
    children?: string[];
}>, Model extends BaseBlockModel<Props>>(options: {
    flavour: Flavour;
    metadata: Metadata;
    props?: (internalPrimitives: InternalPrimitives) => Props;
    toModel?: () => Model;
}): {
    version: number;
    model: {
        role: Role;
        props: PropsGetter<Props>;
        flavour: Flavour;
    } & Metadata;
};
declare const BaseBlockModel_base: new <Props_1>() => Props_1;
export declare class BaseBlockModel<Props extends object = object> extends BaseBlockModel_base<Props> {
    static version: number;
    flavour: string;
    tag: StaticValue;
    role: RoleType;
    page: Page;
    id: string;
    yBlock: YBlock;
    propsUpdated: Slot<void>;
    childrenUpdated: Slot<void>;
    childMap: Map<string, number>;
    children: BaseBlockModel[];
    type?: string;
    text?: Text;
    sourceId?: string;
    isEmpty(): boolean;
    firstChild(): BaseBlockModel | null;
    lastChild(): BaseBlockModel | null;
    lastItem(): BaseBlockModel | null;
    dispose(): void;
    onCreated(): void;
}
export {};
//# sourceMappingURL=base.d.ts.map