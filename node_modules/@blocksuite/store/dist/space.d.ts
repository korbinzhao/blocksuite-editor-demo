import type * as Y from 'yjs';
import type { AwarenessStore, UserRange } from './awareness.js';
import type { BlockSuiteDoc } from './yjs/index.js';
export interface StackItem {
    meta: Map<'cursor-location', UserRange | undefined>;
    type: 'undo' | 'redo';
}
export declare class Space<State extends Record<string, unknown> = Record<string, any>> {
    /** unprefixed id */
    readonly id: string;
    readonly doc: BlockSuiteDoc;
    readonly awarenessStore: AwarenessStore;
    /**
     * @internal Used for convenient access to the underlying Yjs map,
     * can be used interchangeably with ySpace
     */
    protected readonly _proxy: State;
    /**
     * @internal The actual underlying Yjs map
     */
    protected readonly _ySpace: Y.Map<State[keyof State]>;
    constructor(id: string, doc: BlockSuiteDoc, awarenessStore: AwarenessStore);
    get prefixedId(): string;
    /**
     * If `shouldTransact` is `false`, the transaction will not be push to the history stack.
     */
    transact(fn: () => void, shouldTransact?: boolean): void;
}
//# sourceMappingURL=space.d.ts.map