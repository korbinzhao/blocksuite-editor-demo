var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html, LitElement } from 'lit';
import { customElement, property, query } from 'lit/decorators.js';
let TestApp = class TestApp extends LitElement {
    constructor() {
        super(...arguments);
        this.pages = [];
    }
    _toggleFavorite(index) {
        const { id } = this.workspace.meta.pageMetas[index];
        this.workspace.setPageMeta(id, { favorite: !this.pages[index].favorite });
    }
    _createPage() {
        const id = `${this.pages.length}`;
        this.workspace.createPage({ id: id });
        this.workspace.setPageMeta(id, { title: this.input.value });
        this.input.value = '';
    }
    firstUpdated(changedProps) {
        super.firstUpdated(changedProps);
        this.workspace.slots.pagesUpdated.on(() => {
            this.pages = this.workspace.meta.pageMetas.map(page => ({
                title: page.title,
                favorite: page.favorite,
            }));
            this.requestUpdate();
        });
        this.workspace.slots;
    }
    render() {
        return html `
      <div>
        <input type="text" name="page" placeholder="add a page" />
        <button type="button" @click=${this._createPage}>add</button>
      </div>
      <ul>
        ${this.pages.map((todo, index) => html `
            <li>
              <input
                type="checkbox"
                .checked=${todo.favorite}
                @change=${() => this._toggleFavorite(index)}
              />
              ${todo.title}
            </li>
          `)}
      </ul>
    `;
    }
};
__decorate([
    property()
], TestApp.prototype, "pages", void 0);
__decorate([
    query('input[name="page"]')
], TestApp.prototype, "input", void 0);
TestApp = __decorate([
    customElement('test-app')
], TestApp);
export { TestApp };
//# sourceMappingURL=test-app.js.map