import type { BlockSchemaType } from '../base.js';
import type { Workspace } from './workspace.js';
export declare class Schema {
    workspace: Workspace;
    flavourSchemaMap: Map<string, {
        model: {
            role: "content" | "root" | "hub";
            tag: {
                _$litStatic$: string;
                r: symbol;
            };
            flavour: string;
            parent?: string[] | undefined;
            children?: string[] | undefined;
            props?: ((args_0: import("../base.js").InternalPrimitives, ...args_1: unknown[]) => Record<string, any>) | undefined;
            toModel?: ((...args: unknown[]) => import("../base.js").BaseBlockModel<object>) | undefined;
        };
        version: number;
    }>;
    constructor(workspace: Workspace);
    toJSON(): {
        [k: string]: Record<string, unknown>;
    };
    validate: (flavour: string, parentFlavour?: string, childFlavours?: string[]) => void;
    validateSchema(child: BlockSchemaType, parent: BlockSchemaType): void;
    private _validateRole;
    private _matchFlavour;
    private _validateParent;
}
//# sourceMappingURL=schema.d.ts.map