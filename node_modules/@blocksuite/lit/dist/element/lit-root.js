/* eslint-disable lit/binding-positions, lit/no-invalid-html */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { nothing } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { repeat } from 'lit/directives/repeat.js';
import { html, unsafeStatic } from 'lit/static-html.js';
import { UIEventDispatcher } from '../event/index.js';
import { ShadowlessElement } from './shadowless-element.js';
let BlockSuiteRoot = class BlockSuiteRoot extends ShadowlessElement {
    constructor() {
        super(...arguments);
        this.blockIdAttr = 'data-block-id';
        this.modelSubscribed = new Set();
        this.uiEventDispatcher = new UIEventDispatcher(this);
        this.renderModel = (model) => {
            const { flavour, children } = model;
            const schema = this.page.schema.flavourSchemaMap.get(flavour);
            if (!schema) {
                console.warn(`Cannot find schema for ${flavour}.`);
                return html `${nothing}`;
            }
            const tag = this.componentMap.get(schema);
            if (!tag) {
                console.warn(`Cannot find tag for ${flavour}.`);
                return html `${nothing}`;
            }
            this._onLoadModel(model);
            return html `<${tag}
      ${unsafeStatic(this.blockIdAttr)}=${model.id}
      .root=${this}
      .page=${this.page}
      .model=${model}
      .content=${html `${repeat(children, child => child.id, child => this.renderModel(child))}`}
    ></${tag}>`;
        };
        this._onLoadModel = (model) => {
            const { id } = model;
            if (!this.modelSubscribed.has(id)) {
                model.propsUpdated.on(() => {
                    this.requestUpdate();
                });
                model.childrenUpdated.on(() => {
                    this.requestUpdate();
                });
                this.modelSubscribed.add(id);
            }
        };
    }
    connectedCallback() {
        super.connectedCallback();
        this.uiEventDispatcher.mount();
    }
    disconnectedCallback() {
        super.disconnectedCallback();
        this.uiEventDispatcher.unmount();
    }
    render() {
        const { root } = this.page;
        if (!root) {
            return null;
        }
        return this.renderModel(root);
    }
};
__decorate([
    property()
], BlockSuiteRoot.prototype, "componentMap", void 0);
__decorate([
    property()
], BlockSuiteRoot.prototype, "page", void 0);
__decorate([
    property()
], BlockSuiteRoot.prototype, "blockIdAttr", void 0);
BlockSuiteRoot = __decorate([
    customElement('block-suite-root')
], BlockSuiteRoot);
export { BlockSuiteRoot };
//# sourceMappingURL=lit-root.js.map