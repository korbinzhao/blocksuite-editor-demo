import { DisposableGroup } from '@blocksuite/global/utils';
import type { UIEventHandler } from './base.js';
import { UIEventStateContext } from './base.js';
declare const eventNames: readonly ["click", "doubleClick", "tripleClick", "pointerDown", "pointerMove", "pointerUp", "pointerOut", "dragStart", "dragMove", "dragEnd", "keyDown", "keyUp", "beforeInput", "compositionStart", "compositionUpdate", "compositionEnd", "paste", "copy", "blur", "focus", "drop", "contextMenu", "wheel", "selectionChange", "virgo-vrange-updated"];
export type EventName = (typeof eventNames)[number];
export declare class UIEventDispatcher {
    root: HTMLElement;
    disposables: DisposableGroup;
    private _handlersMap;
    private _pointerControl;
    private _keyboardControl;
    constructor(root: HTMLElement);
    mount(): void;
    unmount(): void;
    run(name: EventName, context: UIEventStateContext): void;
    add(name: EventName, handler: UIEventHandler): () => void;
    private _bindEvents;
}
export {};
//# sourceMappingURL=dispatcher.d.ts.map