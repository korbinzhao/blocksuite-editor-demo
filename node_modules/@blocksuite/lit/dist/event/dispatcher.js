import { DisposableGroup } from '@blocksuite/global/utils';
import { UIEventStateContext } from './base.js';
import { UIEventState } from './base.js';
import { KeyboardControl } from './keyboard.js';
import { PointerControl } from './pointer.js';
import { toLowerCase } from './utils.js';
const bypassEventNames = [
    'beforeInput',
    'compositionStart',
    'compositionUpdate',
    'compositionEnd',
    'paste',
    'copy',
    'blur',
    'focus',
    'drop',
    'contextMenu',
    'wheel',
];
const globalEventNames = ['selectionChange', 'virgo-vrange-updated'];
const eventNames = [
    'click',
    'doubleClick',
    'tripleClick',
    'pointerDown',
    'pointerMove',
    'pointerUp',
    'pointerOut',
    'dragStart',
    'dragMove',
    'dragEnd',
    'keyDown',
    'keyUp',
    ...bypassEventNames,
    ...globalEventNames,
];
export class UIEventDispatcher {
    constructor(root) {
        this.root = root;
        this.disposables = new DisposableGroup();
        this._handlersMap = Object.fromEntries(eventNames.map((name) => [name, []]));
        this._pointerControl = new PointerControl(this);
        this._keyboardControl = new KeyboardControl(this);
    }
    mount() {
        if (this.disposables.disposed) {
            this.disposables = new DisposableGroup();
        }
        this._bindEvents();
    }
    unmount() {
        this.disposables.dispose();
    }
    run(name, context) {
        const handlers = this._handlersMap[name];
        if (!handlers)
            return;
        for (const handler of handlers) {
            const result = handler(context);
            if (result) {
                return;
            }
        }
    }
    add(name, handler) {
        this._handlersMap[name].unshift(handler);
        return () => {
            if (this._handlersMap[name].includes(handler)) {
                this._handlersMap[name] = this._handlersMap[name].filter(f => f !== handler);
            }
        };
    }
    _bindEvents() {
        bypassEventNames.forEach(eventName => {
            this.disposables.addFromEvent(this.root, toLowerCase(eventName), e => {
                this.run(eventName, UIEventStateContext.from(new UIEventState(e)));
            });
        });
        globalEventNames.forEach(eventName => {
            this.disposables.addFromEvent(document, toLowerCase(eventName), e => {
                this.run(eventName, UIEventStateContext.from(new UIEventState(e)));
            });
        });
        this._pointerControl.listen();
        this._keyboardControl.listen();
    }
}
//# sourceMappingURL=dispatcher.js.map