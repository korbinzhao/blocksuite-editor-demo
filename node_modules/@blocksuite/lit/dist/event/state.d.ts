import { UIEventState } from './base.js';
type PointerEventStateOptions = {
    event: PointerEvent;
    rect: DOMRect;
    startX: number;
    startY: number;
    last: PointerEventState | null;
};
type Point = {
    x: number;
    y: number;
};
export declare class PointerEventState extends UIEventState {
    readonly type = "pointerState";
    raw: PointerEvent;
    point: Point;
    containerOffset: Point;
    start: Point;
    delta: Point;
    keys: {
        shift: boolean;
        cmd: boolean;
        alt: boolean;
    };
    button: number;
    dragging: boolean;
    get x(): number;
    get y(): number;
    constructor({ event, rect, startX, startY, last }: PointerEventStateOptions);
}
type KeyboardEventStateOptions = {
    event: KeyboardEvent;
};
export declare class KeyboardEventState extends UIEventState {
    readonly type = "keyboardState";
    raw: KeyboardEvent;
    constructor({ event }: KeyboardEventStateOptions);
}
declare global {
    interface BlockSuiteUIEventState {
        pointerState: PointerEventState;
    }
}
declare global {
    interface BlockSuiteUIEventState {
        keyboardState: KeyboardEventState;
    }
}
export {};
//# sourceMappingURL=state.d.ts.map