var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html, LitElement } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { ZERO_WIDTH_SPACE } from '../consts.js';
import { getDefaultAttributeRenderer } from '../utils/attribute-renderer.js';
let VirgoElement = class VirgoElement extends LitElement {
    constructor() {
        super(...arguments);
        this.delta = {
            insert: ZERO_WIDTH_SPACE,
        };
        this.attributeRenderer = getDefaultAttributeRenderer();
    }
    render() {
        // we need to avoid \n appearing before and after the span element, which will
        // cause the unexpected space
        return html `<span data-virgo-element="true"
      >${this.attributeRenderer(this.delta)}</span
    >`;
    }
    createRenderRoot() {
        return this;
    }
};
__decorate([
    property({ type: Object })
], VirgoElement.prototype, "delta", void 0);
__decorate([
    property({ type: Function, attribute: false })
], VirgoElement.prototype, "attributeRenderer", void 0);
VirgoElement = __decorate([
    customElement('v-element')
], VirgoElement);
export { VirgoElement };
//# sourceMappingURL=virgo-element.js.map