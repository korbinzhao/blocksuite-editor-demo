import type { VRange } from '../types.js';
import { type BaseTextAttributes } from '../utils/index.js';
import type { VEditor } from '../virgo.js';
export interface VHandlerContext<T extends BaseTextAttributes, E extends Event = Event> {
    event: E;
    data: string | null;
    vRange: VRange;
    skipDefault: boolean;
    attributes: T | null;
}
export declare class VirgoEventService<TextAttributes extends BaseTextAttributes> {
    private readonly _editor;
    private _mountAbortController;
    private _handlerAbortController;
    private _isComposing;
    private _handlers;
    private _previousAnchor;
    private _previousFocus;
    constructor(editor: VEditor<TextAttributes>);
    defaultHandlers: VirgoEventService<TextAttributes>['_handlers'];
    mount: () => void;
    unmount: () => void;
    bindHandlers: (handlers?: VirgoEventService<TextAttributes>['_handlers']) => void;
    private _onSelectionChange;
    private _onCompositionStart;
    private _onCompositionEnd;
    private _firstRecomputeInFrame;
    private _onBeforeInput;
    private _onScroll;
}
//# sourceMappingURL=event.d.ts.map