import { BlockElement } from '@blocksuite/lit';
import { Slot } from '@blocksuite/store';
import { VEditor } from '@blocksuite/virgo';
import { PageClipboard } from '../../__internal__/clipboard/index.js';
import type { BlockHost, EditingState, SelectionPosition } from '../../__internal__/index.js';
import { Rect } from '../../__internal__/index.js';
import { getService } from '../../__internal__/service.js';
import type { DragHandle } from '../../components/index.js';
import type { PageBlockModel } from '../page-model.js';
import { DefaultSelectionManager } from './selection-manager/index.js';
export interface DefaultSelectionSlots {
    draggingAreaUpdated: Slot<DOMRect | null>;
    selectedRectsUpdated: Slot<DOMRect[]>;
    embedRectsUpdated: Slot<DOMRect[]>;
    embedEditingStateUpdated: Slot<EditingState | null>;
}
export declare class DefaultPageBlockComponent extends BlockElement<PageBlockModel> implements BlockHost {
    static styles: import("lit").CSSResult;
    flavour: "affine:page";
    clipboard: PageClipboard;
    selection: DefaultSelectionManager;
    getService: typeof getService;
    lastSelectionPosition: SelectionPosition;
    /**
     * Shared components
     */
    components: {
        dragHandle: DragHandle | null;
    };
    mouseRoot: HTMLElement;
    private _draggingArea;
    private _selectedRects;
    private _selectedEmbedRects;
    private _embedEditingState;
    private _isComposing;
    private _resizeObserver;
    viewportElement: HTMLDivElement;
    pageBlockContainer: HTMLDivElement;
    slots: {
        draggingAreaUpdated: Slot<DOMRect | null>;
        selectedRectsUpdated: Slot<DOMRect[]>;
        embedRectsUpdated: Slot<DOMRect[]>;
        embedEditingStateUpdated: Slot<EditingState | null>;
        nativeSelectionToggled: Slot<boolean>;
        pageLinkClicked: Slot<{
            pageId: string;
            blockId?: string | undefined;
        }>;
    };
    private _titleContainer;
    private _titleVEditor;
    get titleVEditor(): VEditor<{
        bold?: true | undefined;
        italic?: true | undefined;
        underline?: true | undefined;
        strike?: true | undefined;
        code?: true | undefined;
        link?: string | undefined;
    }>;
    get innerRect(): Rect;
    private _initTitleVEditor;
    private _updateTitleInMeta;
    private _onTitleKeyDown;
    private _onTitlePaste;
    private _onWheel;
    private _onScroll;
    updated(changedProperties: Map<string, unknown>): void;
    private _initDragHandle;
    private _initSlotEffects;
    private _initFrameSizeEffect;
    private _initResizeEffect;
    firstUpdated(): void;
    connectedCallback(): void;
    disconnectedCallback(): void;
    render(): import("lit").TemplateResult<1>;
}
declare global {
    interface HTMLElementTagNameMap {
        'affine-default-page': DefaultPageBlockComponent;
    }
}
//# sourceMappingURL=default-page-block.d.ts.map