import type { PointerEventState } from '@blocksuite/lit';
import type { BlockComponentElement, IPoint } from '../../../__internal__/index.js';
import { Point } from '../../../__internal__/index.js';
import type { RichText } from '../../../__internal__/rich-text/rich-text.js';
import type { EmbedBlockComponent } from '../../../embed-block/index.js';
export type PageSelectionType = 'native' | 'block' | 'block:drag' | 'none' | 'embed' | 'database';
export interface PageViewport {
    left: number;
    top: number;
    scrollLeft: number;
    scrollTop: number;
    scrollHeight: number;
    clientHeight: number;
    clientWidth: number;
}
export declare class PageSelectionState {
    type: PageSelectionType;
    viewport: PageViewport;
    draggingArea: {
        start: Point;
        end: Point;
    } | null;
    selectedEmbeds: EmbedBlockComponent[];
    selectedBlocks: BlockComponentElement[];
    focusedBlock: BlockComponentElement | null;
    rafID?: number;
    lastPoint: Point | null;
    private _startRange;
    private _richTextCache;
    private _blockCache;
    private _embedCache;
    private _activeComponent;
    constructor(type: PageSelectionType);
    get activeComponent(): BlockComponentElement | null;
    set activeComponent(component: BlockComponentElement | null);
    get startRange(): Range | null;
    get richTextCache(): Map<RichText, DOMRect>;
    get blockCache(): Map<RichText | import("../../../bookmark-block/components/bookmark-operation-popper.js").BookmarkOperationMenu | import("../../../bookmark-block/components/bookmark-toolbar.js").BookmarkToolbar | import("../../../bookmark-block/components/bookmark-edit-modal.js").BookmarkEditModal | import("../../../bookmark-block/components/bookmark-create-modal.js").BookmarkCreateModal | import("../../../index.js").BookmarkBlockComponent | import("../../../index.js").ListBlockComponent | import("../../../index.js").CodeBlockComponent | import("../../../database-block/table/table-view.js").DatabaseTable | import("../../../database-block/kanban/kanban-view.js").DatabaseKanban | import("../../../index.js").DatabaseBlockComponent | import("../default-page-block.js").DefaultPageBlockComponent | import("../../index.js").EdgelessPageBlockComponent | EmbedBlockComponent | import("../../../embed-block/index.js").ImageBlockComponent | import("../../../index.js").DividerBlockComponent | import("../../../index.js").ParagraphBlockComponent | import("../../../index.js").FrameBlockComponent, DOMRect>;
    get embedCache(): Map<EmbedBlockComponent, DOMRect>;
    get viewportOffset(): IPoint;
    resetStartRange(e: PointerEventState): void;
    resetDraggingArea(e: PointerEventState, offset?: {
        scrollLeft: number;
        scrollTop: number;
    }): void;
    refreshBlockRectCache(): void;
    blur(): void;
    clearRaf(): void;
    clearDraggingArea(): void;
    clearNativeSelection(): void;
    clearBlockSelection(): void;
    clearEmbedSelection(): void;
    clearSelection(): void;
}
//# sourceMappingURL=selection-state.d.ts.map