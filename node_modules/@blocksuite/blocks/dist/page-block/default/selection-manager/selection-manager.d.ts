import '../../../components/drag-handle.js';
import type { UIEventDispatcher } from '@blocksuite/lit';
import { type BaseBlockModel, type Page } from '@blocksuite/store';
import { AbstractSelectionManager, type BlockComponentElement, type EditingState, type IPoint, Point } from '../../../__internal__/index.js';
import type { DefaultPageBlockComponent, DefaultSelectionSlots } from '../default-page-block.js';
import { PageSelectionState } from './selection-state.js';
/**
 * The selection manager used in default mode.
 */
export declare class DefaultSelectionManager extends AbstractSelectionManager<DefaultPageBlockComponent> {
    readonly state: PageSelectionState;
    readonly slots: DefaultSelectionSlots;
    private readonly _embedResizeManager;
    constructor({ container, dispatcher, page, mouseRoot, slots, }: {
        container: DefaultPageBlockComponent;
        dispatcher: UIEventDispatcher;
        page: Page;
        mouseRoot: HTMLElement;
        slots: DefaultSelectionSlots;
    });
    private _ensureFrameExists;
    private _add;
    private _onContainerDragStart;
    private _onContainerDragMove;
    private _onContainerDragEnd;
    private _onContainerPointerDown;
    private _onContainerClick;
    private _onContainerDblClick;
    private _onContainerTripleClick;
    private _onContainerContextMenu;
    private _onContainerPointerMove;
    private _onSelectionChangeWithDebounce;
    private _onSelectionChangeWithoutDebounce;
    get viewportElement(): HTMLDivElement;
    updateDraggingArea(draggingArea: {
        start: Point;
        end: Point;
    }): DOMRect;
    updateViewport(): void;
    updateRects(): void;
    refreshDraggingArea(viewportOffset: IPoint): void;
    refreshSelectedBlocksRects(): void;
    refreshSelectedBlocksRectsByModels(models: BaseBlockModel[]): void;
    refreshEmbedRects(hoverEditingState?: EditingState | null): void;
    refreshRemoteSelection(): void;
    selectOneBlock(element?: Element | null, rect?: DOMRect): void;
    selectAllBlocks(): void;
    selectBlocksByDraggingArea(blockCache: Map<BlockComponentElement, DOMRect>, draggingArea: DOMRect, viewportOffset: IPoint, isScrolling?: boolean): void;
    selectedBlocksWithShiftClick(x: number, y: number): void;
    setSelectedBlocks(selectedBlocks: BlockComponentElement[], rects?: DOMRect[]): void;
    setFocusedBlock(blockElement: Element): void;
    clear(): void;
    dispose(): void;
}
//# sourceMappingURL=selection-manager.d.ts.map