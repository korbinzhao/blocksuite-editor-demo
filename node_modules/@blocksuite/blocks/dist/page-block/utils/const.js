import { CopyIcon, DatabaseTableViewIcon, SHORT_KEY, } from '@blocksuite/global/config';
import { matchFlavours } from '@blocksuite/store';
import { assertExists } from '@blocksuite/store';
import { copyBlocks } from '../../__internal__/clipboard/utils/commons.js';
import { showDatabaseModal } from '../../components/database-modal/index.js';
import { toast } from '../../components/toast.js';
import { getCurrentBlockRange } from '../../std.js';
const DATABASE_WHITE_LIST = ['affine:list', 'affine:paragraph'];
export const actionConfig = [
    {
        id: 'copy',
        name: 'Copy',
        disabledToolTip: undefined,
        icon: CopyIcon,
        hotkey: undefined,
        showWhen: () => true,
        enabledWhen: () => true,
        action: ({ page }) => {
            const range = getCurrentBlockRange(page);
            assertExists(range);
            copyBlocks(range);
            toast('Copied to clipboard');
        },
    },
    {
        id: 'convert-to-database',
        name: 'Group as Database',
        disabledToolTip: 'Contains Block types that cannot be converted to Database. Learn more',
        icon: DatabaseTableViewIcon,
        hotkey: `${SHORT_KEY}+g`,
        showWhen: (page, models) => {
            if (models.length === 1 &&
                matchFlavours(models[0], ['affine:database'])) {
                return false;
            }
            const range = getCurrentBlockRange(page);
            const isShow = range?.type === 'Block';
            return isShow;
        },
        enabledWhen: (page) => {
            const range = getCurrentBlockRange(page);
            if (!range)
                return false;
            return range.models.every(model => DATABASE_WHITE_LIST.includes(model.flavour));
        },
        action: ({ page }) => {
            showDatabaseModal({
                page,
            });
        },
    },
];
//# sourceMappingURL=const.js.map