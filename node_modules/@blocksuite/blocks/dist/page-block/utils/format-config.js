import { BoldIcon, InlineCodeIcon, ItalicIcon, LinkIcon, SHORT_KEY, StrikethroughIcon, UnderlineIcon, } from '@blocksuite/global/config';
import { createLink } from '../../__internal__/rich-text/link-node/index.js';
import { getCurrentCombinedFormat, handleFormat, } from './container-operations.js';
export const formatConfig = [
    {
        id: 'bold',
        name: 'Bold',
        icon: BoldIcon,
        hotkey: `${SHORT_KEY}+b`,
        activeWhen: (format) => 'bold' in format,
        showWhen: (models) => noneCodeBlockSelected(models),
        action: ({ page }) => {
            handleFormat(page, 'bold');
        },
    },
    {
        id: 'italic',
        name: 'Italic',
        icon: ItalicIcon,
        hotkey: `${SHORT_KEY}+i`,
        activeWhen: (format) => 'italic' in format,
        showWhen: (models) => noneCodeBlockSelected(models),
        action: ({ page }) => {
            handleFormat(page, 'italic');
        },
    },
    {
        id: 'underline',
        name: 'Underline',
        icon: UnderlineIcon,
        hotkey: `${SHORT_KEY}+u`,
        activeWhen: (format) => 'underline' in format,
        showWhen: (models) => noneCodeBlockSelected(models),
        action: ({ page }) => {
            handleFormat(page, 'underline');
        },
    },
    {
        id: 'strike',
        name: 'Strikethrough',
        icon: StrikethroughIcon,
        hotkey: `${SHORT_KEY}+shift+s`,
        activeWhen: (format) => 'strike' in format,
        showWhen: (models) => noneCodeBlockSelected(models),
        action: ({ page }) => {
            handleFormat(page, 'strike');
        },
    },
    {
        id: 'code',
        name: 'Code',
        icon: InlineCodeIcon,
        hotkey: `${SHORT_KEY}+e`,
        activeWhen: (format) => 'code' in format,
        showWhen: (models) => noneCodeBlockSelected(models),
        action: ({ page }) => {
            handleFormat(page, 'code');
        },
    },
    {
        id: 'link',
        name: 'Link',
        icon: LinkIcon,
        hotkey: `${SHORT_KEY}+k`,
        activeWhen: (format) => 'link' in format,
        // Only can show link button when selection is in one line paragraph
        showWhen: (models) => models.length === 1 &&
            noneCodeBlockSelected(models) &&
            // can't create link when selection includes reference node
            // XXX get loose format at here is not a good practice
            !getCurrentCombinedFormat(models[0].page, true).reference,
        action: ({ page, abortController, format }) => {
            createLink(page);
            if (format && abortController && !('link' in format)) {
                abortController.abort();
            }
        },
    },
];
function noneCodeBlockSelected(models) {
    return !models.every(model => model.flavour === 'affine:code');
}
//# sourceMappingURL=format-config.js.map