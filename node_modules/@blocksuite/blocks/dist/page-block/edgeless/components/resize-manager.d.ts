import { Bound } from '@blocksuite/phasor';
import { HandleDirection, type ResizeMode } from './resize-handles.js';
type ResizeMoveHandler = (bounds: Map<string, Bound>) => void;
type ResizeEndHandler = () => void;
export declare class HandleResizeManager {
    private _onResizeMove;
    private _onResizeEnd;
    private _dragDirection;
    private _dragPos;
    private _bounds;
    /** Use [minX, minY, maxX, maxY] for convenience */
    private _commonBound;
    private _aspectRatio;
    private _resizeMode;
    private _zoom;
    private _shiftKey;
    constructor(onResizeMove: ResizeMoveHandler, onResizeEnd: ResizeEndHandler);
    private _resize;
    onPointerDown: (e: PointerEvent, direction: HandleDirection, bounds: Map<string, Bound>, resizeMode: ResizeMode, zoom: number) => void;
    onPressShiftKey(pressed: boolean): void;
}
export {};
//# sourceMappingURL=resize-manager.d.ts.map