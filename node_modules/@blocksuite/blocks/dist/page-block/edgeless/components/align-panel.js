var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { AlighLeftIcon, AlignCenterIcon, AlignRightIcon, } from '@blocksuite/global/config';
import { css, html, LitElement } from 'lit';
import { customElement, property } from 'lit/decorators.js';
let EdgelessAlignPanel = class EdgelessAlignPanel extends LitElement {
    constructor() {
        super(...arguments);
        this.value = 'left';
    }
    _onSelect(value) {
        this.value = value;
        if (this.onSelect) {
            this.onSelect(value);
        }
    }
    render() {
        return html `
      <div class="align-panel-container">
        <edgeless-tool-icon-button
          .tooltip=${'Left'}
          .active=${this.value === 'left'}
          @click=${() => {
            this._onSelect('left');
        }}
        >
          ${AlighLeftIcon}
        </edgeless-tool-icon-button>
        <edgeless-tool-icon-button
          .tooltip=${'Center'}
          .active=${this.value === 'center'}
          @click=${() => {
            this._onSelect('center');
        }}
        >
          ${AlignCenterIcon}
        </edgeless-tool-icon-button>
        <edgeless-tool-icon-button
          .tooltip=${'Right'}
          .active=${this.value === 'right'}
          @click=${() => {
            this._onSelect('right');
        }}
        >
          ${AlignRightIcon}
        </edgeless-tool-icon-button>
      </div>
    `;
    }
};
EdgelessAlignPanel.styles = css `
    :host {
      display: block;
      z-index: 2;
    }
    .align-panel-container {
      display: flex;
      flex-direction: row;
      align-items: flex-start;
      background: var(--affine-background-overlay-panel-color);
      box-shadow: var(--affine-shadow-2);
      border-radius: 8px;
      fill: none;
      stroke: currentColor;
    }
  `;
__decorate([
    property()
], EdgelessAlignPanel.prototype, "value", void 0);
__decorate([
    property()
], EdgelessAlignPanel.prototype, "onSelect", void 0);
EdgelessAlignPanel = __decorate([
    customElement('edgeless-align-panel')
], EdgelessAlignPanel);
export { EdgelessAlignPanel };
//# sourceMappingURL=align-panel.js.map