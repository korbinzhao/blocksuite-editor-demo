import { html, nothing } from 'lit';
export var HandleDirection;
(function (HandleDirection) {
    HandleDirection["Left"] = "left";
    HandleDirection["Right"] = "right";
    HandleDirection["TopLeft"] = "top-left";
    HandleDirection["BottomLeft"] = "bottom-left";
    HandleDirection["TopRight"] = "top-right";
    HandleDirection["BottomRight"] = "bottom-right";
})(HandleDirection || (HandleDirection = {}));
function ResizeHandle(handleDirection, onPointerDown) {
    const handlerPointerDown = (e) => {
        e.stopPropagation();
        onPointerDown && onPointerDown(e, handleDirection);
    };
    return html `<div
    aria-label=${`handle-${handleDirection}`}
    @pointerdown=${handlerPointerDown}
  ></div>`;
}
export function ResizeHandles(resizeMode, onPointerDown) {
    switch (resizeMode) {
        case 'corner': {
            const handleTopLeft = ResizeHandle(HandleDirection.TopLeft, onPointerDown);
            const handleTopRight = ResizeHandle(HandleDirection.TopRight, onPointerDown);
            const handleBottomLeft = ResizeHandle(HandleDirection.BottomLeft, onPointerDown);
            const handleBottomRight = ResizeHandle(HandleDirection.BottomRight, onPointerDown);
            // prettier-ignore
            return html `
        ${handleTopLeft}
        ${handleTopRight}
        ${handleBottomLeft}
        ${handleBottomRight}
      `;
        }
        case 'edge': {
            const handleLeft = ResizeHandle(HandleDirection.Left, onPointerDown);
            const handleRight = ResizeHandle(HandleDirection.Right, onPointerDown);
            return html `${handleLeft} ${handleRight}`;
        }
        case 'none': {
            return nothing;
        }
    }
}
//# sourceMappingURL=resize-handles.js.map