var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { css, html, LitElement, nothing } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { tooltipStyle } from '../../../components/tooltip/tooltip.js';
let EdgelessToolIconButton = class EdgelessToolIconButton extends LitElement {
    constructor() {
        super();
        this.disabled = false;
        this.coming = false;
        this.tipPosition = 'top';
        this.active = false;
        this.activeMode = 'color';
        this.addEventListener('click', event => {
            if (this.disabled) {
                event.stopPropagation();
                event.preventDefault();
            }
        }, { capture: true });
    }
    render() {
        const tooltip = this.coming ? '(Coming soon)' : this.tooltip;
        const classnames = `icon-container has-tool-tip active-mode-${this.activeMode}`;
        return html `
      <div
        class=${classnames}
        role="button"
        ?disabled=${this.disabled}
        ?active=${this.active}
      >
        <slot></slot>
        ${tooltip
            ? html `<tool-tip
              inert
              role="tooltip"
              tip-position=${this.tipPosition}
              arrow
              >${tooltip}</tool-tip
            >`
            : nothing}
      </div>
    `;
    }
};
EdgelessToolIconButton.styles = css `
    .icon-container {
      position: relative;
      display: flex;
      align-items: center;
      padding: 4px;
      color: var(--affine-icon-color);
      margin: 8px;
      border-radius: 5px;
      cursor: pointer;
    }

    .icon-container:hover {
      background: var(--affine-hover-color);
    }

    .icon-container.active-mode-color[active] {
      color: var(--affine-primary-color);
    }

    .icon-container.active-mode-background[active] {
      background: var(--affine-hover-color);
    }

    .icon-container[disabled] {
      pointer-events: none;
      cursor: not-allowed;
    }

    .icon-container[coming] {
      cursor: not-allowed;
      color: var(--affine-text-disable-color);
    }

    ${tooltipStyle}

    tool-tip {
      z-index: 12;
    }
  `;
__decorate([
    property()
], EdgelessToolIconButton.prototype, "disabled", void 0);
__decorate([
    property()
], EdgelessToolIconButton.prototype, "coming", void 0);
__decorate([
    property()
], EdgelessToolIconButton.prototype, "tooltip", void 0);
__decorate([
    property()
], EdgelessToolIconButton.prototype, "tipPosition", void 0);
__decorate([
    property()
], EdgelessToolIconButton.prototype, "active", void 0);
__decorate([
    property()
], EdgelessToolIconButton.prototype, "activeMode", void 0);
EdgelessToolIconButton = __decorate([
    customElement('edgeless-tool-icon-button')
], EdgelessToolIconButton);
export { EdgelessToolIconButton };
//# sourceMappingURL=tool-icon-button.js.map