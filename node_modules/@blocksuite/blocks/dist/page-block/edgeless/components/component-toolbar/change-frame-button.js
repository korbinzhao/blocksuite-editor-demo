var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import '../tool-icon-button.js';
import '../../toolbar/shape-tool/shape-menu.js';
import '../color-panel.js';
import { FRAME_BACKGROUND_COLORS } from '@blocksuite/global/config';
import { WithDisposable } from '@blocksuite/lit';
import { css, html, LitElement } from 'lit';
import { customElement, property, query, state } from 'lit/decorators.js';
import { styleMap } from 'lit/directives/style-map.js';
import { countBy, maxBy } from '../../../../__internal__/utils/std.js';
import { createButtonPopper } from '../utils.js';
function getMostCommonBackground(frames) {
    const shapeTypes = countBy(frames, (frame) => {
        return frame.background;
    });
    const max = maxBy(Object.entries(shapeTypes), ([k, count]) => count);
    return max ? max[0] : null;
}
let EdgelessChangeFrameButton = class EdgelessChangeFrameButton extends WithDisposable(LitElement) {
    constructor() {
        super(...arguments);
        this.frames = [];
        this._popperShow = false;
        this._colorSelectorPopper = null;
    }
    _renderSelectedColor(color) {
        const style = { backgroundColor: `var(${color})` };
        return html `<div class="selected-background" style=${styleMap(style)}>
      A
    </div>`;
    }
    _setBlockBackground(color) {
        this.frames.forEach(frame => {
            this.page.updateBlock(frame, { background: color });
        });
        // FIXME: force update selection, because connector mode changed
        this.slots.selectionUpdated.emit({ ...this.selectionState });
    }
    firstUpdated(changedProperties) {
        const _disposables = this._disposables;
        this._colorSelectorPopper = createButtonPopper(this, this._colorSelector, ({ display }) => {
            this._popperShow = display === 'show';
        });
        _disposables.add(this._colorSelectorPopper);
        super.firstUpdated(changedProperties);
    }
    render() {
        const selectedBackground = getMostCommonBackground(this.frames) || FRAME_BACKGROUND_COLORS[0];
        return html `
      <edgeless-tool-icon-button
        .tooltip=${this._popperShow ? '' : 'Color'}
        .active=${false}
        @click=${() => this._colorSelectorPopper?.toggle()}
      >
        ${this._renderSelectedColor(selectedBackground)}
      </edgeless-tool-icon-button>
      <edgeless-color-panel
        .value=${selectedBackground}
        .options=${FRAME_BACKGROUND_COLORS}
        .showLetterMark=${true}
        @select=${(event) => {
            this._setBlockBackground(event.detail);
        }}
      ></edgeless-color-panel>
    `;
    }
};
EdgelessChangeFrameButton.styles = css `
    :host {
      display: block;
      color: var(--affine-text-primary-color);
      fill: currentColor;
    }

    edgeless-color-panel {
      display: none;
      width: 108px;
      height: 68px;
      padding: 8px 12px;
      flex-wrap: wrap;
      background: var(--affine-background-overlay-panel-color);
      box-shadow: var(--affine-shadow-2);
      border-radius: 8px;
    }

    edgeless-color-panel[data-show] {
      display: flex;
    }

    .selected-background {
      display: flex;
      align-items: center;
      justify-content: center;
      text-align: center;
      width: 16px;
      height: 16px;
      box-sizing: border-box;
      border-radius: 50%;
      color: var(--affine-text-primary-color);
      font-size: 12px;
    }
  `;
__decorate([
    property()
], EdgelessChangeFrameButton.prototype, "frames", void 0);
__decorate([
    property()
], EdgelessChangeFrameButton.prototype, "page", void 0);
__decorate([
    property()
], EdgelessChangeFrameButton.prototype, "selectionState", void 0);
__decorate([
    property()
], EdgelessChangeFrameButton.prototype, "slots", void 0);
__decorate([
    state()
], EdgelessChangeFrameButton.prototype, "_popperShow", void 0);
__decorate([
    query('edgeless-color-panel')
], EdgelessChangeFrameButton.prototype, "_colorSelector", void 0);
EdgelessChangeFrameButton = __decorate([
    customElement('edgeless-change-frame-button')
], EdgelessChangeFrameButton);
export { EdgelessChangeFrameButton };
//# sourceMappingURL=change-frame-button.js.map