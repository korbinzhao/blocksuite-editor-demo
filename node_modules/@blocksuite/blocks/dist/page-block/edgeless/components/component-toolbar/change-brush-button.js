var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import '../tool-icon-button.js';
import '../color-panel.js';
import { WithDisposable } from '@blocksuite/lit';
import { css, html, LitElement } from 'lit';
import { customElement, property, query, state } from 'lit/decorators.js';
import { styleMap } from 'lit/directives/style-map.js';
import { countBy, maxBy } from '../../../../__internal__/utils/std.js';
import { BrushSize } from '../../../../__internal__/utils/types.js';
import { DEFAULT_SELECTED_COLOR } from '../color-panel.js';
import { createButtonPopper } from '../utils.js';
function getMostCommonColor(elements) {
    const shapeTypes = countBy(elements, (ele) => ele.color);
    const max = maxBy(Object.entries(shapeTypes), ([k, count]) => count);
    return max ? max[0] : null;
}
function getMostCommonSize(elements) {
    const shapeTypes = countBy(elements, (ele) => ele.lineWidth);
    const max = maxBy(Object.entries(shapeTypes), ([k, count]) => count);
    return max ? Number(max[0]) : null;
}
let EdgelessChangeBrushButton = class EdgelessChangeBrushButton extends WithDisposable(LitElement) {
    constructor() {
        super(...arguments);
        this.elements = [];
        this._popperShow = false;
        this._colorPanelPopper = null;
    }
    _setBrushSize(size) {
        this.page.captureSync();
        this.elements.forEach(element => {
            if (element.lineWidth !== size) {
                this.surface.updateElement(element.id, { lineWidth: size });
            }
        });
        // FIXME: force update selection, because brush size changed
        this.slots.selectionUpdated.emit({ ...this.selectionState });
    }
    _setBrushColor(color) {
        this.page.captureSync();
        this.elements.forEach(element => {
            if (element.color !== color) {
                this.surface.updateElement(element.id, { color });
            }
        });
    }
    firstUpdated(changedProperties) {
        const _disposables = this._disposables;
        this._colorPanelPopper = createButtonPopper(this, this._colorPanel, ({ display }) => {
            this._popperShow = display === 'show';
        });
        _disposables.add(this._colorPanelPopper);
        super.firstUpdated(changedProperties);
    }
    render() {
        const selectedColor = getMostCommonColor(this.elements) ?? DEFAULT_SELECTED_COLOR;
        const style = {
            backgroundColor: `var(${selectedColor})`,
        };
        const selectedSize = getMostCommonSize(this.elements);
        return html `
      <edgeless-tool-icon-button
        .tooltip=${'Thin'}
        @click=${() => this._setBrushSize(BrushSize.Thin)}
      >
        <div
          class="brush-size-button"
          ?active=${selectedSize === BrushSize.Thin}
        >
          <div class="thin"></div>
        </div>
      </edgeless-tool-icon-button>
      <edgeless-tool-icon-button
        .tooltip=${'Thick'}
        @click=${() => this._setBrushSize(BrushSize.Thick)}
      >
        <div
          class="brush-size-button"
          ?active=${selectedSize === BrushSize.Thick}
        >
          <div class="thick"></div>
        </div>
      </edgeless-tool-icon-button>
      <menu-divider .vertical=${true}></menu-divider>
      <edgeless-tool-icon-button
        .tooltip=${this._popperShow ? '' : 'Color'}
        .active=${false}
        @click=${() => this._colorPanelPopper?.toggle()}
      >
        <div class="brush-size-button">
          <div class="thick" style=${styleMap(style)}></div>
        </div>
      </edgeless-tool-icon-button>
      <div class="color-panel-container">
        <edgeless-color-panel
          .value=${selectedColor}
          @select=${(e) => this._setBrushColor(e.detail)}
        >
        </edgeless-color-panel>
      </div>
    `;
    }
};
EdgelessChangeBrushButton.styles = css `
    :host {
      display: flex;
      flex-direction: row;
      align-items: center;
      justify-content: center;
      color: var(--affine-text-primary-color);
      fill: currentColor;
    }

    menu-divider {
      height: 24px;
    }

    .color-panel-container {
      display: none;
      padding: 4px;
      justify-content: center;
      align-items: center;
      background: var(--affine-background-overlay-panel-color);
      box-shadow: var(--affine-shadow-2);
      border-radius: 8px;
    }

    .color-panel-container[data-show] {
      display: block;
    }

    .brush-size-button {
      display: flex;
      justify-content: center;
      align-items: center;
      width: 24px;
      height: 24px;
      box-sizing: border-box;
      border-radius: 4px;
      cursor: pointer;
    }

    .brush-size-button div {
      border-radius: 50%;
      background-color: var(--affine-icon-color);
    }

    .brush-size-button[active] div {
      background-color: var(--affine-blue);
    }

    .brush-size-button .thin {
      width: 4px;
      height: 4px;
    }

    .brush-size-button .thick {
      width: 10px;
      height: 10px;
    }
  `;
__decorate([
    property()
], EdgelessChangeBrushButton.prototype, "elements", void 0);
__decorate([
    property({ type: Object })
], EdgelessChangeBrushButton.prototype, "selectionState", void 0);
__decorate([
    property()
], EdgelessChangeBrushButton.prototype, "page", void 0);
__decorate([
    property()
], EdgelessChangeBrushButton.prototype, "surface", void 0);
__decorate([
    property()
], EdgelessChangeBrushButton.prototype, "slots", void 0);
__decorate([
    state()
], EdgelessChangeBrushButton.prototype, "_popperShow", void 0);
__decorate([
    query('.color-panel-container')
], EdgelessChangeBrushButton.prototype, "_colorPanel", void 0);
EdgelessChangeBrushButton = __decorate([
    customElement('edgeless-change-brush-button')
], EdgelessChangeBrushButton);
export { EdgelessChangeBrushButton };
//# sourceMappingURL=change-brush-button.js.map