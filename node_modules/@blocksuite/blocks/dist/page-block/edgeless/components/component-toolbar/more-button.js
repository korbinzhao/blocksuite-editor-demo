var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import '../tool-icon-button.js';
import '../../toolbar/shape-tool/shape-menu.js';
import { MoreHorizontalIcon } from '@blocksuite/global/config';
import { WithDisposable } from '@blocksuite/lit';
import { css, html, LitElement } from 'lit';
import { customElement, property, query, state } from 'lit/decorators.js';
import { repeat } from 'lit/directives/repeat.js';
import {} from '../../../../__internal__/index.js';
import { isTopLevelBlock } from '../../utils.js';
import { createButtonPopper } from '../utils.js';
const ACTIONS = [
    // FIXME: should implement these function
    // { name: 'Copy', type: 'copy', disabled: true },
    // { name: 'Paste', type: 'paste', disabled: true },
    // { name: 'Duplicate', type: 'duplicate', disabled: true },
    { name: 'Bring to front', type: 'front' },
    { name: 'Bring forward', type: 'forward' },
    { name: 'Send backward', type: 'backward' },
    { name: 'Send to back', type: 'back' },
    // { name: 'Copy as PNG', type: 'copy as PNG', disabled: true },
    { name: 'Delete', type: 'delete' },
];
function Actions(onClick) {
    return repeat(ACTIONS, action => action.type, action => html `<div
        class="action-item"
        @click=${() => onClick(action)}
        ?data-disabled=${action.disabled}
      >
        ${action.name}
      </div>`);
}
let EdgelessMoreButton = class EdgelessMoreButton extends WithDisposable(LitElement) {
    constructor() {
        super(...arguments);
        this.elements = [];
        this._popperShow = false;
        this._actionsMenuPopper = null;
        this._runAction = ({ type }) => {
            switch (type) {
                case 'delete':
                    this._delete();
                    break;
                case 'front':
                case 'forward':
                case 'backward':
                case 'back': {
                    const { frames, shapes } = this._splitElements();
                    if (frames.length) {
                        this.slots.reorderingFramesUpdated.emit({
                            elements: frames,
                            type,
                        });
                    }
                    if (shapes.length) {
                        this.slots.reorderingShapesUpdated.emit({
                            elements: shapes,
                            type,
                        });
                    }
                    break;
                }
            }
            this._actionsMenuPopper?.hide();
        };
    }
    _splitElements() {
        const frames = [];
        const shapes = [];
        this.elements.forEach(element => {
            if (isTopLevelBlock(element)) {
                frames.push(element);
            }
            else {
                shapes.push(element);
            }
        });
        return {
            frames,
            shapes,
        };
    }
    _delete() {
        this.page.captureSync();
        this.elements.forEach(element => {
            if (isTopLevelBlock(element)) {
                const children = this.page.root?.children ?? [];
                if (children.length > 1) {
                    this.page.deleteBlock(element);
                }
            }
            else {
                this.surface.removeElement(element.id);
            }
        });
        this.slots.selectionUpdated.emit({ selected: [], active: false });
    }
    firstUpdated(changedProperties) {
        const _disposables = this._disposables;
        this._actionsMenuPopper = createButtonPopper(this, this._actionsMenu, ({ display }) => {
            this._popperShow = display === 'show';
        });
        _disposables.add(this._actionsMenuPopper);
        super.firstUpdated(changedProperties);
    }
    render() {
        const actions = Actions(this._runAction);
        return html `
      <edgeless-tool-icon-button
        .tooltip=${this._popperShow ? '' : 'More'}
        .active=${false}
        @click=${() => this._actionsMenuPopper?.toggle()}
      >
        ${MoreHorizontalIcon}
      </edgeless-tool-icon-button>
      <div class="more-actions-container">${actions}</div>
    `;
    }
};
EdgelessMoreButton.styles = css `
    :host {
      display: block;
      color: var(--affine-text-primary-color);
      fill: currentColor;
    }

    .more-actions-container {
      display: none;
      width: 158px;
      padding: 8px 4px;
      justify-content: center;
      align-items: center;
      background: var(--affine-background-overlay-panel-color);
      box-shadow: var(--affine-shadow-2);
      border-radius: 8px;
      font-size: 16px;
      line-height: 22px;
    }

    .more-actions-container[data-show] {
      display: block;
    }

    .action-item {
      width: 100%;
      height: 32px;
      box-sizing: border-box;
      padding: 5px 12px;
      border-radius: 5px;
      overflow: hidden;
      text-overflow: ellipsis;
      cursor: pointer;
    }

    .action-item:hover {
      background-color: var(--affine-hover-color);
    }

    .action-item[data-disabled] {
      cursor: not-allowed;
    }
  `;
__decorate([
    property()
], EdgelessMoreButton.prototype, "elements", void 0);
__decorate([
    property()
], EdgelessMoreButton.prototype, "page", void 0);
__decorate([
    property()
], EdgelessMoreButton.prototype, "surface", void 0);
__decorate([
    property()
], EdgelessMoreButton.prototype, "slots", void 0);
__decorate([
    state()
], EdgelessMoreButton.prototype, "_popperShow", void 0);
__decorate([
    query('.more-actions-container')
], EdgelessMoreButton.prototype, "_actionsMenu", void 0);
EdgelessMoreButton = __decorate([
    customElement('edgeless-more-button')
], EdgelessMoreButton);
export { EdgelessMoreButton };
//# sourceMappingURL=more-button.js.map