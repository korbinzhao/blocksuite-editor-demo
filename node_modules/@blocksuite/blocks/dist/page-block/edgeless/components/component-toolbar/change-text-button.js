var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import '../align-panel.js';
import { AlighLeftIcon, AlignCenterIcon, AlignRightIcon, } from '@blocksuite/global/config';
import { WithDisposable } from '@blocksuite/lit';
import { css, html, LitElement } from 'lit';
import { customElement, property, query, state } from 'lit/decorators.js';
import { countBy, maxBy } from '../../../../__internal__/utils/std.js';
import { ColorUnit } from '../color-panel.js';
import { createButtonPopper } from '../utils.js';
function getMostCommonColor(texts) {
    const colors = countBy(texts, (text) => text.color);
    const max = maxBy(Object.entries(colors), ([k, count]) => count);
    return max ? max[0] : null;
}
function getMostCommonAlign(texts) {
    const aligns = countBy(texts, (text) => text.textAlign);
    const max = maxBy(Object.entries(aligns), ([k, count]) => count);
    return max ? max[0] : 'left';
}
const TEXT_COLORS = [
    '--affine-palette-line-yellow',
    '--affine-palette-line-orange',
    '--affine-palette-line-tangerine',
    '--affine-palette-line-red',
    '--affine-palette-line-magenta',
    '--affine-palette-line-purple',
    '--affine-palette-line-navy',
    '--affine-palette-line-blue',
    '--affine-palette-line-green',
    '--affine-palette-line-white',
    '--affine-palette-line-black',
    '--affine-palette-line-grey',
];
export const DEFAULT_TEXT_COLOR = TEXT_COLORS[10];
let EdgelessChangeTextButton = class EdgelessChangeTextButton extends WithDisposable(LitElement) {
    constructor() {
        super(...arguments);
        this.texts = [];
        this._popperShow = false;
        this._colorSelectorPopper = null;
        this._textAlignPopper = null;
    }
    _setTextColor(color) {
        this.texts.forEach(text => {
            this.surface.updateElement(text.id, {
                color,
            });
        });
        this.slots.selectionUpdated.emit({ ...this.selectionState });
    }
    _setTextAlign(align) {
        this.texts.forEach(text => {
            this.surface.updateElement(text.id, {
                textAlign: align,
            });
        });
        this.slots.selectionUpdated.emit({ ...this.selectionState });
    }
    firstUpdated(changedProperties) {
        const _disposables = this._disposables;
        this._colorSelectorPopper = createButtonPopper(this._textColorButton, this._textColorMenu, ({ display }) => {
            this._popperShow = display === 'show';
        });
        _disposables.add(this._colorSelectorPopper);
        this._textAlignPopper = createButtonPopper(this._textAlignButton, this._textAlignMenu, ({ display }) => {
            this._popperShow = display === 'show';
        });
        _disposables.add(this._textAlignPopper);
        super.firstUpdated(changedProperties);
    }
    render() {
        const selectedColor = getMostCommonColor(this.texts) ?? TEXT_COLORS[0];
        const selectedAlign = getMostCommonAlign(this.texts);
        return html `
      <edgeless-tool-icon-button
        class="text-color-button"
        .tooltip=${this._popperShow ? '' : 'Text Color'}
        .tipPosition=${'bottom'}
        .active=${false}
        @click=${() => this._colorSelectorPopper?.toggle()}
      >
        ${ColorUnit(selectedColor)}
      </edgeless-tool-icon-button>
      <div class="color-panel-container text-color">
        <edgeless-color-panel
          .value=${selectedColor}
          .options=${TEXT_COLORS}
          @select=${(event) => {
            this._setTextColor(event.detail);
        }}
        ></edgeless-color-panel>
      </div>

      <menu-divider .vertical=${true}></menu-divider>

      <edgeless-tool-icon-button
        class="text-align-button"
        .tooltip=${this._popperShow ? '' : 'Alignment'}
        .tipPosition=${'bottom'}
        .active=${false}
        @click=${() => this._textAlignPopper?.toggle()}
      >
        ${selectedAlign === 'left'
            ? AlighLeftIcon
            : selectedAlign === 'center'
                ? AlignCenterIcon
                : AlignRightIcon}
      </edgeless-tool-icon-button>
      <div class="align-panel-container text-align">
        <edgeless-align-panel
          .value=${selectedAlign}
          .onSelect=${(value) => {
            this._setTextAlign(value);
        }}
        ></edgeless-align-panel>
      </div>
    `;
    }
};
EdgelessChangeTextButton.styles = css `
    :host {
      display: flex;
      flex-direction: row;
      align-items: center;
      justify-content: center;
      color: var(--affine-text-primary-color);
      stroke: none;
      fill: currentColor;
    }

    .color-panel-container,
    .align-panel-container {
      display: none;
      padding: 4px;
      justify-content: center;
      align-items: center;
      background: var(--affine-background-overlay-panel-color);
      box-shadow: var(--affine-shadow-2);
      border-radius: 8px;
    }

    .color-panel-container[data-show],
    .align-panel-container[data-show] {
      display: block;
    }
  `;
__decorate([
    property()
], EdgelessChangeTextButton.prototype, "texts", void 0);
__decorate([
    property()
], EdgelessChangeTextButton.prototype, "page", void 0);
__decorate([
    property()
], EdgelessChangeTextButton.prototype, "surface", void 0);
__decorate([
    property()
], EdgelessChangeTextButton.prototype, "selectionState", void 0);
__decorate([
    property()
], EdgelessChangeTextButton.prototype, "slots", void 0);
__decorate([
    state()
], EdgelessChangeTextButton.prototype, "_popperShow", void 0);
__decorate([
    query('.text-color-button')
], EdgelessChangeTextButton.prototype, "_textColorButton", void 0);
__decorate([
    query('.color-panel-container.text-color')
], EdgelessChangeTextButton.prototype, "_textColorMenu", void 0);
__decorate([
    query('.text-align-button')
], EdgelessChangeTextButton.prototype, "_textAlignButton", void 0);
__decorate([
    query('.align-panel-container.text-align')
], EdgelessChangeTextButton.prototype, "_textAlignMenu", void 0);
EdgelessChangeTextButton = __decorate([
    customElement('edgeless-change-text-button')
], EdgelessChangeTextButton);
export { EdgelessChangeTextButton };
//# sourceMappingURL=change-text-button.js.map