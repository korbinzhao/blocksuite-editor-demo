import { Bound, getCommonBound } from '@blocksuite/phasor';
import { createPopper } from '@popperjs/core';
import { html } from 'lit';
import { getSelectionBoxBound, getXYWH, isTopLevelBlock } from '../utils.js';
export function getCommonRectStyle(rect, active = false, selected = false) {
    return {
        '--affine-border-width': `${active ? 2 : 1}px`,
        left: rect.x + 'px',
        top: rect.y + 'px',
        width: rect.width + 'px',
        height: rect.height + 'px',
        backgroundColor: !active && selected ? 'var(--affine-hover-color)' : '',
    };
}
export function getSelectedRect(selected, viewport) {
    if (selected.length === 0) {
        return new DOMRect(0, 0, 0, 0);
    }
    const rects = selected.map(selectable => {
        const { x, y, width, height } = getSelectionBoxBound(viewport, getXYWH(selectable));
        return {
            x,
            y,
            w: width,
            h: height,
        };
    });
    const commonBound = getCommonBound(rects);
    return new DOMRect(commonBound?.x, commonBound?.y, commonBound?.w, commonBound?.h);
}
export function getSelectableBounds(selected) {
    const bounds = new Map();
    for (const s of selected) {
        let bound;
        if (isTopLevelBlock(s)) {
            bound = Bound.deserialize(getXYWH(s));
        }
        else {
            bound = new Bound(s.x, s.y, s.w, s.h);
        }
        bounds.set(s.id, bound);
    }
    return bounds;
}
export function listenClickAway(element, onClickAway) {
    const callback = (event) => {
        const inside = event.composedPath().includes(element);
        if (!inside) {
            onClickAway();
        }
    };
    document.addEventListener('click', callback);
    return {
        dispose: () => {
            document.removeEventListener('click', callback);
        },
    };
}
const ATTR_SHOW = 'data-show';
/**
 * Using attribute 'data-show' to control popper visibility.
 *
 * ```css
 * selector {
 *   display: none;
 * }
 * selector[data-show] {
 *   display: block;
 * }
 * ```
 */
export function createButtonPopper(reference, popperElement, stateUpdated = () => {
    /** DEFAULT EMPTY FUNCTION */
}) {
    const popper = createPopper(reference, popperElement, {
        placement: 'top',
        modifiers: [
            {
                name: 'offset',
                options: {
                    offset: [0, 12],
                },
            },
        ],
    });
    const show = () => {
        popperElement.setAttribute(ATTR_SHOW, '');
        popper.setOptions(options => ({
            ...options,
            modifiers: [
                ...(options.modifiers ?? []),
                { name: 'eventListeners', enabled: false },
            ],
        }));
        popper.update();
        stateUpdated({ display: 'show' });
    };
    const hide = () => {
        popperElement.removeAttribute(ATTR_SHOW);
        popper.setOptions(options => ({
            ...options,
            modifiers: [
                ...(options.modifiers ?? []),
                { name: 'eventListeners', enabled: false },
            ],
        }));
        stateUpdated({ display: 'hidden' });
    };
    const toggle = () => {
        if (popperElement.hasAttribute(ATTR_SHOW)) {
            hide();
        }
        else {
            show();
        }
    };
    const clickAway = listenClickAway(reference, () => hide());
    return {
        popper,
        show,
        hide,
        toggle,
        dispose: () => {
            popper.destroy();
            clickAway.dispose();
        },
    };
}
export function getTooltipWithShortcut(tip, shortcut) {
    return html `<span>${tip}</span
    ><span style="margin-left: 10px;">(${shortcut})</span>`;
}
//# sourceMappingURL=utils.js.map