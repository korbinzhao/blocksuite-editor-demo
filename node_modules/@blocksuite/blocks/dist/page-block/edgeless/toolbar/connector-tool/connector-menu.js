var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import '../../components/color-panel.js';
import '../../components/tool-icon-button.js';
import { ConnectorLIcon, ConnectorXIcon } from '@blocksuite/global/config';
import { ConnectorMode } from '@blocksuite/phasor';
import { css, html, LitElement, nothing } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { tooltipStyle } from '../../../../components/tooltip/tooltip.js';
import { getTooltipWithShortcut } from '../../components/utils.js';
function ConnectorModeButtonGroup(mouseMode, setConnectorMode) {
    if (mouseMode.type !== 'connector')
        return nothing;
    const { mode } = mouseMode;
    const straightLineTooltip = getTooltipWithShortcut('Straight line', 'L');
    const orthogonalTooltip = getTooltipWithShortcut('Connector', 'X');
    /**
     * There is little hacky on rendering tooltip.
     * We don't want either tooltip overlap the top button or tooltip on left.
     * So we put the lower button's tooltip as the first element of the button group container
     */
    return html `
    <div class="connector-mode-button-group has-tool-tip">
      <!-- This tooltip is for the last button(Thick) -->
      <tool-tip inert role="tooltip" tip-position="top" arrow>
        ${orthogonalTooltip}
      </tool-tip>

      <div
        class="connector-mode-button has-tool-tip"
        ?active=${mode === ConnectorMode.Straight}
        @click=${() => setConnectorMode(ConnectorMode.Straight)}
      >
        ${ConnectorLIcon}
        <tool-tip inert role="tooltip" tip-position="top" arrow>
          ${straightLineTooltip}
        </tool-tip>
      </div>

      <div
        class="connector-mode-button"
        ?active=${mode === ConnectorMode.Orthogonal}
        @click=${() => setConnectorMode(ConnectorMode.Orthogonal)}
      >
        ${ConnectorXIcon}
      </div>
    </div>
  `;
}
let EdgelessConnectorMenu = class EdgelessConnectorMenu extends LitElement {
    constructor() {
        super(...arguments);
        this._setConnectorColor = (color) => {
            if (this.mouseMode.type !== 'connector')
                return;
            const { mode } = this.mouseMode;
            this.edgeless.slots.mouseModeUpdated.emit({
                type: 'connector',
                color,
                mode,
            });
        };
        this._setConnectorMode = (mode) => {
            if (this.mouseMode.type !== 'connector')
                return;
            const { color } = this.mouseMode;
            this.edgeless.slots.mouseModeUpdated.emit({
                type: 'connector',
                color,
                mode,
            });
        };
    }
    render() {
        if (this.mouseMode.type !== 'connector')
            return nothing;
        const { color } = this.mouseMode;
        const brushSizeButtonGroup = ConnectorModeButtonGroup(this.mouseMode, this._setConnectorMode);
        return html `
      <div class="container">
        ${brushSizeButtonGroup}
        <menu-divider .vertical=${true}></menu-divider>
        <edgeless-color-panel
          .value=${color}
          @select=${(e) => this._setConnectorColor(e.detail)}
        ></edgeless-color-panel>
      </div>
    `;
    }
};
EdgelessConnectorMenu.styles = css `
    :host {
      width: 260px;
      z-index: 1;
    }
    .container {
      display: flex;
      padding: 4px;
      justify-content: center;
      align-items: center;
      background: var(--affine-background-overlay-panel-color);
      box-shadow: var(--affine-shadow-2);
      border-radius: 8px;
    }

    .connector-mode-button-group {
      display: flex;
      flex-direction: column;
    }

    .connector-mode-button {
      display: flex;
      justify-content: center;
      align-items: center;
      width: 32px;
      height: 32px;
      box-sizing: border-box;
      border-radius: 4px;
      cursor: pointer;
    }

    .connector-mode-button[active],
    .connector-mode-button:hover {
      background-color: var(--affine-hover-color);
    }

    .connector-mode-button div {
      border-radius: 50%;
      background-color: var(--affine-icon-color);
    }

    menu-divider {
      height: 62px;
    }

    ${tooltipStyle}
  `;
__decorate([
    property()
], EdgelessConnectorMenu.prototype, "mouseMode", void 0);
__decorate([
    property()
], EdgelessConnectorMenu.prototype, "edgeless", void 0);
EdgelessConnectorMenu = __decorate([
    customElement('edgeless-connector-menu')
], EdgelessConnectorMenu);
export { EdgelessConnectorMenu };
//# sourceMappingURL=connector-menu.js.map