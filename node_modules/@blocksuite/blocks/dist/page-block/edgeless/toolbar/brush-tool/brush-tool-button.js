var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import '../../components/tool-icon-button.js';
import './brush-menu.js';
import { PenIcon } from '@blocksuite/global/config';
import { assertExists } from '@blocksuite/store';
import { createPopper } from '@popperjs/core';
import { css, html, LitElement } from 'lit';
import { customElement, property, state } from 'lit/decorators.js';
import { DEFAULT_SELECTED_COLOR } from '../../components/color-panel.js';
import { getTooltipWithShortcut } from '../../components/utils.js';
function createBrushMenuPopper(reference) {
    const brushMenu = document.createElement('edgeless-brush-menu');
    assertExists(reference.shadowRoot);
    reference.shadowRoot.appendChild(brushMenu);
    const popper = createPopper(reference, brushMenu, {
        placement: 'top',
        modifiers: [
            {
                name: 'offset',
                options: {
                    offset: [0, 12],
                },
            },
        ],
    });
    return {
        element: brushMenu,
        dispose: () => {
            brushMenu.remove();
            popper.destroy();
        },
    };
}
let EdgelessBrushToolButton = class EdgelessBrushToolButton extends LitElement {
    constructor() {
        super(...arguments);
        this._popperShow = false;
        this._brushMenu = null;
    }
    _toggleBrushMenu() {
        if (this._brushMenu) {
            this._brushMenu.dispose();
            this._brushMenu = null;
            this._popperShow = false;
        }
        else {
            this._brushMenu = createBrushMenuPopper(this);
            this._brushMenu.element.mouseMode = this.mouseMode;
            this._brushMenu.element.edgeless = this.edgeless;
            this._popperShow = true;
        }
    }
    updated(changedProperties) {
        if (changedProperties.has('mouseMode')) {
            if (this.mouseMode.type !== 'brush') {
                this._brushMenu?.dispose();
                this._brushMenu = null;
            }
            if (this._brushMenu) {
                this._brushMenu.element.mouseMode = this.mouseMode;
                this._brushMenu.element.edgeless = this.edgeless;
            }
        }
    }
    disconnectedCallback() {
        this._brushMenu?.dispose();
        this._brushMenu = null;
        super.disconnectedCallback();
    }
    render() {
        const type = this.mouseMode?.type;
        return html `
      <edgeless-tool-icon-button
        .tooltip=${this._popperShow ? '' : getTooltipWithShortcut('Pen', 'P')}
        .active=${type === 'brush'}
        @click=${() => {
            this.setMouseMode({
                type: 'brush',
                lineWidth: 4,
                color: DEFAULT_SELECTED_COLOR,
            });
            this._toggleBrushMenu();
        }}
      >
        ${PenIcon}
      </edgeless-tool-icon-button>
    `;
    }
};
EdgelessBrushToolButton.styles = css `
    :host {
      display: flex;
    }
  `;
__decorate([
    property()
], EdgelessBrushToolButton.prototype, "mouseMode", void 0);
__decorate([
    property()
], EdgelessBrushToolButton.prototype, "edgeless", void 0);
__decorate([
    property()
], EdgelessBrushToolButton.prototype, "setMouseMode", void 0);
__decorate([
    state()
], EdgelessBrushToolButton.prototype, "_popperShow", void 0);
EdgelessBrushToolButton = __decorate([
    customElement('edgeless-brush-tool-button')
], EdgelessBrushToolButton);
export { EdgelessBrushToolButton };
//# sourceMappingURL=brush-tool-button.js.map