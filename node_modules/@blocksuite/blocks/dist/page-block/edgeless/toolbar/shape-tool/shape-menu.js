var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import '../../components/tool-icon-button.js';
import { Slot } from '@blocksuite/store';
import { css, html, LitElement } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { ShapeComponentConfig } from './shape-menu-config.js';
let EdgelessShapeMenu = class EdgelessShapeMenu extends LitElement {
    constructor() {
        super(...arguments);
        this.slots = {
            select: new Slot(),
        };
    }
    _onSelect(value) {
        this.selectedShape = value;
        this.slots.select.emit(value);
    }
    disconnectedCallback() {
        this.slots.select.dispose();
        super.disconnectedCallback();
    }
    render() {
        return html `
      <div class="shape-menu-container">
        ${ShapeComponentConfig.map(({ name, icon, tooltip, disabled }) => {
            return html `
            <edgeless-tool-icon-button
              .disabled=${disabled}
              .tooltip=${tooltip}
              .active=${this.selectedShape === name}
              @click=${() => {
                if (disabled)
                    return;
                this._onSelect(name);
            }}
            >
              ${icon}
            </edgeless-tool-icon-button>
          `;
        })}
      </div>
    `;
    }
};
EdgelessShapeMenu.styles = css `
    :host {
      display: block;
      z-index: 2;
    }
    .shape-menu-container {
      display: flex;
      align-items: center;
      width: 240px;
      height: 48px;
      background: var(--affine-background-overlay-panel-color);
      box-shadow: var(--affine-shadow-2);
      border-radius: 8px;
      fill: none;
      stroke: currentColor;
    }
  `;
__decorate([
    property()
], EdgelessShapeMenu.prototype, "selectedShape", void 0);
EdgelessShapeMenu = __decorate([
    customElement('edgeless-shape-menu')
], EdgelessShapeMenu);
export { EdgelessShapeMenu };
//# sourceMappingURL=shape-menu.js.map