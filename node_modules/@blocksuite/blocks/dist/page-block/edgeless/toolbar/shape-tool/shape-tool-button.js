var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import '../../components/tool-icon-button.js';
import './shape-menu.js';
import { ShapeIcon } from '@blocksuite/global/config';
import { WithDisposable } from '@blocksuite/lit';
import { css, html, LitElement } from 'lit';
import { customElement, property, query, state } from 'lit/decorators.js';
import { DEFAULT_SHAPE_FILL_COLOR, DEFAULT_SHAPE_STROKE_COLOR, } from '../../components/component-toolbar/change-shape-button.js';
import { createButtonPopper } from '../../components/utils.js';
import { getTooltipWithShortcut } from '../../components/utils.js';
let EdgelessShapeToolButton = class EdgelessShapeToolButton extends WithDisposable(LitElement) {
    constructor() {
        super(...arguments);
        this._popperShow = false;
        this._shapeMenuPopper = null;
    }
    _toggleShapeMenu() {
        this._shapeMenuPopper?.toggle();
    }
    firstUpdated(changedProperties) {
        const _disposables = this._disposables;
        this._shapeMenuPopper = createButtonPopper(this, this._shapeMenu, ({ display }) => {
            this._popperShow = display === 'show';
        });
        _disposables.add(this._shapeMenuPopper);
        _disposables.add(this._shapeMenu.slots.select.on(shape => {
            this.setMouseMode({
                type: 'shape',
                shape,
                fillColor: DEFAULT_SHAPE_FILL_COLOR,
                strokeColor: DEFAULT_SHAPE_STROKE_COLOR,
            });
        }));
        super.firstUpdated(changedProperties);
    }
    disconnectedCallback() {
        this._disposables?.dispose();
        super.disconnectedCallback();
    }
    render() {
        const type = this.mouseMode?.type;
        const selectedShape = type === 'shape' ? this.mouseMode.shape : undefined;
        return html `
      <edgeless-tool-icon-button
        .tooltip=${this._popperShow ? '' : getTooltipWithShortcut('Shape', 'S')}
        .active=${type === 'shape'}
        @click=${() => {
            this.setMouseMode({
                type: 'shape',
                shape: 'rect',
                fillColor: DEFAULT_SHAPE_FILL_COLOR,
                strokeColor: DEFAULT_SHAPE_STROKE_COLOR,
            });
            this._toggleShapeMenu();
        }}
      >
        ${ShapeIcon}
      </edgeless-tool-icon-button>
      <edgeless-shape-menu .selectedShape=${selectedShape}>
      </edgeless-shape-menu>
    `;
    }
};
EdgelessShapeToolButton.styles = css `
    :host {
      display: flex;
    }

    edgeless-shape-menu {
      display: none;
    }

    edgeless-shape-menu[data-show] {
      display: block;
    }
  `;
__decorate([
    property()
], EdgelessShapeToolButton.prototype, "mouseMode", void 0);
__decorate([
    property()
], EdgelessShapeToolButton.prototype, "edgeless", void 0);
__decorate([
    property()
], EdgelessShapeToolButton.prototype, "setMouseMode", void 0);
__decorate([
    state()
], EdgelessShapeToolButton.prototype, "_popperShow", void 0);
__decorate([
    query('edgeless-shape-menu')
], EdgelessShapeToolButton.prototype, "_shapeMenu", void 0);
EdgelessShapeToolButton = __decorate([
    customElement('edgeless-shape-tool-button')
], EdgelessShapeToolButton);
export { EdgelessShapeToolButton };
//# sourceMappingURL=shape-tool-button.js.map