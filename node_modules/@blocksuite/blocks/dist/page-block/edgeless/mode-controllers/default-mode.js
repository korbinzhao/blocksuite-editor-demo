import { assertExists, caretRangeFromPoint } from '@blocksuite/global/utils';
import { Bound, ConnectorElement, deserializeXYWH, getCommonBound, isPointIn, TextElement, } from '@blocksuite/phasor';
import { getBlockElementByModel, getClosestBlockElementByPoint, getModelByBlockElement, getRectByBlockElement, handleNativeRangeAtPoint, handleNativeRangeDragMove, isEmpty, noop, Point, Rect, resetNativeSelection, } from '../../../__internal__/index.js';
import { showFormatQuickBar } from '../../../components/format-quick-bar/index.js';
import { showFormatQuickBarByClicks } from '../../index.js';
import { calcCurrentSelectionPosition, getNativeSelectionMouseDragInfo, } from '../../utils/position.js';
import { addText, getXYWH, handleElementChangedEffectForConnector, isConnectorAndBindingsAllSelected, isPhasorElement, isTopLevelBlock, mountTextEditor, pickBlocksByBound, pickTopBlock, } from '../utils.js';
import { MouseModeController } from './index.js';
export var DefaultModeDragType;
(function (DefaultModeDragType) {
    /** Moving selected contents */
    DefaultModeDragType["ContentMoving"] = "content-moving";
    /** Expanding the dragging area, select the content covered inside */
    DefaultModeDragType["Selecting"] = "selecting";
    /** Native range dragging inside active frame block */
    DefaultModeDragType["NativeEditing"] = "native-editing";
    /** Default void state */
    DefaultModeDragType["None"] = "none";
    /** Dragging preview */
    DefaultModeDragType["PreviewDragging"] = "preview-dragging";
    /** press alt/option key to clone selected  */
    DefaultModeDragType["AltCloning"] = "alt-cloning";
})(DefaultModeDragType || (DefaultModeDragType = {}));
export class DefaultModeController extends MouseModeController {
    constructor() {
        super(...arguments);
        this.mouseMode = {
            type: 'default',
        };
        this.enableHover = true;
        this.dragType = DefaultModeDragType.None;
        this._startRange = null;
        this._dragStartPos = { x: 0, y: 0 };
        this._dragLastPos = { x: 0, y: 0 };
        this._lock = false;
        // Do not select the text, when click again after activating the frame.
        this._isDoubleClickedOnMask = false;
    }
    get draggingArea() {
        if (this.dragType === DefaultModeDragType.Selecting) {
            return {
                start: new DOMPoint(this._dragStartPos.x, this._dragStartPos.y),
                end: new DOMPoint(this._dragLastPos.x, this._dragLastPos.y),
            };
        }
        return null;
    }
    get selectedBlocks() {
        return this._edgeless.selection.selectedBlocks;
    }
    get state() {
        return this._edgeless.selection.state;
    }
    get isActive() {
        return this._edgeless.selection.state.active;
    }
    _pick(x, y) {
        const { surface } = this._edgeless;
        const [modelX, modelY] = surface.viewport.toModelCoord(x, y);
        const selectedShape = surface.pickTop(modelX, modelY);
        return selectedShape
            ? selectedShape
            : pickTopBlock(this._blocks, modelX, modelY);
    }
    _setNoneSelectionState() {
        this._edgeless.slots.selectionUpdated.emit({ selected: [], active: false });
        resetNativeSelection(null);
    }
    _setSelectionState(selected, active) {
        this._edgeless.slots.selectionUpdated.emit({
            selected,
            active,
        });
    }
    _handleClickOnSelected(element, e) {
        const { selected, active } = this.state;
        this._edgeless.clearSelectedBlocks();
        // click the inner area of active text and note element
        if (active && selected.length === 1 && selected[0] === element) {
            handleNativeRangeAtPoint(e.raw.clientX, e.raw.clientY);
            return;
        }
        // handle single frame block click
        if (!e.keys.shift && selected.length === 1 && isTopLevelBlock(element)) {
            if ((selected[0] === element && !active) ||
                (active && selected[0] !== element)) {
                // issue #1809
                // If the previously selected element is a frameBlock and is in an active state,
                // then the currently clicked frameBlock should also be in an active state when selected.
                this._setSelectionState([element], true);
                this._edgeless.slots.selectedBlocksUpdated.emit([]);
                return;
            }
        }
        // hold shift key to multi select or de-select element
        if (e.keys.shift) {
            const selections = [...selected];
            if (selected.includes(element)) {
                this._setSelectionState(selections.filter(item => item !== element), false);
            }
            else {
                this._setSelectionState([...selections, element], false);
            }
        }
        else {
            this._setSelectionState([element], false);
        }
    }
    _handleDragMoveEffect(element) {
        handleElementChangedEffectForConnector(element, this.state.selected, this._edgeless.surface, this._page);
    }
    _handleSurfaceDragMove(selected, e) {
        if (!this._lock) {
            this._lock = true;
            this._page.captureSync();
        }
        const { surface } = this._edgeless;
        const { zoom } = surface.viewport;
        const deltaX = this._dragLastPos.x - e.x;
        const deltaY = this._dragLastPos.y - e.y;
        const boundX = selected.x - deltaX / zoom;
        const boundY = selected.y - deltaY / zoom;
        const boundW = selected.w;
        const boundH = selected.h;
        if (selected.type !== 'connector' ||
            (selected instanceof ConnectorElement &&
                isConnectorAndBindingsAllSelected(selected, this.state.selected))) {
            surface.setElementBound(selected.id, {
                x: boundX,
                y: boundY,
                w: boundW,
                h: boundH,
            });
        }
        this._handleDragMoveEffect(selected);
    }
    _handleBlockDragMove(block, e) {
        const [modelX, modelY, modelW, modelH] = JSON.parse(block.xywh);
        const { zoom } = this._edgeless.surface.viewport;
        const xywh = JSON.stringify([
            modelX + e.delta.x / zoom,
            modelY + e.delta.y / zoom,
            modelW,
            modelH,
        ]);
        this._page.updateBlock(block, { xywh });
        this._handleDragMoveEffect(block);
        // TODO: refactor
        if (this.selectedBlocks.length) {
            this._edgeless.slots.selectedBlocksUpdated.emit(this.selectedBlocks);
        }
    }
    _isInSelectedRect(viewX, viewY) {
        const { selected } = this.state;
        if (!selected.length)
            return false;
        const commonBound = getCommonBound(selected.map(element => {
            if (isTopLevelBlock(element)) {
                const [x, y, w, h] = deserializeXYWH(getXYWH(element));
                return {
                    x,
                    y,
                    w,
                    h,
                };
            }
            return element;
        }));
        const [modelX, modelY] = this._surface.toModelCoord(viewX, viewY);
        if (commonBound && isPointIn(commonBound, modelX, modelY)) {
            return true;
        }
        return false;
    }
    _forceUpdateSelection() {
        // FIXME: force triggering selection change to re-render selection rect
        this._edgeless.slots.selectionUpdated.emit({
            ...this.state,
        });
    }
    _tryDeleteEmptyBlocks() {
        const emptyBlocks = this._blocks.filter(b => isEmpty(b));
        // always keep at least one frame block
        if (emptyBlocks.length === this._blocks.length) {
            emptyBlocks.shift();
        }
        if (emptyBlocks.length) {
            this._page.captureSync();
            emptyBlocks.forEach(b => this._page.deleteBlock(b));
        }
    }
    /** Update drag handle by closest block elements */
    _updateDragHandle(e) {
        const block = this.state.selected[0];
        if (!block || !isTopLevelBlock(block))
            return;
        const frameBlockElement = getBlockElementByModel(block);
        assertExists(frameBlockElement);
        const { raw: { clientX, clientY }, } = e;
        const point = new Point(clientX, clientY);
        const element = getClosestBlockElementByPoint(point, {
            container: frameBlockElement,
            rect: Rect.fromDOM(frameBlockElement),
        }, this._edgeless.surface.viewport.zoom);
        let hoverEditingState = null;
        if (element) {
            hoverEditingState = {
                element: element,
                model: getModelByBlockElement(element),
                rect: getRectByBlockElement(element),
            };
            this._edgeless.components.dragHandle?.onContainerMouseMove(e, hoverEditingState);
        }
    }
    onContainerClick(e) {
        this._tryDeleteEmptyBlocks();
        const selected = this._pick(e.x, e.y);
        if (selected) {
            this._handleClickOnSelected(selected, e);
        }
        else {
            this._setNoneSelectionState();
        }
        this._isDoubleClickedOnMask = false;
    }
    onContainerContextMenu(e) {
        // repairContextMenuRange(e);
        noop();
    }
    onContainerDblClick(e) {
        const selected = this._pick(e.x, e.y);
        if (!selected) {
            addText(this._edgeless, e);
            return;
        }
        else {
            if (selected instanceof TextElement) {
                mountTextEditor(selected, this._edgeless);
                return;
            }
        }
        if (e.raw.target &&
            e.raw.target instanceof HTMLElement &&
            e.raw.target.classList.contains('affine-edgeless-mask')) {
            this.onContainerClick(e);
            this._isDoubleClickedOnMask = true;
            return;
        }
        showFormatQuickBarByClicks('double', e, this._page, this._edgeless);
    }
    onContainerTripleClick(e) {
        if (this._isDoubleClickedOnMask)
            return;
        showFormatQuickBarByClicks('triple', e, this._page, this._edgeless);
    }
    _determineDragType(e) {
        // Is dragging started from current selected rect
        if (this._isInSelectedRect(e.x, e.y)) {
            return this.state.active
                ? DefaultModeDragType.NativeEditing
                : DefaultModeDragType.ContentMoving;
        }
        else {
            const selected = this._pick(e.x, e.y);
            if (selected) {
                this._setSelectionState([selected], false);
                return DefaultModeDragType.ContentMoving;
            }
            else {
                return DefaultModeDragType.Selecting;
            }
        }
    }
    async _cloneContent(e) {
        this._lock = true;
        const { surface } = this._edgeless;
        const elements = (await Promise.all(this.state.selected.map(async (selected) => {
            return await this._cloneSelected(selected, surface);
        })));
        this._setSelectionState(elements, false);
    }
    async _cloneSelected(selected, surface) {
        if (isTopLevelBlock(selected)) {
            const frameService = this._edgeless.getService('affine:frame');
            const id = this._page.addBlock('affine:frame', { xywh: selected.xywh }, this._page.root?.id);
            const frame = this._page.getBlockById(id);
            assertExists(frame);
            await frameService.json2Block(frame, frameService.block2Json(selected).children);
            return this._page.getBlockById(id);
        }
        else {
            const id = surface.addElement(selected.type, selected.serialize());
            return surface.pickById(id);
        }
    }
    async onContainerDragStart(e) {
        // Determine the drag type based on the current state and event
        let dragType = this._determineDragType(e);
        // If alt key is pressed and content is moving, clone the content
        if (e.keys.alt && dragType === DefaultModeDragType.ContentMoving) {
            dragType = DefaultModeDragType.AltCloning;
            await this._cloneContent(e);
        }
        // Set up drag stvate
        this.initializeDragState(e, dragType);
    }
    initializeDragState(e, dragType) {
        this.dragType = dragType;
        this._startRange = caretRangeFromPoint(e.x, e.y);
        this._dragStartPos = { x: e.x, y: e.y };
        this._dragLastPos = { x: e.x, y: e.y };
    }
    onContainerDragMove(e) {
        switch (this.dragType) {
            case DefaultModeDragType.Selecting: {
                const startX = this._dragStartPos.x;
                const startY = this._dragStartPos.y;
                const viewX = Math.min(startX, e.x);
                const viewY = Math.min(startY, e.y);
                const [x, y] = this._surface.toModelCoord(viewX, viewY);
                const w = Math.abs(startX - e.x);
                const h = Math.abs(startY - e.y);
                const { zoom } = this._surface.viewport;
                const bound = new Bound(x, y, w / zoom, h / zoom);
                const blocks = pickBlocksByBound(this._blocks, bound);
                const elements = this._surface.pickByBound(bound);
                this._setSelectionState([...blocks, ...elements], false);
                break;
            }
            case DefaultModeDragType.AltCloning:
            case DefaultModeDragType.ContentMoving: {
                this.state.selected.forEach(element => {
                    if (isPhasorElement(element)) {
                        this._handleSurfaceDragMove(element, e);
                    }
                    else {
                        this._handleBlockDragMove(element, e);
                    }
                });
                this._forceUpdateSelection();
                break;
            }
            case DefaultModeDragType.NativeEditing: {
                // TODO reset if drag out of frame
                handleNativeRangeDragMove(this._startRange, e);
                break;
            }
        }
        this._dragLastPos = {
            x: e.x,
            y: e.y,
        };
    }
    onContainerDragEnd(e) {
        if (this._lock) {
            this._page.captureSync();
            this._lock = false;
        }
        if (this.isActive) {
            const { direction, selectedType } = getNativeSelectionMouseDragInfo(e);
            if (selectedType === 'Caret') {
                // If nothing is selected, then we should not show the format bar
                return;
            }
            showFormatQuickBar({
                page: this._page,
                container: this._edgeless,
                direction,
                anchorEl: {
                    getBoundingClientRect: () => {
                        return calcCurrentSelectionPosition(direction);
                    },
                },
            });
        }
        this.dragType = DefaultModeDragType.None;
        this._dragStartPos = { x: 0, y: 0 };
        this._dragLastPos = { x: 0, y: 0 };
        this._forceUpdateSelection();
    }
    onContainerMouseMove(e) {
        if (this.dragType === DefaultModeDragType.PreviewDragging)
            return;
        this._updateDragHandle(e);
    }
    onContainerMouseOut(_) {
        noop();
    }
    onPressShiftKey(_) {
        noop();
    }
}
//# sourceMappingURL=default-mode.js.map