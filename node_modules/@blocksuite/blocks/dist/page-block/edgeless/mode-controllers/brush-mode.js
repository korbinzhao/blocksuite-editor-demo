import { assertExists } from '@blocksuite/global/utils';
import { noop } from '../../../__internal__/index.js';
import { DEFAULT_SELECTED_COLOR } from '../components/color-panel.js';
import { MouseModeController } from './index.js';
export class BrushModeController extends MouseModeController {
    constructor() {
        super(...arguments);
        this.mouseMode = {
            type: 'brush',
            color: DEFAULT_SELECTED_COLOR,
            lineWidth: 4,
        };
        this._draggingElementId = null;
        this._draggingPathPoints = null;
    }
    onContainerClick(e) {
        noop();
    }
    onContainerContextMenu(e) {
        noop();
    }
    onContainerDblClick(e) {
        noop();
    }
    onContainerTripleClick(e) {
        noop();
    }
    onContainerDragStart(e) {
        if (!this._page.awarenessStore.getFlag('enable_surface'))
            return;
        this._page.captureSync();
        const { viewport } = this._edgeless.surface;
        // create a shape block when drag start
        const [modelX, modelY] = viewport.toModelCoord(e.point.x, e.point.y);
        const { color, lineWidth } = this.mouseMode;
        const points = [[modelX, modelY]];
        const id = this._surface.addElement('brush', {
            points,
            color,
            lineWidth,
        });
        this._draggingElementId = id;
        this._draggingPathPoints = points;
        this._edgeless.slots.surfaceUpdated.emit();
    }
    onContainerDragMove(e) {
        if (!this._page.awarenessStore.getFlag('enable_surface'))
            return;
        if (!this._draggingElementId)
            return;
        assertExists(this._draggingElementId);
        assertExists(this._draggingPathPoints);
        const { lineWidth } = this.mouseMode;
        const [modelX, modelY] = this._edgeless.surface.toModelCoord(e.point.x, e.point.y);
        const points = [...this._draggingPathPoints, [modelX, modelY]];
        this._draggingPathPoints = points;
        this._surface.updateElement(this._draggingElementId, {
            points,
            lineWidth,
        });
        this._edgeless.slots.surfaceUpdated.emit();
    }
    onContainerDragEnd(e) {
        this._draggingElementId = null;
        this._draggingPathPoints = null;
        this._page.captureSync();
        this._edgeless.slots.surfaceUpdated.emit();
    }
    onContainerMouseMove(e) {
        noop();
    }
    onContainerMouseOut(e) {
        noop();
    }
    onPressShiftKey(_) {
        noop();
    }
}
//# sourceMappingURL=brush-mode.js.map