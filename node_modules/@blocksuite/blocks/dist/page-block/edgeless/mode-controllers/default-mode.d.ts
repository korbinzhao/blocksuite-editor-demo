import type { PointerEventState } from '@blocksuite/lit';
import { type DefaultMouseMode } from '../../../__internal__/index.js';
import { MouseModeController } from './index.js';
export declare enum DefaultModeDragType {
    /** Moving selected contents */
    ContentMoving = "content-moving",
    /** Expanding the dragging area, select the content covered inside */
    Selecting = "selecting",
    /** Native range dragging inside active frame block */
    NativeEditing = "native-editing",
    /** Default void state */
    None = "none",
    /** Dragging preview */
    PreviewDragging = "preview-dragging",
    /** press alt/option key to clone selected  */
    AltCloning = "alt-cloning"
}
export declare class DefaultModeController extends MouseModeController<DefaultMouseMode> {
    readonly mouseMode: DefaultMouseMode;
    enableHover: boolean;
    dragType: DefaultModeDragType;
    private _startRange;
    private _dragStartPos;
    private _dragLastPos;
    private _lock;
    private _isDoubleClickedOnMask;
    get draggingArea(): {
        start: DOMPoint;
        end: DOMPoint;
    } | null;
    get selectedBlocks(): (import("../../../__internal__/rich-text/rich-text.js").RichText | import("../../../bookmark-block/components/bookmark-operation-popper.js").BookmarkOperationMenu | import("../../../bookmark-block/components/bookmark-toolbar.js").BookmarkToolbar | import("../../../bookmark-block/components/bookmark-edit-modal.js").BookmarkEditModal | import("../../../bookmark-block/components/bookmark-create-modal.js").BookmarkCreateModal | import("../../../index.js").BookmarkBlockComponent | import("../../../index.js").ListBlockComponent | import("../../../index.js").CodeBlockComponent | import("../../../database-block/table/table-view.js").DatabaseTable | import("../../../database-block/kanban/kanban-view.js").DatabaseKanban | import("../../../index.js").DatabaseBlockComponent | import("../../index.js").DefaultPageBlockComponent | import("../edgeless-page-block.js").EdgelessPageBlockComponent | import("../../../index.js").EmbedBlockComponent | import("../../../index.js").ImageBlockComponent | import("../../../index.js").DividerBlockComponent | import("../../../index.js").ParagraphBlockComponent | import("../../../index.js").FrameBlockComponent)[];
    get state(): import("../selection-manager.js").EdgelessSelectionState;
    get isActive(): boolean;
    private _pick;
    private _setNoneSelectionState;
    private _setSelectionState;
    private _handleClickOnSelected;
    private _handleDragMoveEffect;
    private _handleSurfaceDragMove;
    private _handleBlockDragMove;
    private _isInSelectedRect;
    private _forceUpdateSelection;
    private _tryDeleteEmptyBlocks;
    /** Update drag handle by closest block elements */
    private _updateDragHandle;
    onContainerClick(e: PointerEventState): void;
    onContainerContextMenu(e: PointerEventState): void;
    onContainerDblClick(e: PointerEventState): void;
    onContainerTripleClick(e: PointerEventState): void;
    private _determineDragType;
    private _cloneContent;
    private _cloneSelected;
    onContainerDragStart(e: PointerEventState): Promise<void>;
    initializeDragState(e: PointerEventState, dragType: DefaultModeDragType): void;
    onContainerDragMove(e: PointerEventState): void;
    onContainerDragEnd(e: PointerEventState): void;
    onContainerMouseMove(e: PointerEventState): void;
    onContainerMouseOut(_: PointerEventState): void;
    onPressShiftKey(_: boolean): void;
}
//# sourceMappingURL=default-mode.d.ts.map