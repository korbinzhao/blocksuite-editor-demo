var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { ShadowlessElement } from '@blocksuite/lit';
import { ZERO_WIDTH_SPACE } from '@blocksuite/virgo';
import { css, html } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { styleMap } from 'lit/directives/style-map.js';
export function affineTextStyles(props, override) {
    let textDecorations = '';
    if (props.underline) {
        textDecorations += 'underline';
    }
    if (props.strike) {
        textDecorations += ' line-through';
    }
    let inlineCodeStyle = {};
    if (props.code) {
        inlineCodeStyle = {
            'font-family': 'var(--affine-font-code-family)',
            background: 'var(--affine-background-code-block)',
            color: 'var(--affine-text-primary-color)',
            'border-radius': '4px',
            padding: '3px 6px',
            'font-size': 'calc(var(--affine-font-base) - 4px)',
            'font-variant-ligatures': 'none',
            'line-height': 'var(--affine-font-base)',
            border: '1px solid var(--affine-border-color)',
        };
    }
    return styleMap({
        'font-weight': props.bold ? 'bold' : 'normal',
        'font-style': props.italic ? 'italic' : 'normal',
        'text-decoration': textDecorations.length > 0 ? textDecorations : 'none',
        ...inlineCodeStyle,
        ...override,
    });
}
let AffineText = class AffineText extends ShadowlessElement {
    constructor() {
        super(...arguments);
        this.delta = {
            insert: ZERO_WIDTH_SPACE,
        };
    }
    render() {
        const style = this.delta.attributes
            ? affineTextStyles(this.delta.attributes)
            : styleMap({});
        // we need to avoid \n appearing before and after the span element, which will
        // cause the unexpected space
        return html `<span style=${style}
      ><v-text .str=${this.delta.insert}></v-text
    ></span>`;
    }
};
AffineText.styles = css `
    affine-text {
      white-space: break-spaces;
      word-break: break-word;
    }
  `;
__decorate([
    property({ type: Object })
], AffineText.prototype, "delta", void 0);
AffineText = __decorate([
    customElement('affine-text')
], AffineText);
export { AffineText };
//# sourceMappingURL=affine-text.js.map