import type { AttributeRenderer, BaseTextAttributes, DeltaInsert, VEditor } from '@blocksuite/virgo';
import { z, type ZodTypeDef } from 'zod';
export declare const affineTextAttributes: z.ZodObject<{
    bold: z.ZodCatch<z.ZodOptional<z.ZodLiteral<true>>>;
    link: z.ZodCatch<z.ZodOptional<z.ZodString>>;
    strike: z.ZodCatch<z.ZodOptional<z.ZodLiteral<true>>>;
    code: z.ZodCatch<z.ZodOptional<z.ZodLiteral<true>>>;
    italic: z.ZodCatch<z.ZodOptional<z.ZodLiteral<true>>>;
    underline: z.ZodCatch<z.ZodOptional<z.ZodLiteral<true>>>;
    reference: z.ZodOptional<z.ZodObject<{
        type: z.ZodEnum<["Subpage", "LinkedPage"]>;
        pageId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "Subpage" | "LinkedPage";
        pageId: string;
    }, {
        type: "Subpage" | "LinkedPage";
        pageId: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    bold?: true | undefined;
    link?: string | undefined;
    strike?: true | undefined;
    code?: true | undefined;
    italic?: true | undefined;
    underline?: true | undefined;
    reference?: {
        type: "Subpage" | "LinkedPage";
        pageId: string;
    } | undefined;
}, {
    bold?: unknown;
    link?: unknown;
    strike?: unknown;
    code?: unknown;
    italic?: unknown;
    underline?: unknown;
    reference?: {
        type: "Subpage" | "LinkedPage";
        pageId: string;
    } | undefined;
}>;
export type AffineTextAttributes = z.infer<typeof affineTextAttributes>;
export type AffineDeltaInsert = DeltaInsert<AffineTextAttributes>;
export type AffineVEditor = VEditor<AffineTextAttributes>;
export type AffineTextSchema<TextAttributes extends BaseTextAttributes = AffineTextAttributes> = {
    attributesSchema: z.ZodSchema<TextAttributes, ZodTypeDef, unknown>;
    textRenderer: () => AttributeRenderer<TextAttributes>;
};
//# sourceMappingURL=types.d.ts.map