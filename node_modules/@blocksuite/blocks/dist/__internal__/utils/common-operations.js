import { assertExists, matchFlavours } from '@blocksuite/global/utils';
import { asyncGetRichTextByModel, getBlockElementByModel, getVirgoByModel, } from './query.js';
export async function asyncSetVRange(model, vRange) {
    const richText = await asyncGetRichTextByModel(model);
    richText?.vEditor?.setVRange(vRange);
    return new Promise(resolve => {
        richText?.vEditor?.slots.rangeUpdated.once(() => {
            resolve();
        });
    });
}
export function asyncFocusRichText(page, id, vRange = { index: 0, length: 0 }) {
    const model = page.getBlockById(id);
    assertExists(model);
    if (matchFlavours(model, ['affine:divider']))
        return;
    return asyncSetVRange(model, vRange);
}
export function isCollapsedAtBlockStart(vEditor) {
    const vRange = vEditor.getVRange();
    return vRange?.index === 0 && vRange?.length === 0;
}
export function isInSamePath(page, children, father) {
    if (children === father) {
        return true;
    }
    let parent;
    for (;;) {
        parent = page.getParent(children);
        if (parent === null) {
            return false;
        }
        else if (parent.id === father.id) {
            return true;
        }
        children = parent;
    }
}
export function convertToList(page, model, listType, prefix, otherProperties) {
    if (matchFlavours(model, ['affine:list']) && model['type'] === listType) {
        return false;
    }
    if (matchFlavours(model, ['affine:paragraph'])) {
        const parent = page.getParent(model);
        if (!parent)
            return false;
        const index = parent.children.indexOf(model);
        model.text?.insert(' ', prefix.length);
        page.captureSync();
        model.text?.delete(0, prefix.length + 1);
        const blockProps = {
            type: listType,
            text: model.text?.clone(),
            children: model.children,
            ...otherProperties,
        };
        page.deleteBlock(model);
        const id = page.addBlock('affine:list', blockProps, parent, index);
        asyncFocusRichText(page, id);
    }
    else if (matchFlavours(model, ['affine:list']) &&
        model['type'] !== listType) {
        model.text?.insert(' ', prefix.length);
        page.captureSync();
        model.text?.delete(0, prefix.length + 1);
        page.updateBlock(model, { type: listType });
        asyncFocusRichText(page, model.id);
    }
    return true;
}
export function convertToParagraph(page, model, type, prefix) {
    if (matchFlavours(model, ['affine:paragraph']) && model['type'] === type) {
        return false;
    }
    if (!matchFlavours(model, ['affine:paragraph'])) {
        const parent = page.getParent(model);
        if (!parent)
            return false;
        const index = parent.children.indexOf(model);
        model.text?.insert(' ', prefix.length);
        page.captureSync();
        model.text?.delete(0, prefix.length + 1);
        const blockProps = {
            type: type,
            text: model.text?.clone(),
            children: model.children,
        };
        page.deleteBlock(model);
        const id = page.addBlock('affine:paragraph', blockProps, parent, index);
        asyncFocusRichText(page, id);
    }
    else if (matchFlavours(model, ['affine:paragraph']) &&
        model['type'] !== type) {
        model.text?.insert(' ', prefix.length);
        page.captureSync();
        model.text?.delete(0, prefix.length + 1);
        const vEditor = getVirgoByModel(model);
        if (vEditor) {
            vEditor.setVRange({
                index: 0,
                length: 0,
            });
        }
        page.updateBlock(model, { type: type });
    }
    return true;
}
export function convertToDivider(page, model, prefix) {
    if (matchFlavours(model, ['affine:divider']) || model.type === 'quote') {
        return false;
    }
    if (!matchFlavours(model, ['affine:divider'])) {
        const parent = page.getParent(model);
        if (!parent)
            return false;
        const index = parent.children.indexOf(model);
        model.text?.insert(' ', prefix.length);
        page.captureSync();
        model.text?.delete(0, prefix.length + 1);
        const blockProps = {
            children: model.children,
        };
        // space.deleteBlock(model);
        page.addBlock('affine:divider', blockProps, parent, index);
        const nextBlock = parent.children[index + 1];
        if (nextBlock) {
            asyncFocusRichText(page, nextBlock.id);
        }
        else {
            const nextId = page.addBlock('affine:paragraph', {}, parent);
            asyncFocusRichText(page, nextId);
        }
    }
    return true;
}
export function createBookmarkBlock(parentModel, index) {
    const { page } = parentModel;
    const id = page.addBlock('affine:bookmark', { url: '' }, parentModel.id, index);
    requestAnimationFrame(() => {
        const model = page.getBlockById(id);
        const element = getBlockElementByModel(model);
        element.slots.openInitialModal.emit();
    });
    return id;
}
//# sourceMappingURL=common-operations.js.map