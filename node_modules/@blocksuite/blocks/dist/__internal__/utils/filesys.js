import { assertExists } from '@blocksuite/global/utils';
export const createImageInputElement = () => {
    const fileInput = document.createElement('input');
    fileInput.type = 'file';
    fileInput.multiple = true;
    fileInput.accept = 'image/*';
    fileInput.style.position = 'fixed';
    fileInput.style.left = '0';
    fileInput.style.top = '0';
    fileInput.style.opacity = '0.001';
    return fileInput;
};
export const uploadImageFromLocal = async (page, getSize) => {
    const baseProps = { flavour: 'affine:embed', type: 'image' };
    const fileInput = createImageInputElement();
    document.body.appendChild(fileInput);
    let resolvePromise;
    const pending = new Promise(resolve => {
        resolvePromise = resolve;
    });
    const onChange = async () => {
        if (!fileInput.files)
            return;
        const storage = await page.blobs;
        assertExists(storage);
        const files = fileInput.files;
        if (files.length === 1) {
            const file = files[0];
            if (getSize) {
                getSize(await readImageSize(file));
            }
            const id = await storage.set(file);
            resolvePromise([{ ...baseProps, sourceId: id }]);
        }
        else {
            const res = [];
            for (let i = 0; i < files.length; i++) {
                const file = files[i];
                const id = await storage.set(file);
                res.push({ ...baseProps, sourceId: id });
            }
            resolvePromise(res);
        }
        fileInput.removeEventListener('change', onChange);
        fileInput.remove();
    };
    fileInput.addEventListener('change', onChange);
    fileInput.click();
    return await pending;
};
function readImageSize(file) {
    return new Promise(resolve => {
        let width = 0;
        let height = 0;
        let reader = new FileReader();
        reader.addEventListener('load', _ => {
            const img = new Image();
            img.onload = () => {
                width = img.width;
                height = img.height;
                reader = null;
                resolve({ width, height });
            };
            img.src = reader?.result;
        });
        reader.addEventListener('error', _ => {
            reader = null;
            resolve({ width, height });
        });
        reader.readAsDataURL(file);
    });
}
//# sourceMappingURL=filesys.js.map