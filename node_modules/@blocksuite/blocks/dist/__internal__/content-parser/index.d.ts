import type { Page } from '@blocksuite/store';
import { Slot } from '@blocksuite/store';
import { type SerializedBlock } from '../utils/index.js';
import type { FetchFileHandler, TableParserHandler, TextStyleHandler } from './parse-html.js';
import type { SelectedBlock } from './types.js';
type ParseHtml2BlockHandler = (...args: any[]) => Promise<SerializedBlock[] | null>;
export declare class ContentParser {
    private _page;
    readonly slots: {
        beforeHtml2Block: Slot<Element>;
    };
    private _parsers;
    private _htmlParser;
    private urlPattern;
    constructor(page: Page, fetchFileHandler?: FetchFileHandler, textStyleHandler?: TextStyleHandler, tableParserHandler?: TableParserHandler);
    exportHtml(): Promise<void>;
    exportMarkdown(): Promise<void>;
    exportPng(): Promise<void>;
    exportPdf(): Promise<void>;
    block2Html(blocks: SelectedBlock[]): Promise<string>;
    block2Text(blocks: SelectedBlock[]): Promise<string>;
    htmlText2Block(html: string): Promise<SerializedBlock[]>;
    file2Blocks(clipboardData: DataTransfer): Promise<SerializedBlock[]>;
    markdown2Block(text: string): Promise<SerializedBlock[]>;
    importMarkdown(text: string, insertPositionId: string): Promise<void>;
    importHtml(text: string, insertPositionId: string): Promise<void>;
    registerParserHtmlText2Block(name: string, handler: ParseHtml2BlockHandler): void;
    getParserHtmlText2Block(name: string): ParseHtml2BlockHandler;
    text2blocks(text: string): SerializedBlock[];
    private _getSelectedBlock;
    private _getHtmlInfoBySelectionInfo;
    private _getTextInfoBySelectionInfo;
    private _convertHtml2Blocks;
}
export {};
//# sourceMappingURL=index.d.ts.map