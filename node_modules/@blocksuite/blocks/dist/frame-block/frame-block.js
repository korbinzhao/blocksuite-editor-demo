var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/// <reference types="vite/client" />
import { BlockElement } from '@blocksuite/lit';
import { css, html } from 'lit';
import { customElement } from 'lit/decorators.js';
import { registerService } from '../__internal__/service.js';
import { FrameBlockService } from './frame-service.js';
let FrameBlockComponent = class FrameBlockComponent extends BlockElement {
    connectedCallback() {
        super.connectedCallback();
        registerService('affine:frame', FrameBlockService);
    }
    firstUpdated() {
        this.model.propsUpdated.on(() => this.requestUpdate());
        this.model.childrenUpdated.on(() => this.requestUpdate());
    }
    render() {
        return html `
      <div class="affine-frame-block-container">
        <div class="affine-block-children-container">${this.content}</div>
      </div>
    `;
    }
};
FrameBlockComponent.styles = css `
    .affine-frame-block-container {
      display: flow-root;
    }
    .affine-frame-block-container.selected {
      background-color: var(--affine-hover-color);
    }
  `;
FrameBlockComponent = __decorate([
    customElement('affine-frame')
], FrameBlockComponent);
export { FrameBlockComponent };
//# sourceMappingURL=frame-block.js.map