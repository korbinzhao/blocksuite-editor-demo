var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { SearchIcon } from '@blocksuite/global/config';
import { ShadowlessElement } from '@blocksuite/lit';
import { css, html } from 'lit';
import { customElement, property, query, state } from 'lit/decorators.js';
import { BUNDLED_LANGUAGES, } from 'shiki';
import { createEvent } from '../../__internal__/index.js';
import { POPULAR_LANGUAGES_MAP } from '../utils/code-languages.js';
import { PLAIN_TEXT_REGISTRATION } from '../utils/consts.js';
// TODO extract to a common list component
let LangList = class LangList extends ShadowlessElement {
    constructor() {
        super(...arguments);
        this._filterText = '';
        this._currentSelectedIndex = 0;
        this.delay = 150;
        this._clickAwayListener = (e) => {
            if (this.renderRoot.parentElement?.contains(e.target)) {
                return;
            }
            this.dispatchEvent(createEvent('dispose', null));
        };
    }
    static get styles() {
        return css `
      lang-list {
        display: flex;
        flex-direction: column;
        position: absolute;
        background: var(--affine-background-overlay-panel-color);
        border-radius: 12px;
        top: 24px;
        z-index: 1;
      }

      .lang-list-container {
        box-shadow: var(--affine-menu-shadow);
        border-radius: 8px;
        padding: 12px 8px;
      }

      .lang-list-button-container {
        position: relative;
        overflow: scroll;
        height: 424px;
        width: 200px;
        padding-top: 5px;
        padding-left: 4px;
        padding-right: 4px;
        /*scrollbar-color: #fff0 #fff0;*/
      }

      /*
      .lang-list-button-container::-webkit-scrollbar {
        background: none;
      }
      */

      .lang-item {
        display: flex;
        justify-content: flex-start;
        padding-left: 12px;
        margin-bottom: 5px;
      }

      .input-wrapper {
        position: relative;
        display: flex;
        margin-top: 8px;
        margin-left: 4px;
      }

      #filter-input {
        display: flex;
        align-items: center;
        height: 32px;
        width: 192px;
        border: 1px solid var(--affine-border-color);
        border-radius: 8px;
        padding-left: 44px;
        padding-top: 4px;

        font-family: var(--affine-font-family);
        font-size: var(--affine-font-sm);
        box-sizing: border-box;
        color: inherit;
        background: var(--affine-background-overlay-panel-color);
      }

      #filter-input:focus {
        outline: none;
      }

      #filter-input::placeholder {
        color: var(--affine-placeholder-color);
        font-size: var(--affine-font-sm);
      }

      .search-icon {
        position: absolute;
        left: 8px;
        height: 100%;
        display: flex;
        align-items: center;
        fill: var(--affine-icon-color);
      }
    `;
    }
    async connectedCallback() {
        super.connectedCallback();
        // Avoid triggering click away listener on initial render
        document.addEventListener('click', this._clickAwayListener);
        setTimeout(() => {
            this.filterInput?.focus();
        }, 0);
    }
    disconnectedCallback() {
        super.disconnectedCallback();
        document.removeEventListener('click', this._clickAwayListener);
    }
    _onLanguageClicked(language) {
        // TODO use slot instead
        this.dispatchEvent(createEvent('selected-language-changed', {
            language: language?.id ?? null,
        }));
    }
    render() {
        const filteredLanguages = [PLAIN_TEXT_REGISTRATION, ...BUNDLED_LANGUAGES]
            .filter(language => {
            if (!this._filterText) {
                return true;
            }
            return (language.id.startsWith(this._filterText.toLowerCase()) ||
                language.aliases?.some(alias => alias.startsWith(this._filterText.toLowerCase())));
        })
            .sort((a, b) => (POPULAR_LANGUAGES_MAP[a.id] ?? Infinity) -
            (POPULAR_LANGUAGES_MAP[b.id] ?? Infinity));
        const onLanguageSelect = (e) => {
            if (e.key === 'ArrowDown') {
                e.preventDefault();
                this._currentSelectedIndex =
                    (this._currentSelectedIndex + 1) % filteredLanguages.length;
                // TODO scroll to item
            }
            else if (e.key === 'ArrowUp') {
                e.preventDefault();
                this._currentSelectedIndex =
                    (this._currentSelectedIndex + filteredLanguages.length - 1) %
                        filteredLanguages.length;
                // TODO scroll to item
            }
            else if (e.key === 'Enter') {
                e.preventDefault();
                if (this._currentSelectedIndex === -1 ||
                    this._currentSelectedIndex >= filteredLanguages.length)
                    return;
                this._onLanguageClicked(filteredLanguages[this._currentSelectedIndex]);
            }
        };
        return html `
      <div class="lang-list-container">
        <div class="input-wrapper">
          <div class="search-icon">${SearchIcon}</div>
          <input
            id="filter-input"
            type="text"
            placeholder="Search"
            @input="${() => {
            this._filterText = this.filterInput?.value;
            this._currentSelectedIndex = 0;
        }}"
            @keydown="${onLanguageSelect}"
          />
        </div>
        <div class="lang-list-button-container">
          ${filteredLanguages.map((language, index) => html `
              <icon-button
                width="100%"
                height="32px"
                @click="${() => this._onLanguageClicked(language)}"
                class="lang-item"
                ?hover=${index === this._currentSelectedIndex}
              >
                ${language.id[0].toUpperCase() + language.id.slice(1)}
              </icon-button>
            `)}
        </div>
      </div>
    `;
    }
};
__decorate([
    state()
], LangList.prototype, "_filterText", void 0);
__decorate([
    state()
], LangList.prototype, "_currentSelectedIndex", void 0);
__decorate([
    query('#filter-input')
], LangList.prototype, "filterInput", void 0);
__decorate([
    property()
], LangList.prototype, "delay", void 0);
LangList = __decorate([
    customElement('lang-list')
], LangList);
export { LangList };
//# sourceMappingURL=lang-list.js.map