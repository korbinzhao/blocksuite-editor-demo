var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { ShadowlessElement } from '@blocksuite/lit';
import { assertExists } from '@blocksuite/store';
import { VText, ZERO_WIDTH_SPACE } from '@blocksuite/virgo';
import { html } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { styleMap } from 'lit/directives/style-map.js';
import { queryCurrentMode } from '../std.js';
import { DARK_THEME, LIGHT_THEME } from './utils/consts.js';
import { highlightCache, } from './utils/highlight-cache.js';
let AffineCodeLine = class AffineCodeLine extends ShadowlessElement {
    constructor() {
        super(...arguments);
        this.delta = {
            insert: ZERO_WIDTH_SPACE,
        };
        this.highlightOptionsGetter = null;
    }
    render() {
        assertExists(this.highlightOptionsGetter, 'highlightOptionsGetter is not set');
        const { lang, highlighter } = this.highlightOptionsGetter();
        if (!highlighter || !highlighter.getLoadedLanguages().includes(lang)) {
            const vText = new VText();
            vText.str = this.delta.insert;
            vText.styles = styleMap({});
            return html `<span>${vText}</span>`;
        }
        const mode = queryCurrentMode();
        const cacheKey = `${this.delta.insert}-${lang}-${mode}`;
        const cache = highlightCache.get(cacheKey);
        let tokens = [
            {
                content: this.delta.insert,
            },
        ];
        if (cache) {
            tokens = cache;
        }
        else {
            tokens = highlighter.codeToThemedTokens(this.delta.insert, lang, mode === 'dark' ? DARK_THEME : LIGHT_THEME)[0];
            highlightCache.set(cacheKey, tokens);
        }
        const vTexts = tokens.map(token => {
            const vText = new VText();
            vText.str = token.content;
            vText.styles = styleMap({
                color: token.color,
            });
            return vText;
        });
        return html `<span>${vTexts}</span>`;
    }
};
__decorate([
    property({ type: Object })
], AffineCodeLine.prototype, "delta", void 0);
__decorate([
    property()
], AffineCodeLine.prototype, "highlightOptionsGetter", void 0);
AffineCodeLine = __decorate([
    customElement('affine-code-line')
], AffineCodeLine);
export { AffineCodeLine };
//# sourceMappingURL=affine-code-line.js.map