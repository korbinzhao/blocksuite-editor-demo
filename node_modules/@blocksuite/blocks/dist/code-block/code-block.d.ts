import '../__internal__/rich-text/rich-text.js';
import '../components/portal.js';
import './components/code-option.js';
import './components/lang-list.js';
import { BlockElement } from '@blocksuite/lit';
import { Slot } from '@blocksuite/store';
import type { AffineTextSchema } from '../__internal__/rich-text/virgo/types.js';
import type { CodeBlockModel } from './code-model.js';
export declare class CodeBlockComponent extends BlockElement<CodeBlockModel> {
    static styles: import("lit").CSSResult;
    private _showLangList;
    private _optionPosition;
    private _wrap;
    readonly textSchema: AffineTextSchema;
    private _richTextResizeObserver;
    private _themeChangeObserver;
    private _preLang;
    private _highlighter;
    private _startHighlight;
    get readonly(): boolean;
    hoverState: Slot<boolean>;
    connectedCallback(): void;
    disconnectedCallback(): void;
    private _onClickWrapBtn;
    protected firstUpdated(): void;
    updated(): void;
    private _onClickLangBtn;
    private _langListTemplate;
    private _codeOptionTemplate;
    private _updateLineNumbers;
    render(): import("lit").TemplateResult<1>;
}
declare global {
    interface HTMLElementTagNameMap {
        'affine-code': CodeBlockComponent;
    }
}
//# sourceMappingURL=code-block.d.ts.map