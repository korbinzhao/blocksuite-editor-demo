var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html, LitElement } from 'lit';
import { customElement, property } from 'lit/decorators.js';
let CounterBlock = class CounterBlock extends LitElement {
    constructor() {
        super();
        this.count = 0;
    }
    async _notify() {
        this.count++;
        // https://lit.dev/docs/components/events/#dispatching-events-after-an-element-updates
        await this.updateComplete;
        const options = {
            detail: this.count,
            bubbles: true,
            composed: true,
        };
        this.dispatchEvent(new CustomEvent('block-count-update', options));
    }
    render() {
        return html ` <div @click=${this._notify}>${this.count}</div> `;
    }
};
__decorate([
    property()
], CounterBlock.prototype, "count", void 0);
CounterBlock = __decorate([
    customElement('counter-block')
], CounterBlock);
export { CounterBlock };
//# sourceMappingURL=counter-block.js.map