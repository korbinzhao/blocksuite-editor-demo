var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { DatabaseKanbanViewIcon, DatabaseSearchClose, DatabaseTableViewIcon, } from '@blocksuite/global/config';
import { assertExists } from '@blocksuite/global/utils';
import { html, LitElement } from 'lit';
import { customElement, property, state } from 'lit/decorators.js';
import { getCurrentBlockRange, getDefaultPage, } from '../../__internal__/index.js';
import { styles } from './styles.js';
const databaseViews = [
    {
        type: 'table',
        text: 'Table view',
        icon: DatabaseTableViewIcon,
    },
    {
        type: 'kanban',
        text: 'Kanban view',
        icon: DatabaseKanbanViewIcon,
        description: 'Coming soon',
        isComingSoon: true,
    },
];
let DatabaseModal = class DatabaseModal extends LitElement {
    constructor() {
        super(...arguments);
        this._selectedView = 'table';
    }
    _convertToDatabase(viewType) {
        if (viewType !== 'table')
            return;
        this._hide();
        this.page.captureSync();
        const range = getCurrentBlockRange(this.page);
        assertExists(range);
        const models = range.models;
        const parentModel = this.page.getParent(models[0]);
        assertExists(parentModel);
        const id = this.page.addBlock('affine:database', {
            columns: [],
            titleColumnName: 'Title',
        }, parentModel, parentModel.children.indexOf(models[0]));
        const databaseModel = this.page.getBlockById(id);
        assertExists(databaseModel);
        // default column
        databaseModel.updateColumn({
            name: 'Tag',
            type: 'multi-select',
            width: 200,
            hide: false,
            selection: [],
        });
        databaseModel.applyColumnUpdate();
        this.page.moveBlocks(models, databaseModel);
        // Try clean block selection
        const defaultPageBlock = getDefaultPage(this.page);
        assertExists(defaultPageBlock);
        if (!defaultPageBlock.selection) {
            // In the edgeless mode
            return;
        }
        defaultPageBlock.selection.clear();
    }
    _hide() {
        this.abortController.abort();
    }
    render() {
        return html `<div class="overlay-root">
      <div class="overlay-mask" @click=${this._hide}></div>
      <div class="modal-container">
        <div class="modal-header">
          <div class="modal-header-title">Select Database View</div>
          <div class="modal-header-close-icon" @click=${this._hide}>
            ${DatabaseSearchClose}
          </div>
        </div>
        <div class="modal-body">
          <div class="modal-desc">
            Group as Database can quickly convert selected blocks into Database
            for easy structuring of data.
          </div>
          <div class="modal-view-container">
            ${databaseViews.map(view => {
            const isSelected = view.type === this._selectedView;
            return html `
                <div
                  class="modal-view-item ${view.type} ${view.isComingSoon
                ? 'coming-soon'
                : ''}"
                  @click=${() => this._convertToDatabase(view.type)}
                >
                  <div
                    class="modal-view-item-content ${isSelected
                ? 'selected'
                : ''}"
                  >
                    <div class="modal-view-item-icon">${view.icon}</div>
                    <div class="modal-view-item-text">${view.text}</div>
                  </div>
                  <div class="modal-view-item-description">
                    ${view.description}
                  </div>
                </div>
              `;
        })}
          </div>
        </div>
        <div class="modal-footer">More views are on the way.</div>
      </div>
    </div>`;
    }
};
DatabaseModal.styles = styles;
__decorate([
    property()
], DatabaseModal.prototype, "page", void 0);
__decorate([
    state()
], DatabaseModal.prototype, "_selectedView", void 0);
__decorate([
    property()
], DatabaseModal.prototype, "abortController", void 0);
DatabaseModal = __decorate([
    customElement('affine-database-modal')
], DatabaseModal);
export { DatabaseModal };
//# sourceMappingURL=database-modal.js.map