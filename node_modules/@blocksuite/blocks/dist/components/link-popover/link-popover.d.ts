import { LitElement, type PropertyValues } from 'lit';
export declare const ALLOWED_SCHEMES: string[];
export declare class LinkPopover extends LitElement {
    static styles: import("lit").CSSResult;
    left: string;
    top: string;
    type: 'create' | 'edit';
    showMask: boolean;
    text: string;
    previewLink: string;
    showBookmarkOperation: boolean;
    private _bodyOverflowStyle;
    private _disableConfirm;
    textInput: HTMLInputElement | undefined;
    linkInput: HTMLInputElement | undefined;
    popoverContainer: HTMLDivElement | undefined;
    connectedCallback(): void;
    protected firstUpdated(_changedProperties: PropertyValues): void;
    disconnectedCallback(): void;
    private _hide;
    private _onConfirm;
    private _onCopy;
    private _onUnlink;
    private _onLinkToCard;
    private _onEdit;
    private _onInput;
    private _onKeydown;
    confirmBtnTemplate(): import("lit").TemplateResult<1>;
    createLinkTemplate(): import("lit").TemplateResult<1>;
    previewTemplate(): import("lit").TemplateResult<1>;
    simpleTemplate(): import("lit").TemplateResult<1>;
    /**
     * ```
     * ┌─────────────────┐
     * │ ┌──────────┐    │
     * │ │Text      │    │
     * │ └──────────┘    │
     * │ ┌──────────┐    │
     * │ │Link      │ X  │
     * │ └──────────┘    │
     * └─────────────────┘
     * ```
     */
    editTemplate(): import("lit").TemplateResult<1>;
    render(): import("lit").TemplateResult<1>;
}
declare global {
    interface HTMLElementTagNameMap {
        'edit-link-panel': LinkPopover;
    }
    interface HTMLElementEventMap {
        updateLink: CustomEvent<LinkDetail>;
        editLink: CustomEvent<null>;
    }
}
export type LinkDetail = {
    type: 'toBookmark';
} | {
    type: 'cancel';
} | {
    type: 'confirm';
    link: string;
    text?: string;
} | {
    type: 'remove';
};
//# sourceMappingURL=link-popover.d.ts.map