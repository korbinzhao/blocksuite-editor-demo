var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { css, html, LitElement } from 'lit';
import { customElement, property } from 'lit/decorators.js';
// FIXME: horizontal
let MenuDivider = class MenuDivider extends LitElement {
    constructor() {
        super(...arguments);
        this.vertical = false;
    }
    render() {
        return html `<div
      class="divider ${this.vertical ? 'vertical' : 'horizontal'}"
    ></div>`;
    }
};
MenuDivider.styles = css `
    :host {
      display: inline-block;
    }

    .divider {
      background-color: var(--affine-border-color);
    }

    .divider.vertical {
      width: 1px;
      height: 100%;
      margin: 0 7px;
    }

    .divider.horizontal {
      width: 100%;
      height: 1px;
      margin: 7px 0;
    }
  `;
__decorate([
    property()
], MenuDivider.prototype, "vertical", void 0);
MenuDivider = __decorate([
    customElement('menu-divider')
], MenuDivider);
export { MenuDivider };
//# sourceMappingURL=menu-divider.js.map