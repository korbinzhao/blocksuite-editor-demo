import './button.js';
import { type BaseBlockModel, type Page } from '@blocksuite/store';
import { Slot } from '@blocksuite/store';
import type { PropertyValues } from 'lit';
import { LitElement } from 'lit';
import { getCurrentBlockRange } from '../../__internal__/utils/block-range.js';
type CustomElementCreator = (page: Page, getBlockRange: () => ReturnType<typeof getCurrentBlockRange>) => HTMLDivElement;
declare const FormatQuickBar_base: typeof LitElement & (new (...args: any[]) => import("@blocksuite/lit").DisposableClass);
export declare class FormatQuickBar extends FormatQuickBar_base {
    static styles: import("lit").CSSResult;
    static customElements: CustomElementCreator[];
    page: Page;
    left: string | null;
    top: string | null;
    abortController: AbortController;
    positionUpdated: Slot<void>;
    models: BaseBlockModel[];
    private _paragraphType;
    private _paragraphPanelHoverDelay;
    private _paragraphPanelTimer;
    private _showParagraphPanel;
    paragraphPanelMaxHeight: string | null;
    private _format;
    formatQuickBarElement: HTMLElement;
    customItemsElement: HTMLElement;
    private _customElements;
    protected update(changedProperties: PropertyValues): void;
    connectedCallback(): void;
    private _onHover;
    private _onHoverEnd;
    private _selectionChangeHandler;
    render(): import("lit").TemplateResult<1>;
}
declare global {
    interface HTMLElementTagNameMap {
        'format-quick-bar': FormatQuickBar;
    }
}
export {};
//# sourceMappingURL=format-bar-node.d.ts.map