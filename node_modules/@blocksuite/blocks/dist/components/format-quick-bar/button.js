var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { css } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { IconButton } from '../button.js';
/**
 * @deprecated Use {@link IconButton} instead.
 */
let FormatBarButton = class FormatBarButton extends IconButton {
    constructor() {
        super(...arguments);
        this.width = '32px';
        this.height = '32px';
        // TODO update color when active
        this.active = false;
        this._mousedown = (e) => {
            // prevents catching or bubbling in editor-container
            e.stopPropagation();
            // disable default behavior (e.g., change selection focus)
            e.preventDefault();
        };
    }
    connectedCallback() {
        super.connectedCallback();
        this.addEventListener('mousedown', this._mousedown);
    }
    disconnectedCallback() {
        super.disconnectedCallback();
        this.removeEventListener('mousedown', this._mousedown);
    }
};
FormatBarButton.styles = css `
    ${IconButton.styles}

    :host {
      width: var(--button-width);
      height: var(--button-height);
      fill: var(--affine-icon-color);
      white-space: nowrap;
      user-select: none;
      gap: 8px;
    }
  `;
__decorate([
    property()
], FormatBarButton.prototype, "width", void 0);
__decorate([
    property()
], FormatBarButton.prototype, "height", void 0);
__decorate([
    property()
], FormatBarButton.prototype, "active", void 0);
FormatBarButton = __decorate([
    customElement('format-bar-button')
], FormatBarButton);
export { FormatBarButton };
//# sourceMappingURL=button.js.map