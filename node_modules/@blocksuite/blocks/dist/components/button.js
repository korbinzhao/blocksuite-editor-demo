var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { css, html, LitElement } from 'lit';
import { customElement, property } from 'lit/decorators.js';
/**
 * @example
 * ```ts
 * html`<icon-button class="has-tool-tip" @click=${this.onUnlink}>
 *   ${UnlinkIcon}
 * </icon-button>`
 * ```
 */
let IconButton = class IconButton extends LitElement {
    constructor() {
        super();
        this.size = null;
        this.width = '28px';
        this.height = '28px';
        this.text = null;
        this.disabled = false;
        this.addEventListener('keypress', event => {
            if (this.disabled) {
                return;
            }
            if (event.key === 'Enter') {
                this.click();
            }
        });
        // Prevent click event when disabled
        this.addEventListener('click', event => {
            if (this.disabled === '') {
                event.preventDefault();
                event.stopPropagation();
            }
        }, { capture: true });
    }
    connectedCallback() {
        super.connectedCallback();
        this.tabIndex = 0;
        if (this.size && (this.width || this.height)) {
            throw new Error('Cannot set both size and width/height on an icon-button');
        }
        let width = this.width;
        let height = this.height;
        if (this.size) {
            width = this.size;
            height = this.size;
        }
        this.style.setProperty('--button-width', typeof width === 'string' ? width : `${width}px`);
        this.style.setProperty('--button-height', typeof height === 'string' ? height : `${height}px`);
    }
    render() {
        return html `<slot></slot>${this.text
            ? html `<span>${this.text}</span>`
            : ''}<slot name="optional"></slot> `;
    }
};
IconButton.styles = css `
    :host {
      box-sizing: border-box;
      display: flex;
      justify-content: center;
      align-items: center;
      border: none;
      width: var(--button-width);
      height: var(--button-height);
      border-radius: 5px;
      background: transparent;
      cursor: pointer;
      user-select: none;
      font-family: var(--affine-font-family);
      fill: var(--affine-icon-color);
      color: var(--affine-popover-color);
      pointer-events: auto;
    }

    :host > span {
      white-space: nowrap;
      text-overflow: ellipsis;
      overflow: hidden;
    }

    :host(:hover) {
      background: var(--affine-hover-color);
      fill: var(--affine-primary-color);
      color: var(--affine-primary-color);
    }

    :host(:active) {
      background: transparent;
      fill: var(--affine-primary-color);
      color: var(--affine-primary-color);
    }

    :host([disabled]),
    :host(:disabled) {
      background: transparent;
      color: var(--affine-text-disable-color);
      fill: var(--affine-text-disable-color);
      cursor: not-allowed;
    }

    /* You can add a 'hover' attribute to the button to show the hover style */
    :host([hover]) {
      background: var(--affine-hover-color);
      fill: var(--affine-primary-color);
      color: var(--affine-primary-color);
    }

    /* You can add a 'active' attribute to the button to revert the active style */
    :host([active]) {
      fill: var(--affine-primary-color);
      color: var(--affine-primary-color);
    }

    :host(:active[active]) {
      background: transparent;
      fill: var(--affine-icon-color);
    }
  `;
__decorate([
    property()
], IconButton.prototype, "size", void 0);
__decorate([
    property()
], IconButton.prototype, "width", void 0);
__decorate([
    property()
], IconButton.prototype, "height", void 0);
__decorate([
    property()
], IconButton.prototype, "text", void 0);
__decorate([
    property()
], IconButton.prototype, "disabled", void 0);
IconButton = __decorate([
    customElement('icon-button')
], IconButton);
export { IconButton };
//# sourceMappingURL=button.js.map