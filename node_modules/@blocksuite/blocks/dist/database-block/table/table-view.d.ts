import './components/column-header/column-header.js';
import './components/cell-container.js';
import './components/toolbar/toolbar.js';
import './components/database-title.js';
import type { BlockSuiteRoot } from '@blocksuite/lit';
import { ShadowlessElement } from '@blocksuite/lit';
import type { DatabaseBlockModel } from '../database-model.js';
declare const DatabaseTable_base: typeof ShadowlessElement & (new (...args: any[]) => import("@blocksuite/lit").DisposableClass);
export declare class DatabaseTable extends DatabaseTable_base {
    flavour: "affine:database";
    static styles: import("lit").CSSResult;
    model: DatabaseBlockModel;
    root: BlockSuiteRoot;
    private _tableContainer;
    private _columnHeaderComponent;
    private _searchState;
    private _filteredRowIds;
    private _hoverState;
    private _rowSelection;
    private _cellSelection;
    private _columnRenderer;
    get columnRenderer(): import("./register.js").ColumnRendererHelper;
    private get columns();
    private get readonly();
    connectedCallback(): void;
    firstUpdated(): void;
    private _updateHoverState;
    disconnectedCallback(): void;
    private _initRowSelectionEvents;
    private _initCellSelectionEvents;
    private _setFilteredRowIds;
    private _setSearchState;
    private _resetSearchState;
    private _resetHoverState;
    private _onDatabaseScroll;
    private _onMouseOver;
    private _onMouseLeave;
    private _onClick;
    private _addRow;
    private _addColumn;
    render(): import("lit").TemplateResult;
}
declare global {
    interface HTMLElementTagNameMap {
        'affine-database-table': DatabaseTable;
    }
}
export {};
//# sourceMappingURL=table-view.d.ts.map