var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { ArrowDownIcon, DatabaseDuplicate, DatabaseInsertLeft, DatabaseInsertRight, DatabaseMoveLeft, DatabaseMoveRight, DeleteIcon, PenIcon, TextIcon, } from '@blocksuite/global/config';
import { createPopper } from '@popperjs/core';
import { html, LitElement } from 'lit';
import { customElement, property, query } from 'lit/decorators.js';
import { isDivider } from '../../../utils.js';
import { ColumnTypePopup } from './column-type-popup.js';
import { styles } from './styles.js';
import { changeColumnType, isTitleColumn, onActionClick } from './utils.js';
const columnActions = [
    {
        type: 'rename',
        text: 'Rename',
        icon: PenIcon,
    },
    {
        type: 'divider',
    },
    {
        type: 'column-type',
        text: 'Column type',
        icon: TextIcon,
    },
    {
        type: 'duplicate',
        text: 'Duplicate column',
        icon: DatabaseDuplicate,
    },
    {
        type: 'insert-left',
        text: 'Insert left column',
        icon: DatabaseInsertLeft,
    },
    {
        type: 'insert-right',
        text: 'Insert right column',
        icon: DatabaseInsertRight,
    },
    {
        type: 'move-left',
        text: 'Move left',
        icon: DatabaseMoveLeft,
    },
    {
        type: 'move-right',
        text: 'Move Right',
        icon: DatabaseMoveRight,
    },
    {
        type: 'divider',
    },
    {
        type: 'delete',
        text: 'Delete column',
        icon: DeleteIcon,
    },
];
const titleColumnActions = [
    {
        type: 'rename',
        text: 'Rename',
        icon: PenIcon,
    },
    {
        type: 'insert-right',
        text: 'Insert right column',
        icon: DatabaseInsertRight,
    },
];
let EditColumnPopup = class EditColumnPopup extends LitElement {
    constructor() {
        super(...arguments);
        this._onShowColumnType = (columnId) => {
            if (this._columnTypePopup)
                return;
            this._columnTypePopup = new ColumnTypePopup();
            this._columnTypePopup.changeColumnType = this._changeColumnType;
            this._columnTypePopup.columnId = columnId;
            if (!isTitleColumn(this.targetColumn)) {
                this._columnTypePopup.columnType = this.targetColumn.type;
            }
            this._container.appendChild(this._columnTypePopup);
            createPopper(this._container, this._columnTypePopup, {
                placement: 'right-start',
                modifiers: [
                    {
                        name: 'offset',
                        options: {
                            offset: [-9, 12],
                        },
                    },
                ],
            });
        };
        this._onHideColumnType = () => {
            if (this._columnTypePopup) {
                this._columnTypePopup?.remove();
                this._columnTypePopup = null;
            }
        };
        this._changeColumnType = (columnId, targetType) => {
            changeColumnType(columnId, targetType, this.targetColumn, this.targetModel, this.columnRenderer);
            this.closePopup();
        };
        this._onActionClick = (actionType, columnId) => {
            onActionClick(actionType, columnId, this.targetModel, this.columnIndex, this.setTitleColumnEditId, this.insertColumn);
            this.closePopup();
        };
        this._renderActions = () => {
            const actions = isTitleColumn(this.targetColumn)
                ? titleColumnActions
                : columnActions;
            return html `
      ${actions.map(action => {
                if (isDivider(action)) {
                    return html `<div class="action-divider"></div>`;
                }
                // boundary
                if ((this.columnIndex === 0 && action.type === 'move-left') ||
                    (this.columnIndex === this.targetModel.columns.length - 1 &&
                        action.type === 'move-right')) {
                    return null;
                }
                const columnId = isTitleColumn(this.targetColumn)
                    ? '-1'
                    : this.targetColumn.id;
                const onMouseOver = isTitleColumn(this.targetColumn)
                    ? undefined
                    : action.type === 'column-type'
                        ? () => this._onShowColumnType(columnId)
                        : this._onHideColumnType;
                return html `
          <div
            class="action ${action.type}"
            @mouseover=${onMouseOver}
            @click=${() => this._onActionClick(action.type, columnId)}
          >
            <div class="action-content">
              ${action.icon}<span>${action.text}</span>
            </div>
            ${action.type === 'column-type' ? ArrowDownIcon : html ``}
          </div>
        `;
            })}
    `;
        };
    }
    render() {
        return html `
      <div class="affine-database-edit-column-popup">
        ${this._renderActions()}
      </div>
    `;
    }
};
EditColumnPopup.styles = styles;
__decorate([
    property()
], EditColumnPopup.prototype, "targetModel", void 0);
__decorate([
    property()
], EditColumnPopup.prototype, "columnRenderer", void 0);
__decorate([
    property()
], EditColumnPopup.prototype, "targetColumn", void 0);
__decorate([
    property()
], EditColumnPopup.prototype, "columnIndex", void 0);
__decorate([
    property()
], EditColumnPopup.prototype, "closePopup", void 0);
__decorate([
    property()
], EditColumnPopup.prototype, "setTitleColumnEditId", void 0);
__decorate([
    property()
], EditColumnPopup.prototype, "insertColumn", void 0);
__decorate([
    query('input')
], EditColumnPopup.prototype, "titleInput", void 0);
__decorate([
    query('.affine-database-edit-column-popup')
], EditColumnPopup.prototype, "_container", void 0);
EditColumnPopup = __decorate([
    customElement('affine-database-edit-column-popup')
], EditColumnPopup);
export { EditColumnPopup };
//# sourceMappingURL=edit-column-popup.js.map