var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { DatabaseDone, DatabaseMultiSelect, DatabaseNumber, DatabaseProgress, DatabaseSelect, TextIcon, TodoIcon, } from '@blocksuite/global/config';
import { css, html, LitElement } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { actionStyles } from './styles.js';
const columnTypes = [
    {
        type: 'rich-text',
        text: 'Text',
        icon: TextIcon,
    },
    {
        type: 'select',
        text: 'Select',
        icon: DatabaseSelect,
    },
    {
        type: 'multi-select',
        text: 'Multi-select',
        icon: DatabaseMultiSelect,
    },
    {
        type: 'number',
        text: 'Number',
        icon: DatabaseNumber,
    },
    {
        type: 'checkbox',
        text: 'Checkbox',
        icon: TodoIcon,
    },
    {
        type: 'progress',
        text: 'Progress',
        icon: DatabaseProgress,
    },
];
const styles = css `
  :host {
    z-index: 1;
    width: 200px;
    padding: 8px;
    border: 1px solid var(--affine-border-color);
    border-radius: 8px;
    background: var(--affine-background-primary-color);
    box-shadow: var(--affine-menu-shadow);
    font-family: var(--affine-font-family);
  }
  ${actionStyles}
  .action > svg {
    width: 16px;
    height: 16px;
  }

  .rich-text {
    fill: var(--affine-icon-color);
  }
  .column-type {
    padding: 0;
    color: var(--affine-text-secondary-color);
    font-size: 14px;
    cursor: unset;
  }
  .column-type:hover {
    background: none;
  }
  .selected {
    color: var(--affine-text-emphasis-color);
    background: rgba(0, 0, 0, 0.02);
  }
  .selected svg {
    color: var(--affine-text-emphasis-color);
  }
  .selected.rich-text svg {
    fill: var(--affine-text-emphasis-color);
  }
  /* .action.disabled {
    cursor: not-allowed;
  }
  .action.disabled:hover {
    background: unset;
  } */
`;
let ColumnTypePopup = class ColumnTypePopup extends LitElement {
    render() {
        return html `
      <div class="affine-database-column-type-popup">
        <div class="action column-type">
          <div class="action-content"><span>Column type</span></div>
        </div>
        <div class="action-divider"></div>
        ${columnTypes.map(column => {
            const selected = column.type === this.columnType;
            const onChangeColumnType = () => {
                if (!selected) {
                    this.changeColumnType(this.columnId, column.type);
                }
            };
            return html `
            <div
              class="action ${column.type} ${selected ? 'selected' : ''}"
              @click=${onChangeColumnType}
            >
              <div class="action-content">
                ${column.icon}<span>${column.text}</span>
              </div>
              ${selected ? DatabaseDone : null}
            </div>
          `;
        })}
      </div>
    `;
    }
};
ColumnTypePopup.styles = styles;
__decorate([
    property()
], ColumnTypePopup.prototype, "columnType", void 0);
__decorate([
    property()
], ColumnTypePopup.prototype, "columnId", void 0);
__decorate([
    property()
], ColumnTypePopup.prototype, "changeColumnType", void 0);
ColumnTypePopup = __decorate([
    customElement('affine-database-column-type-popup')
], ColumnTypePopup);
export { ColumnTypePopup };
//# sourceMappingURL=column-type-popup.js.map