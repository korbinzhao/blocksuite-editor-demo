import { assertExists } from '@blocksuite/store';
import { ColumnInsertPosition } from '../../types.js';
export function changeColumnType(columnId, targetType, targetColumn, targetModel, columnRenderer) {
    if (isTitleColumn(targetColumn))
        return;
    const currentType = targetColumn.type;
    targetModel.page.captureSync();
    // select -> multi-select
    if (currentType === 'select' && targetType === 'multi-select') {
        updateColumn(columnId, { type: targetType }, targetModel);
    }
    // multi-select -> select
    else if (currentType === 'multi-select' && targetType === 'select') {
        updateColumn(columnId, { type: targetType }, targetModel);
        targetModel.convertCellsByColumn(columnId, 'select');
    }
    // number -> rich-text
    else if (currentType === 'number' && targetType === 'rich-text') {
        updateColumn(columnId, { type: targetType }, targetModel);
        targetModel.convertCellsByColumn(columnId, 'rich-text');
    }
    else {
        // incompatible types: clear the value of the column
        const renderer = columnRenderer.get(targetType);
        updateColumn(columnId, {
            ...renderer.propertyCreator(),
            type: targetType,
        }, targetModel);
        targetModel.deleteCellsByColumn(columnId);
    }
}
export function onActionClick(actionType, columnId, targetModel, columnIndex, setTitleColumnEditId, insertColumn) {
    if (actionType === 'rename') {
        setTitleColumnEditId(columnId);
        return;
    }
    if (actionType === 'insert-right' || actionType === 'insert-left') {
        if (actionType === 'insert-right') {
            insertColumn(ColumnInsertPosition.Right);
        }
        else {
            insertColumn(ColumnInsertPosition.Left);
        }
        return;
    }
    if (actionType === 'delete') {
        targetModel.page.captureSync();
        targetModel.deleteColumn(columnId);
        targetModel.deleteCellsByColumn(columnId);
        targetModel.applyColumnUpdate();
        return;
    }
    if (actionType === 'move-left' || actionType === 'move-right') {
        const targetIndex = actionType === 'move-left' ? columnIndex - 1 : columnIndex + 1;
        targetModel.page.captureSync();
        targetModel.moveColumn(columnIndex, targetIndex);
        targetModel.applyColumnUpdate();
        return;
    }
    if (actionType === 'duplicate') {
        // TODO: rich text copy throws, check reason
        targetModel.page.captureSync();
        const currentSchema = targetModel.getColumn(columnId);
        assertExists(currentSchema);
        const { id: copyId, ...nonIdProps } = currentSchema;
        const schema = { ...nonIdProps };
        const id = targetModel.addColumn(schema, columnIndex + 1);
        targetModel.applyColumnUpdate();
        targetModel.copyCellsByColumn(copyId, id);
        return;
    }
}
export function updateColumn(columnId, schemaProperties, targetModel) {
    const currentSchema = targetModel.getColumn(columnId);
    assertExists(currentSchema);
    const schema = { ...currentSchema, ...schemaProperties };
    targetModel.updateColumn(schema);
}
export function isTitleColumn(column) {
    return typeof column === 'string';
}
//# sourceMappingURL=utils.js.map