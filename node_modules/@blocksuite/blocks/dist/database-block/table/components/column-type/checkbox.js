var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { css, html } from 'lit';
import { customElement } from 'lit/decorators.js';
import { literal } from 'lit/static-html.js';
import { checkboxChecked, checkboxUnchecked, } from '../../../../list-block/utils/icons.js';
import { DatabaseCellElement, defineColumnRenderer, } from '../../register.js';
let CheckboxCell = class CheckboxCell extends DatabaseCellElement {
    constructor() {
        super(...arguments);
        this.cellType = 'checkbox';
    }
    firstUpdated() {
        this._disposables.addFromEvent(this, 'click', this._onChange);
    }
    _onChange() {
        const checked = !this.cell?.value;
        this.rowHost.setValue(checked);
    }
    render() {
        const checked = this.cell?.value ?? false;
        const icon = checked ? checkboxChecked() : checkboxUnchecked();
        return html `<div class="affine-database-checkbox-container">
      <div class="affine-database-checkbox checkbox ${checked && 'checked'}">
        ${icon}
      </div>
    </div>`;
    }
};
CheckboxCell.tag = literal `affine-database-checkbox-cell`;
CheckboxCell.styles = css `
    affine-database-checkbox-cell {
      display: block;
      width: 100%;
      height: 100%;
      cursor: pointer;
    }

    .affine-database-checkbox-container {
      height: 100%;
    }

    .affine-database-checkbox {
      display: flex;
      align-items: center;
      height: 100%;
      width: 100%;
    }
  `;
CheckboxCell = __decorate([
    customElement('affine-database-checkbox-cell')
], CheckboxCell);
export const CheckboxColumnRenderer = defineColumnRenderer('checkbox', () => ({}), () => false, {
    Cell: CheckboxCell,
    CellEditing: null,
}, {
    displayName: 'Checkbox',
});
//# sourceMappingURL=checkbox.js.map