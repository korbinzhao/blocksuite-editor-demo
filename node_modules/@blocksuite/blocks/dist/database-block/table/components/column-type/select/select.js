var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { css } from 'lit';
import { customElement } from 'lit/decorators.js';
import { styleMap } from 'lit/directives/style-map.js';
import { html, literal } from 'lit/static-html.js';
import { DatabaseCellElement, defineColumnRenderer, } from '../../../register.js';
import { SelectCellEditing } from './select-cell-editing.js';
let SelectCell = class SelectCell extends DatabaseCellElement {
    constructor() {
        super(...arguments);
        this.cellType = 'select';
    }
    render() {
        const values = this.cell?.value ?? [];
        return html `
      <div
        class="affine-database-select-cell-container"
        style=${styleMap({
            maxWidth: `${this.column.width}px`,
        })}
      >
        ${values.map(item => {
            const style = styleMap({
                backgroundColor: item.color,
            });
            return html `<span class="select-selected" style=${style}
            >${item.value}</span
          >`;
        })}
      </div>
    `;
    }
};
SelectCell.styles = css `
    affine-database-select-cell {
      display: flex;
      align-items: center;
      width: calc(100% + 8px);
      height: 100%;
      margin: -2px -4px;
    }
    .affine-database-select-cell-container * {
      box-sizing: border-box;
    }
    .affine-database-select-cell-container {
      display: flex;
      align-items: center;
      flex-wrap: wrap;
      gap: 6px;
      width: 100%;
      cursor: pointer;
      font-size: var(--affine-font-sm);
    }
    .affine-database-select-cell-container .select-selected {
      height: 28px;
      padding: 2px 10px;
      border-radius: 4px;
      white-space: nowrap;
      background: var(--affine-tag-white);
    }
  `;
SelectCell.tag = literal `affine-database-select-cell`;
SelectCell = __decorate([
    customElement('affine-database-select-cell')
], SelectCell);
export const SelectColumnRenderer = defineColumnRenderer('select', () => ({
    selection: [],
}), () => [], {
    Cell: SelectCell,
    CellEditing: SelectCellEditing,
}, {
    displayName: 'Select',
});
//# sourceMappingURL=select.js.map