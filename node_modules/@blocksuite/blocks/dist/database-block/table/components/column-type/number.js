var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { assertExists } from '@blocksuite/store';
import { css, html } from 'lit';
import { customElement, query } from 'lit/decorators.js';
import { literal } from 'lit/static-html.js';
import { setupVirgoScroll } from '../../../../__internal__/utils/virgo.js';
import { VirgoInput } from '../../../../components/virgo-input/virgo-input.js';
import { DatabaseCellElement, defineColumnRenderer, } from '../../register.js';
let NumberCellEditing = class NumberCellEditing extends DatabaseCellElement {
    constructor() {
        super(...arguments);
        this.cellType = 'number';
        this._vInput = null;
        this._onClick = () => {
            this.databaseModel.page.captureSync();
        };
        this._onInitVEditor = () => {
            let value;
            if (!this.cell?.value) {
                const yText = new this.databaseModel.page.YText('');
                this.databaseModel.updateCell(this.rowModel.id, {
                    columnId: this.column.id,
                    value: yText,
                });
                value = yText;
            }
            else {
                value = this.cell.value;
            }
            this._vInput = new VirgoInput({
                yText: value,
                rootElement: this._container,
                type: 'number',
            });
            setupVirgoScroll(this.databaseModel.page, this.vEditor);
            this._container.addEventListener('keydown', event => {
                if (!this._vInput)
                    return;
                if (event.key === 'Enter') {
                    if (event.shiftKey) {
                        // soft enter
                    }
                    else {
                        // exit editing
                        this.rowHost.setEditing(false);
                        this._container.blur();
                    }
                    event.preventDefault();
                    return;
                }
            });
        };
    }
    get vEditor() {
        assertExists(this._vInput);
        return this._vInput.vEditor;
    }
    firstUpdated() {
        this._disposables.addFromEvent(this, 'click', this._onClick);
        this._onInitVEditor();
    }
    render() {
        return html `<div class="affine-database-number number virgo-editor"></div>`;
    }
};
NumberCellEditing.styles = css `
    affine-database-number-cell-editing {
      display: block;
      width: 100%;
      height: 100%;
      cursor: text;
    }

    .affine-database-number {
      display: flex;
      align-items: center;
      height: 100%;
    }
    .affine-database-number:focus {
      outline: none;
    }
    .affine-database-number v-line {
      display: flex !important;
      align-items: center;
      height: 100%;
      width: 100%;
    }
    .affine-database-number v-line > div {
      flex-grow: 1;
    }
  `;
NumberCellEditing.tag = literal `affine-database-number-cell-editing`;
__decorate([
    query('.affine-database-number')
], NumberCellEditing.prototype, "_container", void 0);
NumberCellEditing = __decorate([
    customElement('affine-database-number-cell-editing')
], NumberCellEditing);
export { NumberCellEditing };
export const NumberColumnRenderer = defineColumnRenderer('number', () => ({
    decimal: 0,
}), page => new page.YText(''), {
    Cell: NumberCellEditing,
    CellEditing: null,
}, {
    displayName: 'Number',
});
//# sourceMappingURL=number.js.map