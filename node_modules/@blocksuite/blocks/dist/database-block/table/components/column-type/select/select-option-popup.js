var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { DeleteIcon, PenIcon } from '@blocksuite/global/config';
import { css, html, LitElement } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { isDivider } from '../../../../utils.js';
import { actionStyles } from '../../edit-column-popup/styles.js';
const tagActions = [
    {
        type: 'rename',
        text: 'Rename',
        icon: PenIcon,
    },
    {
        type: 'divider',
    },
    {
        type: 'delete',
        text: 'Delete',
        icon: DeleteIcon,
    },
];
let SelectActionPopup = class SelectActionPopup extends LitElement {
    constructor() {
        super(...arguments);
        this._onAction = (e, type) => {
            e.stopPropagation();
            this.onAction(type, this.index);
            this.onClose();
        };
    }
    render() {
        return html `
      <div class="affine-database-select-action">
        ${tagActions.map(action => {
            if (isDivider(action))
                return html `<div class="action-divider"></div>`;
            return html `
            <div
              class="action ${action.type}"
              @mousedown=${(e) => this._onAction(e, action.type)}
            >
              <div class="action-content">
                ${action.icon}<span>${action.text}</span>
              </div>
            </div>
          `;
        })}
      </div>
    `;
    }
};
SelectActionPopup.styles = css `
    :host {
      z-index: 11;
    }
    .affine-database-select-action {
      width: 200px;
      padding: 8px;
      border: 1px solid var(--affine-border-color);
      border-radius: 8px;
      background: var(--affine-white);
      box-shadow: var(--affine-menu-shadow);
    }
    ${actionStyles}
    .action {
      color: var(--affine-text-primary-color);
    }
    .action svg {
      width: 20px;
      height: 20px;
    }
    .rename,
    .delete {
      fill: var(--affine-icon-color);
    }
  `;
__decorate([
    property()
], SelectActionPopup.prototype, "index", void 0);
__decorate([
    property()
], SelectActionPopup.prototype, "onAction", void 0);
__decorate([
    property()
], SelectActionPopup.prototype, "onClose", void 0);
SelectActionPopup = __decorate([
    customElement('affine-database-select-action-popup')
], SelectActionPopup);
export { SelectActionPopup };
//# sourceMappingURL=select-option-popup.js.map