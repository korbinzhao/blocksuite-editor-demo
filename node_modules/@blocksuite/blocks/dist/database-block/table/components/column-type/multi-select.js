var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { css } from 'lit';
import { customElement } from 'lit/decorators.js';
import { html, literal } from 'lit/static-html.js';
import { DatabaseCellElement, defineColumnRenderer, } from '../../register.js';
import { SelectMode } from '../../types.js';
let MultiSelectCell = class MultiSelectCell extends DatabaseCellElement {
    constructor() {
        super(...arguments);
        this.cellType = 'multi-select';
    }
    render() {
        return html `
      <affine-database-select-cell
        .rowHost=${this.rowHost}
        .databaseModel=${this.databaseModel}
        .rowModel=${this.rowModel}
        .column=${this.column}
        .cell=${this.cell}
      ></affine-database-select-cell>
    `;
    }
};
MultiSelectCell.styles = css `
    :host {
      width: 100%;
    }
  `;
MultiSelectCell.tag = literal `affine-database-multi-select-cell`;
MultiSelectCell = __decorate([
    customElement('affine-database-multi-select-cell')
], MultiSelectCell);
let MultiSelectCellEditing = class MultiSelectCellEditing extends DatabaseCellElement {
    constructor() {
        super(...arguments);
        this.cellType = 'multi-select';
    }
    render() {
        return html `
      <affine-database-select-cell-editing
        data-is-editing-cell="true"
        .rowHost=${this.rowHost}
        .databaseModel=${this.databaseModel}
        .rowModel=${this.rowModel}
        .column=${this.column}
        .cell=${this.cell}
        .mode=${SelectMode.Multi}
      ></affine-database-select-cell-editing>
    `;
    }
};
MultiSelectCellEditing.tag = literal `affine-database-multi-select-cell-editing`;
MultiSelectCellEditing = __decorate([
    customElement('affine-database-multi-select-cell-editing')
], MultiSelectCellEditing);
export const MultiSelectColumnRenderer = defineColumnRenderer('multi-select', () => ({
    selection: [],
}), () => [], {
    Cell: MultiSelectCell,
    CellEditing: MultiSelectCellEditing,
}, {
    displayName: 'Multi Select',
});
//# sourceMappingURL=multi-select.js.map