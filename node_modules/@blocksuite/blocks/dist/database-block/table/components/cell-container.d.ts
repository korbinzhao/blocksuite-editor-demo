import type { ColumnRendererHelper } from '../register.js';
import { DatabaseCellElement } from '../register.js';
import type { RowHost, SetValueOption } from '../types.js';
export declare class DatabaseCellContainer extends DatabaseCellElement<unknown> implements RowHost {
    static styles: import("lit").CSSResult;
    private _isEditing;
    columnRenderer: ColumnRendererHelper;
    private get readonly();
    connectedCallback(): void;
    protected firstUpdated(): void;
    private _onClick;
    setValue(value: unknown, option?: SetValueOption): void;
    setEditing: (isEditing: boolean) => void;
    updateColumnProperty(apply: (oldProperty: Record<string, unknown>) => Record<string, unknown>): void;
    setHeight: (height: number) => void;
    render(): import("lit").TemplateResult;
}
declare global {
    interface HTMLElementTagNameMap {
        'affine-database-cell-container': DatabaseCellContainer;
    }
}
//# sourceMappingURL=cell-container.d.ts.map