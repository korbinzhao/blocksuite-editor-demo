var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { PlusIcon } from '@blocksuite/global/config';
import { ShadowlessElement } from '@blocksuite/lit';
import { DisposableGroup } from '@blocksuite/store';
import { assertExists } from '@blocksuite/store';
import { html } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { Point, Rect } from '../../../../std.js';
let NewRecordPreview = class NewRecordPreview extends ShadowlessElement {
    constructor() {
        super(...arguments);
        this.offset = { x: 0, y: 0 };
    }
    render() {
        return html `
      <style>
        affine-database-new-record-preview {
          display: flex;
          align-items: center;
          justify-content: center;
          position: fixed;
          top: 0;
          left: 0;
          height: 32px;
          width: 32px;
          border: 1px solid var(--affine-border-color);
          border-radius: 50%;
          background: linear-gradient(
              0deg,
              rgba(96, 70, 254, 0.3),
              rgba(96, 70, 254, 0.3)
            ),
            linear-gradient(
              0deg,
              var(--affine-hover-color),
              var(--affine-hover-color)
            ),
            var(--affine-white);
          box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.05),
            0px 0px 0px 0.5px var(--affine-black-10);
          cursor: none;
          user-select: none;
          pointer-events: none;
          caret-color: transparent;
          z-index: 100;
        }
        affine-database-new-record-preview svg {
          width: 16px;
          height: 16px;
        }
        affine-database-new-record-preview path {
          fill: var(--affine-brand-color);
        }
      </style>
      ${PlusIcon}
    `;
    }
};
__decorate([
    property()
], NewRecordPreview.prototype, "offset", void 0);
NewRecordPreview = __decorate([
    customElement('affine-database-new-record-preview')
], NewRecordPreview);
export function initAddNewRecordHandlers(element, container, addRow) {
    let dragConfig = null;
    let dragPreview = null;
    const database = container.closest('affine-database');
    if (!database)
        return;
    const rowContainer = database.querySelector('.affine-database-block-rows');
    assertExists(rowContainer);
    const indicator = document.querySelector('affine-drag-indicator');
    if (!indicator) {
        const indicator = (document.createElement('affine-drag-indicator'));
        document.body.appendChild(indicator);
    }
    const onDragStart = (event) => {
        event.stopPropagation();
        assertExists(event.dataTransfer);
        event.dataTransfer.effectAllowed = 'move';
        dragPreview = new NewRecordPreview();
        dragPreview.style.opacity = '0';
        event.dataTransfer?.setDragImage(dragPreview, 0, 0);
        container.appendChild(dragPreview);
        const rows = Array.from(rowContainer.querySelectorAll('.affine-database-block-row'));
        dragConfig = {
            index: -1,
            rows,
        };
    };
    const onDrag = (event) => {
        if (!dragConfig)
            return;
        if (!dragPreview)
            return;
        if (dragPreview.style.opacity !== '1') {
            dragPreview.style.opacity = '1';
        }
        const x = event.clientX;
        const y = event.clientY;
        dragPreview.style.transform = `translate(${x}px, ${y}px)`;
        const point = new Point(x, y);
        const row = getClosestRow(point, dragConfig.rows);
        assertExists(indicator);
        if (row) {
            const { top, bottom } = row.element.getBoundingClientRect();
            const rectTop = row.isLast ? bottom : top;
            const { width: databaseWidth, left: databaseLeft } = database.getBoundingClientRect();
            indicator.rect = Rect.fromLWTH(databaseLeft, databaseWidth, rectTop, 3);
            dragConfig.index = row.insertRowIndex;
        }
        else {
            indicator.rect = null;
            dragConfig.index = -1;
        }
    };
    const onDragEnd = () => {
        if (!dragConfig)
            return;
        const { index } = dragConfig;
        // clear data
        dragConfig = null;
        if (indicator)
            indicator.rect = null;
        if (dragPreview) {
            dragPreview.remove();
            dragPreview = null;
        }
        if (index !== -1) {
            addRow(index);
        }
    };
    const disposables = new DisposableGroup();
    const stopPropagation = (e) => {
        e.stopPropagation();
    };
    disposables.addFromEvent(element, 'pointerdown', stopPropagation);
    disposables.addFromEvent(element, 'pointermove', stopPropagation);
    disposables.addFromEvent(element, 'pointerup', stopPropagation);
    disposables.addFromEvent(element, 'dragstart', onDragStart);
    disposables.addFromEvent(element, 'drag', onDrag);
    disposables.addFromEvent(element, 'dragend', onDragEnd);
    return disposables;
}
function getClosestRow(point, rows) {
    const length = rows.length;
    for (let i = 0; i < length; i++) {
        const row = rows[i];
        const { top, bottom } = row.getBoundingClientRect();
        if (point.y <= top + 20 && point.y >= top - 20) {
            return {
                element: row,
                insertRowIndex: i,
                isLast: false,
            };
        }
        // last row
        if (i === length - 1) {
            if (point.y >= bottom - 20 && point.y <= bottom + 20) {
                return {
                    element: row,
                    insertRowIndex: i + 1,
                    isLast: true,
                };
            }
        }
    }
    return null;
}
//# sourceMappingURL=index.js.map