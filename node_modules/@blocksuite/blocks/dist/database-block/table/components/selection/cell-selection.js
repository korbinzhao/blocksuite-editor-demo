var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { WithDisposable } from '@blocksuite/lit';
import { css, html, LitElement } from 'lit';
import { customElement, property, state } from 'lit/decorators.js';
import { styleMap } from 'lit/directives/style-map.js';
import { getCellSelectionRectByCoords, getRowsContainer } from './utils.js';
let CellLevelSelection = class CellLevelSelection extends WithDisposable(LitElement) {
    constructor() {
        super(...arguments);
        this.state = null;
        this.setSelection = (state) => {
            this.state = state;
        };
        this.clearSelection = () => {
            this.state = null;
        };
        this._getStyles = () => {
            if (this.state === null) {
                // Hide selection.
                return styleMap({
                    left: 0,
                    top: 0,
                    height: 0,
                    width: 0,
                    display: 'none',
                });
            }
            const { databaseId, coords } = this.state;
            const { left, top, width, height } = getCellSelectionRectByCoords(coords, databaseId);
            const rowsContainer = getRowsContainer(databaseId);
            const containerRect = rowsContainer.getBoundingClientRect();
            const scale = 1 / this._zoom;
            const scaledLeft = (left - containerRect.left) * scale;
            const scaledTop = (top - containerRect.top) * scale;
            const scaledWidth = width * scale;
            const scaledHeight = height * scale;
            return styleMap({
                left: `${scaledLeft}px`,
                top: `${scaledTop}px`,
                height: `${scaledHeight}px`,
                width: `${scaledWidth}px`,
                display: 'block',
            });
        };
    }
    get _zoom() {
        const edgelessPageBlock = document.querySelector('affine-edgeless-page');
        if (!edgelessPageBlock)
            return 1;
        return edgelessPageBlock.surface.viewport.zoom;
    }
    render() {
        const styles = this._getStyles();
        return html `<div
      class="database-cell-level-selection"
      style=${styles}
    ></div>`;
    }
};
CellLevelSelection.styles = css `
    .database-cell-level-selection {
      position: absolute;
      width: 100%;
      z-index: 1;
      box-sizing: border-box;
      border: 2px solid var(--affine-primary-color);
      border-radius: 2px;
      background: var(--affine-primary-color-04);
    }
  `;
__decorate([
    property()
], CellLevelSelection.prototype, "cell", void 0);
__decorate([
    state()
], CellLevelSelection.prototype, "state", void 0);
CellLevelSelection = __decorate([
    customElement('database-cell-level-selection')
], CellLevelSelection);
export { CellLevelSelection };
//# sourceMappingURL=cell-selection.js.map