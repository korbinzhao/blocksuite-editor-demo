var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { WithDisposable } from '@blocksuite/lit';
import { css, html, LitElement } from 'lit';
import { customElement, property, state } from 'lit/decorators.js';
import { styleMap } from 'lit/directives/style-map.js';
let RowLevelSelection = class RowLevelSelection extends WithDisposable(LitElement) {
    constructor() {
        super(...arguments);
        this.state = null;
        this.setSelection = ({ databaseId, rowIds }) => {
            this.state = {
                databaseId,
                rowIds,
            };
        };
        this.clearSelection = () => {
            this.state = null;
        };
        this._getStyles = () => {
            const hideStyles = styleMap({
                left: 0,
                top: 0,
                height: 0,
                display: 'none',
            });
            if (!this.state)
                return hideStyles;
            const { rowIds } = this.state;
            const { startRow, endRow } = getRowsByIds(this.container, {
                startRowId: rowIds[0],
                endRowId: rowIds[rowIds.length - 1],
            });
            if (!startRow || !endRow)
                return hideStyles;
            const containerPos = this.container.getBoundingClientRect();
            const { left, top } = startRow.getBoundingClientRect();
            const scale = 1 / this._zoom;
            const scaledHeight = calcSelectionHeight(this.container, rowIds) * scale;
            const scaledLeft = (left - containerPos.left) * scale;
            const scaledTop = (top - containerPos.top) * scale;
            const styles = styleMap({
                left: `${scaledLeft}px`,
                top: `${scaledTop}px`,
                height: `${scaledHeight}px`,
            });
            return styles;
        };
    }
    get _zoom() {
        const edgelessPageBlock = document.querySelector('affine-edgeless-page');
        if (!edgelessPageBlock)
            return 1;
        return edgelessPageBlock.surface.viewport.zoom;
    }
    render() {
        const styles = this._getStyles();
        return html `<div
      class="database-row-level-selection"
      style=${styles}
    ></div>`;
    }
};
RowLevelSelection.styles = css `
    .database-row-level-selection {
      position: absolute;
      z-index: 1;
      box-sizing: border-box;
      width: 100%;
      border: 2px solid var(--affine-primary-color);
      border-radius: 2px;
      background: var(--affine-primary-color-04);
    }
  `;
__decorate([
    property()
], RowLevelSelection.prototype, "container", void 0);
__decorate([
    state()
], RowLevelSelection.prototype, "state", void 0);
RowLevelSelection = __decorate([
    customElement('database-row-level-selection')
], RowLevelSelection);
export { RowLevelSelection };
function getRowsByIds(container, { startRowId, endRowId }) {
    const startRow = container.querySelector(`.database-row[data-row-id="${startRowId}"]`);
    const endRow = container.querySelector(`.database-row[data-row-id="${endRowId}"]`);
    return {
        startRow,
        endRow,
    };
}
function calcSelectionHeight(container, rowIds) {
    return rowIds.reduce((acc, rowId) => {
        const row = container.querySelector(`.database-row[data-row-id="${rowId}"]`);
        if (!row) {
            return acc;
        }
        const { height } = row.getBoundingClientRect();
        return acc + height;
    }, 0);
}
//# sourceMappingURL=row-selection.js.map