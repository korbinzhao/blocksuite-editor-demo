var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { css } from 'lit';
import { customElement, property, state } from 'lit/decorators.js';
import { html } from 'lit/static-html.js';
import { onClickOutside } from '../../utils.js';
import { DatabaseCellElement } from '../register.js';
/** affine-database-cell-container padding */
const CELL_PADDING = 8;
let DatabaseCellContainer = class DatabaseCellContainer extends DatabaseCellElement {
    constructor() {
        super(...arguments);
        this._isEditing = false;
        this._onClick = (event) => {
            if (this.readonly)
                return;
            this._isEditing = true;
            this.removeEventListener('click', this._onClick);
            setTimeout(() => {
                onClickOutside(this, () => {
                    this.addEventListener('click', this._onClick);
                    this._isEditing = false;
                }, 'mousedown');
            });
        };
        this.setEditing = (isEditing) => {
            this._isEditing = isEditing;
            if (!this._isEditing) {
                setTimeout(() => {
                    this.addEventListener('click', this._onClick);
                });
            }
        };
        this.setHeight = (height) => {
            this.style.height = `${height + CELL_PADDING * 2}px`;
        };
    }
    get readonly() {
        return this.databaseModel.page.readonly;
    }
    connectedCallback() {
        super.connectedCallback();
        const disposables = this._disposables;
        disposables.addFromEvent(this, 'click', this._onClick);
    }
    firstUpdated() {
        this.setAttribute('data-block-is-database-input', 'true');
        this.setAttribute('data-row-id', this.rowModel.id);
        this.setAttribute('data-column-id', this.column.id);
    }
    setValue(value, option = { captureSync: true }) {
        queueMicrotask(() => {
            if (option.captureSync) {
                this.databaseModel.page.captureSync();
            }
            this.databaseModel.updateCell(this.rowModel.id, {
                columnId: this.column.id,
                value,
            });
            this.databaseModel.applyColumnUpdate();
            this.requestUpdate();
        });
    }
    updateColumnProperty(apply) {
        const newProperty = apply(this.column);
        this.databaseModel.page.captureSync();
        this.databaseModel.updateColumn({
            ...this.column,
            ...newProperty,
        });
    }
    /* eslint-disable lit/binding-positions, lit/no-invalid-html */
    render() {
        const renderer = this.columnRenderer.get(this.column.type);
        const cell = this.databaseModel.getCell(this.rowModel.id, this.column.id);
        if (!this.readonly &&
            this._isEditing &&
            renderer.components.CellEditing !== null) {
            const editingTag = renderer.components.CellEditing.tag;
            return html `
        <${editingTag}
          data-is-editing-cell="true"
          .rowHost=${this}
          .databaseModel=${this.databaseModel}
          .rowModel=${this.rowModel}
          .column=${this.column}
          .cell=${cell}
        ></${editingTag}>
      `;
        }
        const previewTag = renderer.components.Cell.tag;
        return html `
      <${previewTag}
        .rowHost=${this}
        .databaseModel=${this.databaseModel}
        .rowModel=${this.rowModel}
        .column=${this.column}
        .cell=${cell}
      ></${previewTag}>
    `;
    }
};
DatabaseCellContainer.styles = css `
    affine-database-cell-container {
      display: flex;
      align-items: center;
      width: 100%;
      height: 100%;
      padding: 0 ${CELL_PADDING}px;
      border-right: 1px solid var(--affine-border-color);
    }

    affine-database-cell-container * {
      box-sizing: border-box;
    }
  `;
__decorate([
    state()
], DatabaseCellContainer.prototype, "_isEditing", void 0);
__decorate([
    property()
], DatabaseCellContainer.prototype, "columnRenderer", void 0);
DatabaseCellContainer = __decorate([
    customElement('affine-database-cell-container')
], DatabaseCellContainer);
export { DatabaseCellContainer };
//# sourceMappingURL=cell-container.js.map