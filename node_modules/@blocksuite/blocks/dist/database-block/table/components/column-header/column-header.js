var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { DatabaseAddColumn, DatabaseDone, DatabaseDragIcon, DatabaseMultiSelect, DatabaseNumber, DatabaseProgress, DatabaseSelect, PenIcon, TextIcon, TodoIcon, } from '@blocksuite/global/config';
import { assertExists, DisposableGroup } from '@blocksuite/global/utils';
import { ShadowlessElement, WithDisposable } from '@blocksuite/lit';
import { createPopper } from '@popperjs/core';
import { customElement, property, query, state } from 'lit/decorators.js';
import { repeat } from 'lit/directives/repeat.js';
import { styleMap } from 'lit/directives/style-map.js';
import { html } from 'lit/static-html.js';
import { getDefaultPage } from '../../../../__internal__/index.js';
import { onClickOutside } from '../../../utils.js';
import { DEFAULT_COLUMN_TITLE_HEIGHT } from '../../consts.js';
import { ColumnInsertPosition } from '../../types.js';
import { ColumnTypePopup } from '../edit-column-popup/column-type-popup.js';
import { EditColumnPopup } from '../edit-column-popup/edit-column-popup.js';
import { changeColumnType } from '../edit-column-popup/utils.js';
import { initMoveColumnHandlers } from './column-move/index.js';
import { initChangeColumnWidthHandlers } from './column-width/index.js';
import { styles } from './styles.js';
const columnTypeIconMap = {
    select: DatabaseSelect,
    number: DatabaseNumber,
    checkbox: TodoIcon,
    progress: DatabaseProgress,
    'rich-text': TextIcon,
    'multi-select': DatabaseMultiSelect,
};
let DatabaseColumnHeader = class DatabaseColumnHeader extends WithDisposable(ShadowlessElement) {
    constructor() {
        super(...arguments);
        this._editingColumnId = '';
        this._changingColumnTypeId = '';
        this._widthChangingIndex = -1;
        this._columnWidthDisposables = new DisposableGroup();
        this._columnMoveDisposables = new DisposableGroup();
        this._isHeaderHover = false;
        this._indicator = null;
        this._editingColumnPopupIndex = -1;
        this.setEditingColumnId = (id) => {
            this._editingColumnId = id;
        };
        this.showAddColumnButton = (event) => {
            const databaseElement = this.closest('affine-database');
            assertExists(databaseElement);
            const { right: boundaryRight } = databaseElement.getBoundingClientRect();
            const { left: headerAddColumnButtonLeft } = this._headerAddColumnButton.getBoundingClientRect();
            let isInHeader = true;
            if (event) {
                // mouse over the header
                isInHeader =
                    event.offsetY <= DEFAULT_COLUMN_TITLE_HEIGHT && event.offsetY >= 0;
            }
            const needShow = boundaryRight <= headerAddColumnButtonLeft;
            if (needShow && this._isHeaderHover && isInHeader) {
                this._addColumnButton.style.visibility = 'visible';
            }
            else {
                this._addColumnButton.style.visibility = 'hidden';
            }
        };
        this._setChangingColumnIndex = (index) => {
            if (this._widthChangingIndex !== index) {
                this._widthChangingIndex = index;
            }
        };
        this._onShowEditColumnPopup = (target, column, index) => {
            if (this._editingColumnId || this.readonly)
                return;
            if (this._editingColumnPopupIndex === index) {
                this._editingColumnPopupIndex = -1;
                return;
            }
            this._editingColumnPopupIndex = index;
            const currentEl = target;
            const reference = currentEl.closest('.affine-database-column');
            assertExists(reference);
            const editColumn = new EditColumnPopup();
            editColumn.setTitleColumnEditId = this.setEditingColumnId;
            editColumn.targetModel = this.targetModel;
            editColumn.targetColumn = column;
            editColumn.columnIndex = index - 1;
            editColumn.columnRenderer = this.columnRenderer;
            editColumn.closePopup = () => {
                this._editingColumnPopupIndex = -1;
                editColumn.remove();
            };
            editColumn.insertColumn = position => {
                const insertIdex = position === ColumnInsertPosition.Right ? index : index - 1;
                this.addColumn(insertIdex);
            };
            document.body.appendChild(editColumn);
            createPopper(reference, editColumn, { placement: 'bottom-start' });
            onClickOutside(editColumn, (ele, target) => {
                // click outside of column title, need to reset the index
                if (!target.closest('.affine-database-column-content')) {
                    this._editingColumnPopupIndex = -1;
                }
                ele.remove();
            }, 'mousedown');
        };
        this._onShowColumnTypePopup = (event, columnId, column) => {
            if (this._editingColumnId === '' || this.readonly)
                return;
            if (this._changingColumnTypeId === columnId) {
                this._changingColumnTypeId = '';
                return;
            }
            event.stopPropagation();
            this._changingColumnTypeId = columnId;
            const popup = new ColumnTypePopup();
            popup.columnId = columnId;
            popup.columnType = column.type;
            popup.changeColumnType = (columnId, type) => {
                changeColumnType(columnId, type, column, this.targetModel, this.columnRenderer);
                this._changingColumnTypeId = '';
                popup.remove();
            };
            document.body.appendChild(popup);
            const target = event.target;
            const reference = target.closest('.affine-database-column-content');
            assertExists(reference);
            createPopper(reference, popup, {
                placement: 'bottom-start',
            });
            onClickOutside(popup, (ele, target) => {
                if (!target.closest('.affine-database-column-type-icon')) {
                    this._changingColumnTypeId = '';
                }
                ele.remove();
            }, 'mousedown');
        };
        this._onKeydown = (event, type, column) => {
            if (event.key === 'Enter') {
                this.targetModel.page.captureSync();
                this._saveColumnTitle(type, column);
                return;
            }
            if (event.key === 'Escape') {
                this.setEditingColumnId('');
                return;
            }
        };
        this._saveColumnTitle = (type, column) => {
            // Prevent triggering again after press enter key
            if (this._editingColumnId === '')
                return;
            const name = this._titleColumnInput.value;
            if (type === 'title') {
                // title column
                this._onUpdateTitleColumn(name);
            }
            else {
                // other columns
                assertExists(column);
                this._onUpdateNormalColumn(name, column);
            }
            // To handle this situation:
            // 1. click the pen icon, edit the title
            // 2. then click the other column's pen icon, edit the title
            if (this._editingColumnId === column?.id) {
                this.setEditingColumnId('');
            }
        };
        this._onUpdateTitleColumn = (titleColumnName) => {
            this.targetModel.page.captureSync();
            this.targetModel.page.updateBlock(this.targetModel, {
                titleColumnName,
            });
            this.setEditingColumnId('');
        };
        this._onUpdateNormalColumn = (name, column) => {
            this.targetModel.page.captureSync();
            this.targetModel.updateColumn({
                ...column,
                name,
            });
            this.targetModel.applyColumnUpdate();
            this.setEditingColumnId('');
        };
        this._onEditColumnTitle = (event, columnId) => {
            event.stopPropagation();
            this.setEditingColumnId(columnId);
        };
        this._onAddColumn = () => {
            if (this.readonly)
                return;
            this.addColumn(this.targetModel.columns.length);
        };
    }
    get tableContainer() {
        return this.parentElement;
    }
    get readonly() {
        return this.targetModel.page.readonly;
    }
    firstUpdated() {
        if (this.readonly)
            return;
        this._initChangeColumnWidthHandlers();
        this._initSetDragHandleHeightEffect();
        this._initHeaderMousemoveHandlers();
        this._initMoveColumnHandlers();
        const databaseElement = this.closest('affine-database');
        if (databaseElement) {
            this._initResizeEffect(databaseElement);
        }
    }
    updated(changedProperties) {
        super.updated(changedProperties);
        if (this.readonly)
            return;
        if (changedProperties.has('_editingColumnId') && !!this._editingColumnId) {
            this._titleColumnInput.focus();
            const length = this._titleColumnInput.value.length;
            this._titleColumnInput.setSelectionRange(0, length);
        }
        if (changedProperties.has('columns')) {
            // bind event when new column is added
            this._initMoveColumnHandlers();
            this._initChangeColumnWidthHandlers();
        }
        // When dragging a block or adding a new row to the database, the changedProperties.size is 0
        if (changedProperties.size === 0 || changedProperties.has('columns')) {
            this._setDragHandleHeight();
        }
    }
    disconnectedCallback() {
        super.disconnectedCallback();
        this._columnWidthDisposables.dispose();
        if (this._indicator) {
            this._indicator.targetRect = null;
        }
    }
    _initResizeEffect(element) {
        const pageBlock = getDefaultPage(this.targetModel.page);
        const viewportElement = pageBlock?.viewportElement;
        if (viewportElement) {
            const resizeObserver = new ResizeObserver((entries) => {
                for (const { target } of entries) {
                    if (target === viewportElement) {
                        const { right: containerRight } = element.getBoundingClientRect();
                        // calc the position of add column button
                        this._addColumnButton.style.left = `${containerRight}px`;
                        break;
                    }
                }
            });
            resizeObserver.observe(viewportElement);
        }
    }
    _initSetDragHandleHeightEffect() {
        const mutationObserver = new MutationObserver(() => {
            this._setDragHandleHeight();
        });
        const tableContainer = this.closest('.affine-database-table-container');
        assertExists(tableContainer);
        mutationObserver.observe(tableContainer, {
            childList: true,
            subtree: true,
        });
        this._disposables.add(() => mutationObserver.disconnect());
    }
    _setDragHandleHeight() {
        const databaseElement = this.closest('affine-database');
        // When dragging to generate a database preview,
        // the database may not be rendered to the page in time
        if (!databaseElement)
            return;
        const databaseBody = databaseElement.querySelector('.affine-database-block-rows');
        assertExists(databaseBody);
        const dragHandleHeight = databaseBody.clientHeight + DEFAULT_COLUMN_TITLE_HEIGHT - 1;
        const allDragHandle = databaseElement.querySelectorAll('.affine-database-column-drag-handle');
        allDragHandle.forEach(handle => {
            handle.style.height = `${dragHandleHeight}px`;
        });
    }
    _initHeaderMousemoveHandlers() {
        this._disposables.addFromEvent(this._headerContainer, 'mouseover', event => {
            this._isHeaderHover = true;
            this.showAddColumnButton(event);
        });
        this._disposables.addFromEvent(this._headerContainer, 'mouseleave', event => {
            this._isHeaderHover = false;
            this.showAddColumnButton(event);
        });
    }
    _initChangeColumnWidthHandlers() {
        // Don't `dispose()` if column width is being changed
        const isChangingWidth = this._widthChangingIndex !== -1;
        if (isChangingWidth)
            return;
        this._columnWidthDisposables.dispose();
        const disposables = initChangeColumnWidthHandlers(this._headerContainer, this.tableContainer, this.targetModel, this._setChangingColumnIndex);
        this._columnWidthDisposables = disposables;
    }
    _initMoveColumnHandlers() {
        // remove previous handlers
        this._columnMoveDisposables.dispose();
        const disposables = initMoveColumnHandlers(this._headerContainer, this.tableContainer, this.targetModel);
        // bind new handlers
        this._columnMoveDisposables = disposables;
    }
    render() {
        const style = styleMap({
            width: `${this.targetModel.titleColumnWidth}px`,
        });
        const isTitleEditing = this._editingColumnId === '-1' && !this.readonly;
        return html `
      <div class="affine-database-column-header database-row">
        <div class="affine-database-column database-cell" style=${style}>
          <div
            class="affine-database-column-content ${this._editingColumnId ===
            '-1'
            ? 'edit'
            : ''}"
            data-column-id="-1"
            @click=${(event) => this._onShowEditColumnPopup(event.target, this.targetModel.titleColumnName, 0)}
          >
            <div class="affine-database-column-text">
              <div class="affine-database-column-type-icon">${TextIcon}</div>
              ${isTitleEditing
            ? html `<div class="affine-database-column-text-content">
                    <input
                      class="affine-database-column-input"
                      value=${this.targetModel.titleColumnName}
                      @keydown=${(event) => this._onKeydown(event, 'title')}
                      @pointerdown=${(event) => event.stopPropagation()}
                    />
                    <div
                      class="affine-database-column-text-save-icon"
                      @click=${(event) => {
                event.stopPropagation();
                this._saveColumnTitle('title');
            }}
                    >
                      ${DatabaseDone}
                    </div>
                  </div>`
            : html `<div class="affine-database-column-text-content">
                    <div class="affine-database-column-text-input">
                      ${this.targetModel.titleColumnName}
                    </div>
                    ${this.readonly
                ? null
                : html `<div
                          class="affine-database-column-text-icon"
                          @click=${(e) => this._onEditColumnTitle(e, '-1')}
                        >
                          ${PenIcon}
                        </div>`}
                  </div>`}
            </div>
          </div>
        </div>
        ${repeat(this.columns, column => column.id, (column, index) => {
            const style = styleMap({
                width: `${column.width}px`,
            });
            const isEditing = this._editingColumnId === column.id && !this.readonly;
            const isChangingColumnType = this._changingColumnTypeId === column.id;
            return html `
              <div class="affine-database-column database-cell" style=${style}>
                <div
                  class="affine-database-column-content ${isEditing
                ? 'edit'
                : ''}"
                  data-column-id="${column.id}"
                  @click=${(event) => this._onShowEditColumnPopup(event.target, column, index + 1)}
                >
                  <div class="affine-database-column-text ${column.type}">
                    <div
                      class="affine-database-column-type-icon ${isEditing
                ? 'edit'
                : ''} ${isChangingColumnType ? 'active' : ''}"
                      @click=${(e) => this._onShowColumnTypePopup(e, column.id, column)}
                    >
                      ${columnTypeIconMap[column.type]}
                    </div>
                    ${isEditing
                ? html `<div class="affine-database-column-text-content">
                          <input
                            class="affine-database-column-input"
                            value=${column.name}
                            @keydown=${(event) => this._onKeydown(event, 'normal', column)}
                            @pointerdown=${(event) => event.stopPropagation()}
                          />
                          <div
                            class="affine-database-column-text-save-icon"
                            @click=${(event) => {
                    event.stopPropagation();
                    this._saveColumnTitle('normal', column);
                }}
                          >
                            ${DatabaseDone}
                          </div>
                        </div>`
                : html `<div class="affine-database-column-text-content">
                          <div class="affine-database-column-text-input">
                            ${column.name}
                          </div>
                          ${this.readonly
                    ? null
                    : html `<div
                                class="affine-database-column-text-icon"
                                @click=${(e) => this._onEditColumnTitle(e, column.id)}
                              >
                                ${PenIcon}
                              </div>`}
                        </div>`}
                  </div>
                  ${this.readonly
                ? null
                : html `<div
                        draggable="true"
                        class="affine-database-column-move"
                      >
                        ${DatabaseDragIcon}
                      </div>`}
                </div>
                ${this.readonly
                ? null
                : html `<div
                      class="affine-database-column-drag-handle ${this
                    ._widthChangingIndex === index
                    ? 'dragging'
                    : ''}"
                    ></div>`}
              </div>
            `;
        })}
        <div class="affine-database-column database-cell add-column-button">
          ${this.readonly
            ? null
            : html `<div
                  class="affine-database-column-drag-handle  ${this
                ._widthChangingIndex === this.columns.length
                ? 'dragging'
                : ''}"
                ></div>
                <div
                  class="header-add-column-button"
                  @click=${this._onAddColumn}
                >
                  ${DatabaseAddColumn}
                </div>`}
        </div>
        ${this.readonly
            ? null
            : html `<div
              class="affine-database-add-column-button"
              data-test-id="affine-database-add-column-button"
              @click=${this._onAddColumn}
            >
              ${DatabaseAddColumn}
            </div>`}
      </div>
    `;
    }
};
DatabaseColumnHeader.styles = styles;
__decorate([
    property()
], DatabaseColumnHeader.prototype, "targetModel", void 0);
__decorate([
    property()
], DatabaseColumnHeader.prototype, "columns", void 0);
__decorate([
    property()
], DatabaseColumnHeader.prototype, "addColumn", void 0);
__decorate([
    property()
], DatabaseColumnHeader.prototype, "columnRenderer", void 0);
__decorate([
    state()
], DatabaseColumnHeader.prototype, "_editingColumnId", void 0);
__decorate([
    state()
], DatabaseColumnHeader.prototype, "_changingColumnTypeId", void 0);
__decorate([
    query('.affine-database-column-input')
], DatabaseColumnHeader.prototype, "_titleColumnInput", void 0);
__decorate([
    query('.affine-database-column-header')
], DatabaseColumnHeader.prototype, "_headerContainer", void 0);
__decorate([
    query('.affine-database-add-column-button')
], DatabaseColumnHeader.prototype, "_addColumnButton", void 0);
__decorate([
    query('.header-add-column-button')
], DatabaseColumnHeader.prototype, "_headerAddColumnButton", void 0);
__decorate([
    state()
], DatabaseColumnHeader.prototype, "_widthChangingIndex", void 0);
DatabaseColumnHeader = __decorate([
    customElement('affine-database-column-header')
], DatabaseColumnHeader);
export { DatabaseColumnHeader };
//# sourceMappingURL=column-header.js.map