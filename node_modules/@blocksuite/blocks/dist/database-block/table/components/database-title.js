var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { ShadowlessElement, WithDisposable } from '@blocksuite/lit';
import { css, html } from 'lit';
import { customElement, property, query } from 'lit/decorators.js';
import { setupVirgoScroll } from '../../../__internal__/utils/virgo.js';
import { VirgoInput } from '../../../components/virgo-input/virgo-input.js';
import { DATABASE_TITLE_LENGTH, DEFAULT_TITLE } from '../consts.js';
let DatabaseTitle = class DatabaseTitle extends WithDisposable(ShadowlessElement) {
    constructor() {
        super(...arguments);
        this._titleVInput = null;
        this._handleKeyDown = (event) => {
            if (event.key === 'Enter') {
                // prevent insert v-line
                event.preventDefault();
                // insert new row
                this.addRow(0);
                return;
            }
        };
        this._onTitleFocus = () => {
            this._titleContainer.classList.remove('ellipsis');
            this._titleVInput?.setActive(true);
            if (this._titleVInput?.value === 'Database') {
                this._titleVInput?.setValue('');
            }
        };
        this._onTitleBlur = () => {
            this._titleContainer.classList.add('ellipsis');
            this._titleVInput?.setActive(false);
            if (this._titleVInput?.value === '') {
                this._titleVInput?.setValue(DEFAULT_TITLE);
            }
        };
    }
    firstUpdated() {
        this._initTitleVEditor();
        const disposables = this._disposables;
        disposables.addFromEvent(this._titleContainer, 'focus', this._onTitleFocus);
        disposables.addFromEvent(this._titleContainer, 'blur', this._onTitleBlur);
        // prevent block selection
        const onStopPropagation = (event) => event.stopPropagation();
        this._disposables.addFromEvent(this, 'pointerdown', onStopPropagation);
        this._disposables.addFromEvent(this, 'pointermove', onStopPropagation);
    }
    _initTitleVEditor() {
        this._titleVInput = new VirgoInput({
            yText: this.targetModel.title.yText,
            rootElement: this._titleContainer,
            maxLength: DATABASE_TITLE_LENGTH,
        });
        setupVirgoScroll(this.targetModel.page, this._titleVInput.vEditor);
        this._titleVInput.vEditor.setReadonly(this.targetModel.page.readonly);
        this._titleContainer.addEventListener('keydown', this._handleKeyDown);
        // for title placeholder
        this.targetModel.title.yText.observe(() => {
            this.requestUpdate();
        });
    }
    render() {
        const isEmpty = !this.targetModel.title || !this.targetModel.title.length;
        return html `<div class="affine-database-title">
      <div
        class="database-title ${isEmpty ? 'database-title-empty' : ''}"
        data-block-is-database-title="true"
        title=${this.targetModel.title.toString()}
      ></div>
    </div>`;
    }
};
DatabaseTitle.styles = css `
    .affine-database-title {
      flex: 1;
      max-width: 300px;
      min-width: 300px;
      height: 30px;
    }

    .database-title {
      position: sticky;
      width: 300px;
      height: 30px;
      font-size: 18px;
      font-weight: 600;
      line-height: 24px;
      color: var(--affine-text-primary-color);
      font-family: inherit;
      /* overflow-x: scroll; */
      overflow: hidden;
      cursor: text;
    }

    .database-title [data-virgo-text='true'] {
      display: block;
      white-space: pre !important;
    }

    .database-title.ellipsis [data-virgo-text='true'] {
      white-space: nowrap !important;
      text-overflow: ellipsis;
      overflow: hidden;
    }

    .database-title:focus {
      outline: none;
    }

    .database-title:disabled {
      background-color: transparent;
    }

    .database-title-empty::before {
      content: 'Database';
      color: var(--affine-placeholder-color);
      position: absolute;
      opacity: 0.5;
    }
  `;
__decorate([
    property()
], DatabaseTitle.prototype, "targetModel", void 0);
__decorate([
    property()
], DatabaseTitle.prototype, "addRow", void 0);
__decorate([
    query('.database-title')
], DatabaseTitle.prototype, "_titleContainer", void 0);
DatabaseTitle = __decorate([
    customElement('affine-database-title')
], DatabaseTitle);
export { DatabaseTitle };
//# sourceMappingURL=database-title.js.map