var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
// related component
import './components/column-header/column-header.js';
import './components/cell-container.js';
import './components/toolbar/toolbar.js';
import './components/database-title.js';
import { PlusIcon } from '@blocksuite/global/config';
import { assertExists } from '@blocksuite/global/utils';
import { ShadowlessElement, WithDisposable } from '@blocksuite/lit';
import { css } from 'lit';
import { customElement, property, query, state } from 'lit/decorators.js';
import { html } from 'lit/static-html.js';
import { asyncFocusRichText } from '../../__internal__/index.js';
import { tooltipStyle } from '../../components/tooltip/tooltip.js';
import { onClickOutside } from '../utils.js';
import { registerInternalRenderer } from './components/column-type/index.js';
import { DataBaseRowContainer } from './components/row-container.js';
import { DEFAULT_COLUMN_WIDTH } from './consts.js';
import { CellSelectionManager } from './selection-manager/cell.js';
import { RowSelectionManager } from './selection-manager/row.js';
import { SearchState } from './types.js';
const styles = css `
  affine-database-table {
    position: relative;
  }

  .affine-database-block-title-container {
    display: flex;
    align-items: center;
    justify-content: space-between;
    height: 44px;
    margin: 18px 0 0;
  }

  .affine-database-block-table {
    position: relative;
    width: 100%;
    padding-bottom: 4px;
    overflow-x: scroll;
    overflow-y: hidden;
    border-top: 1.5px solid var(--affine-border-color);
  }
  .affine-database-block-table:hover {
    padding-bottom: 0px;
  }
  .affine-database-block-table::-webkit-scrollbar {
    -webkit-appearance: none;
    display: block;
  }
  .affine-database-block-table::-webkit-scrollbar:horizontal {
    height: 4px;
  }
  .affine-database-block-table::-webkit-scrollbar-thumb {
    border-radius: 2px;
    background-color: var(--affine-black-10);
  }
  .affine-database-block-table:hover::-webkit-scrollbar:horizontal {
    height: 8px;
  }
  .affine-database-block-table:hover::-webkit-scrollbar-thumb {
    border-radius: 16px;
    background-color: var(--affine-black-30);
  }
  .affine-database-block-table:hover::-webkit-scrollbar-track {
    background-color: var(--affine-hover-color);
  }

  .affine-database-table-container {
    position: relative;
    width: fit-content;
    min-width: 100%;
  }

  .affine-database-block-tag-circle {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    display: inline-block;
  }

  .affine-database-block-tag {
    display: inline-flex;
    border-radius: 11px;
    align-items: center;
    padding: 0 8px;
    cursor: pointer;
  }

  .affine-database-block-footer {
    display: flex;
    width: 100%;
    height: 28px;
    margin-top: -8px;
  }
  .affine-database-block-footer:hover {
    position: relative;
    z-index: 1;
    background-color: var(--affine-hover-color-filled);
  }
  .affine-database-block-footer:hover .affine-database-block-add-row {
    display: flex;
  }

  .affine-database-block-add-row {
    display: none;
    flex: 1;
    align-items: center;
    justify-content: center;
    gap: 4px;
    width: 100%;
    height: 100%;
    cursor: pointer;
    user-select: none;
    font-size: 14px;
  }
  .affine-database-block-add-row svg {
    width: 16px;
    height: 16px;
  }

  ${tooltipStyle}
`;
let DatabaseTable = class DatabaseTable extends WithDisposable(ShadowlessElement) {
    constructor() {
        super(...arguments);
        this.flavour = 'affine:database';
        this._searchState = SearchState.SearchIcon;
        this._filteredRowIds = [];
        this._hoverState = false;
        this._columnRenderer = registerInternalRenderer();
        this._initRowSelectionEvents = () => {
            this._rowSelection = new RowSelectionManager(this.root.uiEventDispatcher, this.model);
        };
        this._initCellSelectionEvents = () => {
            this._cellSelection = new CellSelectionManager(this.root.uiEventDispatcher, this.model);
        };
        this._setFilteredRowIds = (rowIds) => {
            this._filteredRowIds = rowIds;
        };
        this._setSearchState = (state) => {
            this._searchState = state;
        };
        this._onDatabaseScroll = (event) => {
            this._columnHeaderComponent.showAddColumnButton();
        };
        this._onMouseOver = () => {
            this._hoverState = true;
        };
        this._onMouseLeave = () => {
            if (this._searchState === SearchState.SearchIcon) {
                this._updateHoverState();
            }
        };
        this._onClick = () => {
            setTimeout(() => {
                onClickOutside(this, () => {
                    if (this._searchState !== SearchState.Searching) {
                        this._resetHoverState();
                        this._resetSearchState();
                    }
                }, 'mousedown');
            });
        };
        this._addRow = (index) => {
            if (this.readonly)
                return;
            const currentSearchState = this._searchState;
            this._resetSearchState();
            this._resetHoverState();
            const page = this.model.page;
            page.captureSync();
            const id = page.addBlock('affine:paragraph', {}, this.model.id, index);
            asyncFocusRichText(page, id);
            // save the search state
            this._setSearchState(currentSearchState);
        };
        this._addColumn = (index) => {
            if (this.readonly)
                return;
            this.model.page.captureSync();
            const currentColumns = this.model.columns;
            const defaultColumnType = 'multi-select';
            const renderer = this._columnRenderer.get(defaultColumnType);
            const schema = {
                type: defaultColumnType,
                name: `Column ${currentColumns.length + 1}`,
                width: DEFAULT_COLUMN_WIDTH,
                hide: false,
                ...renderer.propertyCreator(),
            };
            const id = this.model.addColumn(schema, index);
            this.model.applyColumnUpdate();
            requestAnimationFrame(() => {
                this._columnHeaderComponent.setEditingColumnId(id);
            });
        };
    }
    get columnRenderer() {
        return this._columnRenderer;
    }
    get columns() {
        return this.model.columns;
    }
    get readonly() {
        return this.model.page.readonly;
    }
    connectedCallback() {
        super.connectedCallback();
        this._updateHoverState();
        this._initRowSelectionEvents();
        this._initCellSelectionEvents();
        const disposables = this._disposables;
        disposables.addFromEvent(this, 'mouseover', this._onMouseOver);
        disposables.addFromEvent(this, 'mouseleave', this._onMouseLeave);
        disposables.addFromEvent(this, 'click', this._onClick);
        disposables.addFromEvent(this, 'keydown', this._cellSelection.onCellSelectionChange);
    }
    firstUpdated() {
        this.model.propsUpdated.on(() => {
            this.requestUpdate();
            // TODO: optimize performance here
            this.querySelectorAll('affine-database-cell-container').forEach(cell => {
                cell.requestUpdate();
            });
            this.querySelector('affine-database-column-header')?.requestUpdate();
        });
        this.model.childrenUpdated.on(() => {
            this.requestUpdate();
            // TODO: optimize performance here
            this.querySelectorAll('affine-database-cell-container').forEach(cell => {
                cell.requestUpdate();
            });
            this.querySelector('affine-database-column-header')?.requestUpdate();
            this._updateHoverState();
        });
        if (this.readonly)
            return;
        const tableContent = this._tableContainer.parentElement;
        assertExists(tableContent);
        this._disposables.addFromEvent(tableContent, 'scroll', this._onDatabaseScroll);
    }
    _updateHoverState() {
        if (this.model.children.length === 0) {
            this._hoverState = true;
            return;
        }
        this._resetHoverState();
    }
    disconnectedCallback() {
        super.disconnectedCallback();
        this._rowSelection.dispose();
        this._cellSelection.dispose();
    }
    _resetSearchState() {
        this._searchState = SearchState.SearchIcon;
    }
    _resetHoverState() {
        this._hoverState = false;
    }
    render() {
        const rows = DataBaseRowContainer(this, this._filteredRowIds, this._searchState, this.root);
        return html `
      <div class="affine-database-table">
        <div class="affine-database-block-title-container">
          <affine-database-title
            .addRow=${this._addRow}
            .targetModel=${this.model}
          ></affine-database-title>
          <affine-database-toolbar
            .addRow=${this._addRow}
            .targetModel=${this.model}
            .hoverState=${this._hoverState}
            .searchState=${this._searchState}
            .setSearchState=${this._setSearchState}
            .setFilteredRowIds=${this._setFilteredRowIds}
          ></affine-database-toolbar>
        </div>
        <div class="affine-database-block-table">
          <div class="affine-database-table-container">
            <affine-database-column-header
              .columns=${this.columns}
              .targetModel=${this.model}
              .addColumn=${this._addColumn}
              .columnRenderer=${this.columnRenderer}
            ></affine-database-column-header>
            ${rows}
          </div>
        </div>
        ${this.readonly
            ? null
            : html `<div class="affine-database-block-footer">
              <div
                class="affine-database-block-add-row"
                data-test-id="affine-database-add-row-button"
                role="button"
                @click=${() => this._addRow()}
              >
                ${PlusIcon}<span>New Record</span>
              </div>
            </div>`}
      </div>
    `;
    }
};
DatabaseTable.styles = styles;
__decorate([
    property()
], DatabaseTable.prototype, "model", void 0);
__decorate([
    property()
], DatabaseTable.prototype, "root", void 0);
__decorate([
    query('.affine-database-table-container')
], DatabaseTable.prototype, "_tableContainer", void 0);
__decorate([
    query('affine-database-column-header')
], DatabaseTable.prototype, "_columnHeaderComponent", void 0);
__decorate([
    state()
], DatabaseTable.prototype, "_searchState", void 0);
__decorate([
    state()
], DatabaseTable.prototype, "_filteredRowIds", void 0);
__decorate([
    state()
], DatabaseTable.prototype, "_hoverState", void 0);
DatabaseTable = __decorate([
    customElement('affine-database-table')
], DatabaseTable);
export { DatabaseTable };
//# sourceMappingURL=table-view.js.map