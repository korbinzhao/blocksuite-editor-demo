import { assertExists } from '@blocksuite/store';
export function getClosestRowIndex(element) {
    const rowIndex = element
        .closest('.database-row')
        ?.getAttribute('data-row-index');
    if (rowIndex) {
        return Number(rowIndex);
    }
    // Header row has no index.
    return -1;
}
export function getClosestRowId(element) {
    const rowId = element.closest('.database-row')?.getAttribute('data-row-id');
    if (rowId) {
        return rowId;
    }
    // Header row has no id.
    return '';
}
export function getSelectedRowIdsByIndexes(database, indexes) {
    return indexes.map(item => getRowIdByIndex(database, item));
}
export function getSelectedRowIndexes(startCell, endCell) {
    const currentRowIndex = getClosestRowIndex(startCell);
    const startRowIndex = getClosestRowIndex(endCell);
    if (currentRowIndex === -1 || startRowIndex === -1)
        return [];
    const minIndex = Math.min(currentRowIndex, startRowIndex);
    const maxIndex = Math.max(currentRowIndex, startRowIndex);
    const rowIndexes = [];
    for (let id = minIndex; id <= maxIndex; id++) {
        rowIndexes.push(id);
    }
    return rowIndexes;
}
export function getClosestDatabase(element) {
    const database = element?.closest('affine-database');
    assertExists(database);
    return database;
}
export function getClosestDatabaseId(element) {
    const databaseId = getClosestDatabase(element).getAttribute('data-block-id');
    assertExists(databaseId);
    return databaseId;
}
export function isInDatabase(element) {
    const database = element.closest('affine-database');
    return database !== null;
}
function getRowIdByIndex(database, index) {
    const rowId = database
        .querySelector(`.database-row[data-row-index="${index}"]`)
        ?.getAttribute('data-row-id');
    assertExists(rowId);
    return rowId;
}
//# sourceMappingURL=utils.js.map