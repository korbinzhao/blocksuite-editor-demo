import { ShadowlessElement } from '@blocksuite/lit';
import type { Page } from '@blocksuite/store';
import type { BaseBlockModel } from '@blocksuite/store';
import type { literal } from 'lit/static-html.js';
import type { DatabaseBlockModel } from '../database-model.js';
import type { Cell, Column, ColumnType, RowHost } from './types.js';
export declare abstract class TableViewCell extends ShadowlessElement {
    abstract readonly cellType: ColumnType;
}
declare const DatabaseCellElement_base: typeof ShadowlessElement & (new (...args: any[]) => import("@blocksuite/lit").DisposableClass);
export declare abstract class DatabaseCellElement<Value> extends DatabaseCellElement_base {
    static tag: ReturnType<typeof literal>;
    rowHost: RowHost<Value>;
    databaseModel: DatabaseBlockModel;
    rowModel: BaseBlockModel;
    column: Column;
    cell: Cell<Value> | null;
}
export interface ColumnRenderer<Type extends ColumnType = ColumnType, Property extends Record<string, unknown> = Record<string, unknown>, Value = unknown> {
    displayName: string;
    type: Type;
    propertyCreator: () => Property;
    components: ColumnComponents;
    defaultValue: (page: Page) => Value;
}
export interface ColumnComponents<Value = unknown> {
    Cell: typeof DatabaseCellElement<Value>;
    CellEditing: typeof DatabaseCellElement<Value> | null;
}
export declare function defineColumnRenderer<Type extends ColumnType, Property extends Record<string, unknown>, Value>(type: Type, propertyCreator: () => Property, defaultValue: (page: Page) => Value, components: ColumnComponents, config: {
    displayName: string;
}): ColumnRenderer<Type, Property, Value>;
export declare class ColumnRendererHelper {
    private _columns;
    register(renderer: ColumnRenderer): void;
    get(type: ColumnRenderer['type']): ColumnRenderer;
    list(): ColumnRenderer[];
}
export {};
//# sourceMappingURL=register.d.ts.map