var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
// related component
import './table/table-view.js';
import './kanban/kanban-view.js';
import { BlockElement } from '@blocksuite/lit';
import { customElement } from 'lit/decorators.js';
import { html, literal, unsafeStatic } from 'lit/static-html.js';
import { registerService } from '../__internal__/service.js';
import { DatabaseBlockService } from './database-service.js';
let DatabaseBlockComponent = class DatabaseBlockComponent extends BlockElement {
    connectedCallback() {
        super.connectedCallback();
        registerService('affine:database', DatabaseBlockService);
        this.model.propsUpdated.on(() => this.requestUpdate());
    }
    render() {
        const databaseTag = literal `affine-database-${unsafeStatic(this.model.mode)}`;
        /* eslint-disable lit/binding-positions, lit/no-invalid-html */
        return html `
      <${databaseTag}
        .root=${this.root}
        .model=${this.model}
        class="affine-block-element"
      ></${databaseTag}>
    `;
    }
};
DatabaseBlockComponent = __decorate([
    customElement('affine-database')
], DatabaseBlockComponent);
export { DatabaseBlockComponent };
//# sourceMappingURL=database-block.js.map