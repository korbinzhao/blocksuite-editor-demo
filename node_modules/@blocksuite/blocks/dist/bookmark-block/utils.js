import { defaultBookmarkProps } from './bookmark-model.js';
// Result is boolean used to record whether the meta data is crawled
export async function reloadBookmarkBlock(model, bookmarkElement, force = false) {
    // @ts-ignore
    if (window?.apis?.ui?.getBookmarkDataByLink) {
        if ((model.crawled || !model.url) && !force) {
            return;
        }
        bookmarkElement.loading = true;
        // This method is get website's metaData by link
        // And only exists in the AFFiNE client
        // @ts-ignore
        const metaData = (await window.apis.ui.getBookmarkDataByLink(model.url));
        // check is block exist
        if (!model.page.getBlockById(model.id)) {
            return;
        }
        model.page.withoutTransact(() => {
            model.page.updateBlock(model, {
                ...metaData,
                url: model.url,
                crawled: true,
            });
        });
        bookmarkElement.loading = false;
    }
}
export function cloneBookmarkProperties(model) {
    return Object.keys(defaultBookmarkProps).reduce((props, key) => {
        props[key] = model[key];
        return props;
    }, {});
}
//# sourceMappingURL=utils.js.map