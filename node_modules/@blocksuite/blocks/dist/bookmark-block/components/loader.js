var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { css, html, LitElement } from 'lit';
import { customElement, property } from 'lit/decorators.js';
let Loader = class Loader extends LitElement {
    constructor() {
        super(...arguments);
        this.size = '50px';
        this.color = 'blue';
    }
    firstUpdated() {
        this.updateComplete.then(() => {
            const { size, color } = this;
            this.style.setProperty('--loader-size', typeof size === 'string' ? size : `${size}px`);
            this.style.setProperty('--loader-color', color);
        });
    }
    render() {
        return html `<div class="bookmark-loader-wrapper">
      <svg class="bookmark-loader" x="0px" y="0px" viewBox="0 0 150 150">
        <circle class="bookmark-loader-block" cx="75" cy="75" r="60" />
      </svg>
    </div>`;
    }
};
Loader.styles = css `
    .bookmark-loader-wrapper {
      display: flex;
      width: var(--loader-size);
      height: var(--loader-size);
    }
    .bookmark-loader {
      width: var(--loader-size);
      animation: loading 3s linear infinite;
    }
    .bookmark-loader-block {
      animation: loading-circle 2s linear infinite;
      stroke-dashoffset: 0;
      stroke-dasharray: 300;
      stroke-width: 15;
      stroke-miterlimit: 10;
      stroke-linecap: round;
      stroke: var(--loader-color);
      fill: transparent;
    }

    @keyframes loading {
      0% {
        transform: rotate(0);
      }
      100% {
        transform: rotate(360deg);
      }
    }
    @keyframes loading-circle {
      0% {
        stroke-dashoffset: 0;
      }
      100% {
        stroke-dashoffset: -600;
      }
    }
  `;
__decorate([
    property()
], Loader.prototype, "size", void 0);
__decorate([
    property()
], Loader.prototype, "color", void 0);
Loader = __decorate([
    customElement('bookmark-loader')
], Loader);
export { Loader };
//# sourceMappingURL=loader.js.map