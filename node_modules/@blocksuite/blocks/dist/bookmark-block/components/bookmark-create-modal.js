var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import '../../components/button.js';
import '../../components/portal.js';
import '../../components/button.js';
import { WithDisposable } from '@blocksuite/lit';
import {} from '@blocksuite/store';
import { html, LitElement } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { toast } from '../..//components/toast.js';
import { CloseIcon } from '../images/icons.js';
import { bookmarkModalStyles } from './bookmark-edit-modal.js';
let BookmarkCreateModal = class BookmarkCreateModal extends WithDisposable(LitElement) {
    constructor() {
        super(...arguments);
        this._modalKeyboardListener = (e) => {
            if (e.key === 'Enter') {
                this._onConfirm();
            }
            if (e.key === 'Escape') {
                this.onCancel?.();
            }
        };
    }
    get id() {
        return `bookmark-create-modal-${this.model.id.split(':')[0]}`;
    }
    connectedCallback() {
        super.connectedCallback();
        requestAnimationFrame(() => {
            const linkInput = document.querySelector(`#${this.id} input.link`);
            linkInput.focus();
        });
        document.addEventListener('keydown', this._modalKeyboardListener);
    }
    disconnectedCallback() {
        super.disconnectedCallback();
        document.removeEventListener('keydown', this._modalKeyboardListener);
    }
    _onConfirm() {
        const linkInput = document.querySelector(`#${this.id} input.link`);
        if (!linkInput.value) {
            toast('Bookmark url can not be empty');
            return;
        }
        this.model.page.updateBlock(this.model, {
            url: linkInput.value,
        });
        this.onConfirm?.();
    }
    render() {
        const modal = html `${bookmarkModalStyles}
      <div class="bookmark-modal" id="${this.id}">
        <div
          class="bookmark-modal-mask"
          @click=${() => {
            this.onCancel?.();
            this.model.page.deleteBlock(this.model);
        }}
        ></div>
        <div class="bookmark-modal-wrapper" style="width:480px">
          <icon-button
            width="32px"
            height="32px"
            class="bookmark-modal-close-button"
            @click=${() => {
            this.onCancel?.();
            this.model.page.deleteBlock(this.model);
        }}
            >${CloseIcon}</icon-button
          >

          <div class="bookmark-modal-title">Bookmark</div>
          <div class="bookmark-modal-desc">
            Create a Bookmark that previews a link in card view.
          </div>
          <input
            tabindex="1"
            type="text"
            class="bookmark-input link"
            placeholder="Input in https://..."
          />

          <div class="bookmark-modal-footer">
            <div
              tabindex="2"
              class="bookmark-confirm-button"
              @click=${() => this._onConfirm()}
            >
              Confirm
            </div>
          </div>
        </div>
      </div>`;
        return html `<affine-portal .template=${modal}></affine-portal>`;
    }
};
__decorate([
    property()
], BookmarkCreateModal.prototype, "model", void 0);
__decorate([
    property()
], BookmarkCreateModal.prototype, "onCancel", void 0);
__decorate([
    property()
], BookmarkCreateModal.prototype, "onConfirm", void 0);
BookmarkCreateModal = __decorate([
    customElement('bookmark-create-modal')
], BookmarkCreateModal);
export { BookmarkCreateModal };
//# sourceMappingURL=bookmark-create-modal.js.map