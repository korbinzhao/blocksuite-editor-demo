var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import '../../components/button.js';
import { WithDisposable } from '@blocksuite/lit';
import {} from '@blocksuite/store';
import { css, html, LitElement, nothing } from 'lit';
import { customElement, property, query } from 'lit/decorators.js';
import { repeat } from 'lit/directives/repeat.js';
import * as Y from 'yjs';
import { tooltipStyle } from '../../components/tooltip/tooltip.js';
import { CaptionIcon, EditIcon, LinkIcon, MoreIcon } from '../images/icons.js';
import { createBookmarkOperationMenu } from './bookmark-operation-popper.js';
const config = [
    {
        type: 'link',
        icon: LinkIcon,
        tooltip: 'Turn into Link view',
        action: (model, callback) => {
            const { page } = model;
            const parent = page.getParent(model);
            const index = parent?.children.indexOf(model);
            const yText = new Y.Text();
            const insert = model.title || model.caption || model.url;
            yText.insert(0, insert);
            yText.format(0, insert.length, { link: model.url });
            const text = new page.Text(yText);
            page.addBlock('affine:paragraph', {
                text,
            }, parent, index);
            model.page.deleteBlock(model);
            callback?.('link');
        },
        divider: true,
    },
    {
        type: 'caption',
        icon: CaptionIcon,
        tooltip: 'Add Caption',
        action: (model, callback) => {
            callback?.('caption');
        },
    },
    {
        type: 'edit',
        icon: EditIcon,
        tooltip: 'Edit',
        action: (model, callback) => {
            callback?.('edit');
        },
        divider: true,
    },
];
let BookmarkToolbar = class BookmarkToolbar extends WithDisposable(LitElement) {
    constructor() {
        super(...arguments);
        this._menu = null;
    }
    _toggleMenu() {
        if (this._menu) {
            this._menu.dispose();
            this._menu = null;
        }
        else {
            this._menu = createBookmarkOperationMenu(this.moreButton, {
                model: this.model,
                onSelected: type => {
                    this._toggleMenu();
                    this.onSelected?.(type);
                },
            });
        }
    }
    connectedCallback() {
        super.connectedCallback();
    }
    render() {
        const buttons = repeat(config, ({ type }) => type, ({ type, icon, tooltip, action, divider }) => {
            return html `<icon-button
            width="32px"
            height="32px"
            class="bookmark-toolbar-button has-tool-tip ${type}"
            @click=${() => {
                action(this.model, this.onSelected, this);
            }}
          >
            ${icon}
            <tool-tip inert role="tooltip">${tooltip}</tool-tip>
          </icon-button>
          ${divider ? html `<div class="divider"></div>` : nothing} `;
        });
        return html `
      <div class="bookmark-bar">
        ${buttons}

        <div class="more-button-wrapper">
          <icon-button
            width="32px"
            height="32px"
            class="has-tool-tip more-button"
            @click=${() => {
            this._toggleMenu();
        }}
          >
            ${MoreIcon}
            <tool-tip inert role="tooltip">More</tool-tip>
          </icon-button>
        </div>
      </div>
    `;
    }
};
BookmarkToolbar.styles = css `
    ${tooltipStyle}
    .bookmark-bar {
      box-sizing: border-box;
      position: absolute;
      right: 0;
      top: -40px;
      display: flex;
      align-items: center;
      padding: 4px 8px;
      gap: 4px;
      height: 40px;

      border-radius: 8px;
      background: var(--affine-background-overlay-panel-color);
      box-shadow: var(--affine-shadow-2);
      z-index: var(--affine-z-index-popover);
      user-select: none;
    }
    .divider {
      width: 1px;
      height: 24px;
      background-color: var(--affine-border-color);
    }
  `;
__decorate([
    property()
], BookmarkToolbar.prototype, "model", void 0);
__decorate([
    property()
], BookmarkToolbar.prototype, "onSelected", void 0);
__decorate([
    query('.bookmark-bar')
], BookmarkToolbar.prototype, "formatQuickBarElement", void 0);
__decorate([
    query('.more-button-wrapper')
], BookmarkToolbar.prototype, "moreButton", void 0);
BookmarkToolbar = __decorate([
    customElement('bookmark-toolbar')
], BookmarkToolbar);
export { BookmarkToolbar };
//# sourceMappingURL=bookmark-toolbar.js.map