import '../../components/button.js';
import { type BaseBlockModel } from '@blocksuite/store';
import type { TemplateResult } from 'lit';
import { LitElement } from 'lit';
import type { BookmarkBlockModel } from '../bookmark-model.js';
import type { MenuActionCallback } from './bookmark-operation-popper.js';
export type ConfigItem = {
    type: 'link' | 'edit' | 'caption';
    icon: TemplateResult;
    tooltip: string;
    action: (model: BaseBlockModel<BookmarkBlockModel>, callback?: ToolbarActionCallback, element?: HTMLElement) => void;
    divider?: boolean;
};
export type ToolbarActionCallback = (type: ConfigItem['type']) => void;
declare const BookmarkToolbar_base: typeof LitElement & (new (...args: any[]) => import("@blocksuite/lit").DisposableClass);
export declare class BookmarkToolbar extends BookmarkToolbar_base {
    static styles: import("lit").CSSResult;
    model: BaseBlockModel;
    onSelected?: ToolbarActionCallback & MenuActionCallback;
    formatQuickBarElement: HTMLElement;
    moreButton: HTMLElement;
    private _menu;
    private _toggleMenu;
    connectedCallback(): void;
    render(): TemplateResult<1>;
}
declare global {
    interface HTMLElementTagNameMap {
        'bookmark-toolbar': BookmarkToolbar;
    }
}
export {};
//# sourceMappingURL=bookmark-toolbar.d.ts.map