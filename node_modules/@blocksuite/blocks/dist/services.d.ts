import type { UnionToIntersection } from '@blocksuite/global/types';
import type { BaseService } from './__internal__/service/index.js';
import { BookmarkBlockService } from './bookmark-block/index.js';
import { CodeBlockService } from './code-block/index.js';
import { DatabaseBlockService } from './database-block/database-service.js';
import { DividerBlockService } from './divider-block/index.js';
import { EmbedBlockService } from './embed-block/index.js';
import { FrameBlockService } from './frame-block/index.js';
import { ListBlockService } from './list-block/index.js';
import type { Flavour } from './models.js';
import { ParagraphBlockService } from './paragraph-block/index.js';
export declare const blockService: {
    'affine:code': typeof CodeBlockService;
    'affine:database': typeof DatabaseBlockService;
    'affine:paragraph': typeof ParagraphBlockService;
    'affine:list': typeof ListBlockService;
    'affine:embed': typeof EmbedBlockService;
    'affine:divider': typeof DividerBlockService;
    'affine:frame': typeof FrameBlockService;
    'affine:bookmark': typeof BookmarkBlockService;
};
export type BlockService = typeof blockService;
export type ServiceFlavour = keyof BlockService;
export type BlockServiceInstance = {
    [Key in Flavour]: Key extends ServiceFlavour ? BlockService[Key] extends {
        new (): unknown;
    } ? InstanceType<BlockService[Key]> : never : InstanceType<typeof BaseService>;
};
export type BlockServiceInstanceByKey<Key extends Flavour> = UnionToIntersection<BlockServiceInstance[Key]>;
//# sourceMappingURL=services.d.ts.map