var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { AffineSchemas } from '@blocksuite/blocks/models';
import { Workspace } from '@blocksuite/store';
import { LitElement } from 'lit';
import { customElement } from 'lit/decorators.js';
import { EditorContainer } from './editor-container.js';
/**
 * This is the editor component to be used out-of-the-box.
 * It always starts with an empty local page state,
 * so it doesn't enable the opt-in collaboration and data persistence features.
 * But it's already self-contained and sufficient for embedded use in regular web applications.
 * You can use `editor.importMarkdown` to load markdown content.
 */
let SimpleAffineEditor = class SimpleAffineEditor extends LitElement {
    constructor() {
        super();
        this.workspace = new Workspace({ id: 'test' }).register(AffineSchemas);
        this.page = this.workspace.createPage({ id: 'page0' });
        const pageBlockId = this.page.addBlock('affine:page');
        const frameId = this.page.addBlock('affine:frame', {}, pageBlockId);
        this.page.addBlock('affine:paragraph', {}, frameId);
    }
    connectedCallback() {
        const editor = new EditorContainer();
        editor.page = this.page;
        this.appendChild(editor);
    }
    disconnectedCallback() {
        this.removeChild(this.children[0]);
    }
};
SimpleAffineEditor = __decorate([
    customElement('simple-affine-editor')
], SimpleAffineEditor);
export { SimpleAffineEditor };
//# sourceMappingURL=simple-affine-editor.js.map