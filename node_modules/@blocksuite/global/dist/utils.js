export { DisposableGroup } from './utils/disposable.js';
export { Slot } from './utils/slot.js';
export { caretRangeFromPoint, isFirefox, isWeb } from './utils/web.js';
export const SYS_KEYS = new Set(['id', 'flavour', 'children']);
// https://stackoverflow.com/questions/31538010/test-if-a-variable-is-a-primitive-rather-than-an-object
export function isPrimitive(a) {
    return a !== Object(a);
}
export function assertExists(val, message = 'val does not exist') {
    if (val === null || val === undefined) {
        if (message instanceof Error) {
            throw message;
        }
        throw new Error(message);
    }
}
export function assertNotExists(val, message = 'val exists') {
    if (val !== null && val !== undefined) {
        throw new Error(message);
    }
}
export function assertFlavours(model, allowed) {
    if (!allowed.includes(model.flavour)) {
        throw new Error(`model flavour ${model.flavour} is not allowed`);
    }
}
export function matchFlavours(model, expected) {
    return expected.includes(model.flavour);
}
export const nonTextBlock = [
    'affine:database',
    'affine:divider',
    'affine:embed',
    'affine:code',
];
export const isNonTextBlock = (model) => matchFlavours(model, nonTextBlock);
export function assertEquals(val, expected, message = 'val is not same as expected') {
    if (!isEqual(val, expected)) {
        throw new Error(message);
    }
}
export function isEqual(val, expected) {
    const a = isPrimitive(val);
    const b = isPrimitive(expected);
    if (a && b) {
        if (!Object.is(val, expected)) {
            return false;
        }
    }
    else if (a !== b) {
        return false;
    }
    else {
        if (Array.isArray(val) && Array.isArray(expected)) {
            if (val.length !== expected.length) {
                return false;
            }
            return val.every((x, i) => isEqual(x, expected[i]));
        }
        else if (typeof val === 'object' && typeof expected === 'object') {
            const obj1 = Object.entries(val);
            const obj2 = Object.entries(expected);
            if (obj1.length !== obj2.length) {
                return false;
            }
            return obj1.every((x, i) => isEqual(x, obj2[i]));
        }
    }
    return true;
}
export async function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}
/**
 * Returns an object with four arrays: add, remove and unchanged.
 *
 * add: elements in after that are not in before
 * remove: elements in before that are not in after
 * unchanged: elements in both before and after
 */
export function diffArray(before, after, compare = (a, b) => a === b) {
    const add = [];
    const remove = [];
    const unchanged = [];
    // Find elements in before that are not in after
    for (const elem of before) {
        if (!after.some(afterElem => compare(afterElem, elem))) {
            remove.push(elem);
        }
        else {
            unchanged.push(elem);
        }
    }
    // Find elements in after that are not in before
    for (const elem of after) {
        if (!before.some(beforeElem => compare(beforeElem, elem))) {
            add.push(elem);
        }
    }
    return { changed: add.length || remove.length, add, remove, unchanged };
}
//# sourceMappingURL=utils.js.map