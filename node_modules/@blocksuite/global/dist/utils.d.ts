import type { BaseBlockModel } from '@blocksuite/store';
import type { BlockModels } from './types.js';
export type { Disposable } from './utils/disposable.js';
export { DisposableGroup } from './utils/disposable.js';
export { Slot } from './utils/slot.js';
export { caretRangeFromPoint, isFirefox, isWeb } from './utils/web.js';
export declare const SYS_KEYS: Set<string>;
export declare function isPrimitive(a: unknown): a is null | undefined | boolean | number | string;
export declare function assertExists<T>(val: T | null | undefined, message?: string | Error): asserts val is T;
export declare function assertNotExists<T>(val: T | null | undefined, message?: string): asserts val is null | undefined;
export declare function assertFlavours(model: {
    flavour: string;
}, allowed: string[]): void;
type BlockModelKey = keyof BlockModels;
type Flavours<T> = T extends BlockModelKey[] ? BlockModels[T[number]] : never;
type Writeable<T> = {
    -readonly [P in keyof T]: T[P];
};
export declare function matchFlavours<const Key extends readonly string[]>(model: BaseBlockModel, expected: Key): model is Flavours<Writeable<Key>>;
export declare const nonTextBlock: (keyof BlockModels)[];
export declare const isNonTextBlock: <Key extends "affine:bookmark" | "affine:frame" | "affine:code" | "affine:paragraph" | "affine:list" | "affine:database" | "affine:divider" | "affine:embed" | "affine:page" | "affine:surface" = "affine:bookmark" | "affine:frame" | "affine:code" | "affine:paragraph" | "affine:list" | "affine:database" | "affine:divider" | "affine:embed" | "affine:page" | "affine:surface">(model: BaseBlockModel) => boolean;
type Allowed = unknown | void | null | undefined | boolean | number | string | unknown[] | object;
export declare function assertEquals<T extends Allowed, U extends T>(val: T, expected: U, message?: string): asserts val is U;
export declare function isEqual<T extends Allowed, U extends T>(val: T, expected: U): boolean;
export declare function sleep(ms: number): Promise<void>;
/**
 * Returns an object with four arrays: add, remove and unchanged.
 *
 * add: elements in after that are not in before
 * remove: elements in before that are not in after
 * unchanged: elements in both before and after
 */
export declare function diffArray<T>(before: T[], after: T[], compare?: (a: T, b: T) => boolean): {
    changed: number;
    add: T[];
    remove: T[];
    unchanged: T[];
};
//# sourceMappingURL=utils.d.ts.map