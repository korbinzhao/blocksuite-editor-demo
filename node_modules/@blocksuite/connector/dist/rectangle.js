export class Rectangle {
    constructor(x, y, w, h) {
        this.id = Math.random().toString(16).slice(2);
        this.x = x;
        this.y = y;
        this.w = w;
        this.h = h;
    }
    get minX() {
        return this.x;
    }
    get maxX() {
        return this.x + this.w;
    }
    get minY() {
        return this.y;
    }
    get maxY() {
        return this.y + this.h;
    }
    inflate(horizontal, vertical) {
        return new Rectangle(this.x - horizontal, this.y - vertical, this.w + horizontal * 2, this.h + vertical * 2);
    }
    contains(x, y) {
        return x >= this.minX && x <= this.maxX && y >= this.minY && y <= this.maxY;
    }
    relativeDirection(x, y) {
        const directionValues = {
            left: Math.abs(x - this.x),
            right: Math.abs(x - this.x - this.w),
            top: Math.abs(y - this.y),
            bottom: Math.abs(y - this.y - this.h),
        };
        let min;
        let d = 'top';
        Object.entries(directionValues).forEach(([k, v]) => {
            if (min === undefined) {
                min = v;
                d = k;
            }
            else {
                if (v < min) {
                    min = v;
                    d = k;
                }
            }
        });
        return d;
    }
}
//# sourceMappingURL=rectangle.js.map